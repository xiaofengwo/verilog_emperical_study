CommitId: 2b8d4ec1d0365b6a737636fb784373bdbc71e12b
Fixed lint errors and warnings generally
--- a/rtl/peripherals/zipcounter.v
+++ b/rtl/peripherals/zipcounter.v
@@ -54,9 +54,10 @@
 // }}}
 module	zipcounter #(
 		// {{{
-		parameter	BW = 32,
-		//
-		localparam	F_LGDEPTH = 2
+		parameter	BW = 32
+`ifdef	FORMAL
+		, localparam	F_LGDEPTH = 2
+`endif
 		// }}}
 	) (
 		// {{{
ParseResult:
DEL HdlIdDef@@F_LGDEPTH from params
HdlIdDef: F_LGDEPTH
    HdlValueInt: 2
    HdlDirection: INTERNAL


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -557,8 +652,11 @@ module	zipsystem #(
 	//
 	//
 
-	assign	dbg_cpu_write = OPT_DBGPORT && (dbg_stb && dbg_we
-				&& (dbg_addr[6:5] == DBG_ADDR_CPU) && dbg_sel == 4'hf);
+	assign	dbg_cpu_write = OPT_DBGPORT && (dbg_stb && !dbg_stall && dbg_we)
+				&& (dbg_addr[6:5] == DBG_ADDR_CPU)
+				&& dbg_sel == 4'hf;
+	assign	dbg_cpu_read = (dbg_stb && !dbg_stall && !dbg_we
+				&& dbg_addr[6:5] == DBG_ADDR_CPU);
 	assign	dbg_cmd_write = (dbg_stb)&&(dbg_we)
 					&&(dbg_addr[6:5] == DBG_ADDR_CTRL);
 	assign	dbg_cmd_data = dbg_idata;

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: dbg_stb
                                HdlValueId: dbg_we
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: dbg_addr
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 6
                                                HdlValueInt: 5
                                HdlValueId: DBG_ADDR_CPU
                HdlOp: EQ
                    list: ops
                        HdlValueId: dbg_sel
                        HdlValueInt: f
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                MOV HdlOp@@AND_LOG to ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: dbg_stb
                        HdlValueId: dbg_we
                UPD HdlOp@@AND_LOG to AND_LOG
                    MOV HdlValueId@@dbg_stb to ops
                    HdlValueId: dbg_stb
        DEL HdlValueId@@OPT_DBGPORT from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    INS HdlValueId@@dbg_cpu_read to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        INS HdlOp@@EQ to ops
        HdlOp: EQ
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_addr
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 6
                                HdlValueInt: 5
                HdlValueId: DBG_ADDR_CPU
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: dbg_stb
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: dbg_stall

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            INS HdlOp@@AND_LOG to ops
            UPD HdlOp@@AND_LOG to AND_LOG
                INS list@@ops to AND_LOG
                INS HdlValueId@@OPT_DBGPORT to ops
                UPD HdlOp@@AND_LOG to AND_LOG
                    INS HdlOp@@AND_LOG to ops
                    UPD HdlOp@@AND_LOG to AND_LOG
                        INS list@@ops to AND_LOG
                        INS HdlOp@@NEG_LOG to ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: dbg_stall


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -640,11 +738,11 @@ module	zipsystem #(
 		cmd_halt <= START_HALTED;
 	else begin
 		// {{{
-		// When shall we release from a halt?  Only if we have come to
-		// a full and complete stop.  Even then, we only release if we
-		// aren't being given a command to step the CPU.
+		// When shall we release from a halt?  Only if we have
+		// come to a full and complete stop.  Even then, we only
+		// release if we aren't being given a command to step the CPU.
 		//
-		if (!cmd_write && !cpu_dbg_stall && dbg_cmd_write
+		if (!cmd_write && cpu_has_halted && dbg_cmd_write
 				&& (release_request || step_request))
 			cmd_halt <= 1'b0;
 

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@NEG_LOG to NEG_LOG
                    UPD HdlValueId@@cpu_dbg_stall to cpu_has_halted
                    MOV HdlValueId@@cpu_dbg_stall to ops
                    HdlValueId: cpu_dbg_stall
                    DEL list@@ops from NEG_LOG
                DEL HdlOp@@NEG_LOG from ops


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -699,10 +797,21 @@ module	zipsystem #(
 	always @(posedge i_clk)
 	if (i_reset)
 		cmd_step <= 1'b0;
-	else if (step_request)
+	else if (cmd_reset || cpu_break
+			|| reset_request
+			|| clear_cache_request || cmd_clear_cache
+			|| halt_request || dbg_cpu_write)
+		cmd_step <= 1'b0;
+	else if (!cmd_write && cpu_has_halted && step_request)
 		cmd_step <= 1'b1;
-	else if (!cpu_dbg_stall)
+	else // if (cpu_dbg_stall)
 		cmd_step <= 1'b0;
+`ifdef	FORMAL
+	// While STEP is true, we can't halt
+	always @(*)
+	if (!i_reset && cmd_step)
+		assert(!cmd_halt);
+`endif
 	// }}}
 
 	// dbg_catch

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmIf: body
        HdlOp: OR_LOG
            list: ops
                HdlOp: OR_LOG
                    list: ops
                        HdlValueId: i_reset
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: dbg_cyc
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: OPT_DBGPORT
        HdlStmAssign: if_true
            HdlValueInt: 0
            HdlValueId: cmd_read
        list: elifs
            tuple
                HdlValueId: dbg_cpu_read
                HdlStmAssign
                    HdlValueInt: 1
                    HdlValueId: cmd_read
            tuple
                HdlOp: EQ
                    list: ops
                        HdlValueId: cmd_read_ack
                        HdlValueInt: 1
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: cmd_read

INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: cmd_read_ack
                    HdlValueInt: 0
            HdlStmWait:
                list: val

INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmIf: body
        HdlOp: OR_LOG
            list: ops
                HdlOp: OR_LOG
                    list: ops
                        HdlValueId: i_reset
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: dbg_cyc
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: OPT_DBGPORT
        HdlStmAssign: if_true
            HdlValueInt: 0
            HdlValueId: cmd_read_ack
        list: elifs
            tuple
                HdlValueId: dbg_cpu_read
                HdlStmAssign
                    HdlOp: ADD
                        list: ops
                            HdlValueInt: 1
                            HdlOp: TERNARY
                                list: ops
                                    HdlValueId: OPT_DISTRIBUTED_REGS
                                    HdlValueInt: 1
                                    HdlValueInt: 0
                    HdlValueId: cmd_read_ack
            tuple
                HdlOp: GT
                    list: ops
                        HdlValueId: cmd_read_ack
                        HdlValueInt: 0
                HdlStmAssign
                    HdlOp: SUB
                        list: ops
                            HdlValueId: cmd_read_ack
                            HdlValueInt: 1
                    HdlValueId: cmd_read_ack


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -763,6 +872,7 @@ module	zipsystem #(
 			cmd_reset, 1'b0, !cpu_dbg_stall, cmd_halt
 		};
 	end endgenerate
+
 	// }}}
 
 	assign	cpu_gie = cpu_dbg_cc[1];

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@cpu_dbg_stall to cpu_has_halted
            MOV HdlValueId@@cpu_dbg_stall to ops
            HdlValueId: cpu_dbg_stall
            DEL list@@ops from NEG_LOG
        DEL HdlOp@@NEG_LOG from ops


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -1257,6 +1413,10 @@ module	zipsystem #(
 			main_int_vector[14:0], pic_interrupt
 			// }}}
 		);
+
+`ifdef	VBENCH_TB
+		assign	int_state = { 1'b0, pic.r_int_state };
+`endif
 	end endgenerate
 	// }}}
 	////////////////////////////////////////////////////////////////////////

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlValueId@@cmd_write to ops
        HdlValueId: cmd_write


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/bench/formal/ffetch.v
+++ b/bench/formal/ffetch.v
@@ -48,8 +48,10 @@ module	ffetch #(
 		parameter	ADDRESS_WIDTH = 30,
 		parameter [0:0]	OPT_ALIGNED  = 1'b0,
 		parameter [0:0]	OPT_CONTRACT = 1'b1,
-		localparam	BUSW = 32, // Number of data lines on the bus
-		localparam	AW=ADDRESS_WIDTH // Shorthand for ADDRESS_WIDTH
+		parameter   INSN_WIDTH = 32, // Number of bits in an instruction
+		parameter [0:0]	F_OPT_ASYNC_RESET = 1'b0,
+		localparam	AW=ADDRESS_WIDTH, // Shorthand for ADDRESS_WIDTH
+		localparam	BW=AW + $clog2(INSN_WIDTH/8)	// Byte addr wid
 		// }}}
 	) (
 		// {{{

ParseResult:
UPD HdlIdDef@@BUSW to INSN_WIDTH

INS HdlIdDef@@F_OPT_ASYNC_RESET to params
HdlIdDef: F_OPT_ASYNC_RESET
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@BW to params
HdlIdDef: BW
    HdlOp: ADD
        list: ops
            HdlValueId: AW
            HdlOp: CALL
                list: ops
                    HdlValueId: $clog2
                    HdlOp: DIV
                        list: ops
                            HdlValueId: INSN_WIDTH
                            HdlValueInt: 8
    HdlDirection: INTERNAL


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/bench/formal/ffetch.v
+++ b/bench/formal/ffetch.v
@@ -58,20 +60,20 @@ module	ffetch #(
 		// The interface with the rest of the CPU
 		input	wire			cpu_new_pc,
 		input	wire			cpu_clear_cache,
-		input	wire	[(AW+1):0]	cpu_pc,
+		input	wire	[BW-1:0]	cpu_pc,
 		input	wire			pf_valid,
 		input	wire			cpu_ready,
-		input	wire	[(AW+1):0]	pf_pc,
-		input	wire	[(BUSW-1):0]	pf_insn,
+		input	wire	[BW-1:0]	pf_pc,
+		input	wire	[(INSN_WIDTH-1):0]	pf_insn,
 		//
 		// o_illegal will be true if this instruction was the result of
 		// a bus error (This is also part of the CPU interface)
 		input	wire			pf_illegal,
 		//
-		output	wire	[(AW+1):0]	fc_pc,
+		output	wire	[BW-1:0]	fc_pc,
 		output	wire			fc_illegal,
-		output	wire	[BUSW-1:0]	fc_insn,
-		output	reg	[(AW+1):0]	f_address
+		output	wire	[INSN_WIDTH-1:0]	fc_insn,
+		output	reg	[BW-1:0]	f_address
 		// }}}
 	);
 

ParseResult:
UPD HdlIdDef@@cpu_pc to cpu_pc
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@ADD to SUB
            UPD HdlOp@@ADD to ADD
                UPD HdlValueId@@AW to BW

UPD HdlIdDef@@pf_pc to pf_pc
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@ADD to SUB
            UPD HdlOp@@ADD to ADD
                UPD HdlValueId@@AW to BW

UPD HdlIdDef@@fc_pc to fc_pc
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@ADD to SUB
            UPD HdlOp@@ADD to ADD
                UPD HdlValueId@@AW to BW

UPD HdlIdDef@@f_address to f_address
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@ADD to SUB
            UPD HdlOp@@ADD to ADD
                UPD HdlValueId@@AW to BW

UPD HdlIdDef@@pf_insn to pf_insn
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@BUSW to INSN_WIDTH

UPD HdlIdDef@@fc_insn to fc_insn
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@BUSW to INSN_WIDTH


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/bench/formal/ffetch.v
+++ b/bench/formal/ffetch.v
@@ -84,16 +86,17 @@ module	ffetch #(
 `define	CPU_ASSUME	assert
 `define	CPU_ASSERT	assume
 `endif
-	reg	[(AW+1):0]	f_next_address;
+	localparam	INSN_LSB = $clog2(INSN_WIDTH/8);
+	reg	[BW-1:0]	f_next_address;
 	reg		f_past_valid;
 
 	reg		need_new_pc, past_stalled, past_illegal;
-	reg	[31:0]	past_insn;
+	reg	[INSN_WIDTH-1:0]	past_insn;
 
 	// Verilator lint_off UNDRIVEN
-	(* anyconst *)	reg	[(AW+1):0]	r_fc_pc;
+	(* anyconst *)	reg	[BW-1:0]	r_fc_pc;
 	(* anyconst *)	reg			r_fc_illegal;
-	(* anyconst *)	reg	[BUSW-1:0]	r_fc_insn;
+	(* anyconst *)	reg	[INSN_WIDTH-1:0]	r_fc_insn;
 	// Verilator lint_on  UNDRIVEN
 
 	assign	fc_pc		= r_fc_pc;

ParseResult:
INS HdlIdDef@@INSN_LSB to objs
HdlIdDef: INSN_LSB
    HdlOp: CALL
        list: ops
            HdlValueId: $clog2
            HdlOp: DIV
                list: ops
                    HdlValueId: INSN_WIDTH
                    HdlValueInt: 8
    HdlDirection: INTERNAL

UPD HdlIdDef@@f_next_address to f_next_address
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@ADD to SUB
            UPD HdlOp@@ADD to ADD
                UPD HdlValueId@@AW to BW

UPD HdlIdDef@@past_insn to past_insn
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            INS HdlOp@@SUB to ops
            UPD HdlOp@@SUB to SUB
                INS list@@ops to SUB
                INS HdlValueId@@INSN_WIDTH to ops

UPD HdlIdDef@@r_fc_pc to r_fc_pc
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@ADD to SUB
            UPD HdlOp@@ADD to ADD
                UPD HdlValueId@@AW to BW

UPD HdlIdDef@@past_insn to past_insn
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@31 to 1
            MOV HdlValueInt@@31 to ops
            HdlValueInt: 31

UPD HdlIdDef@@r_fc_insn to r_fc_insn
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@BUSW to INSN_WIDTH


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/bench/formal/ffetch.v
+++ b/bench/formal/ffetch.v
@@ -108,14 +111,16 @@ module	ffetch #(
 		f_address <= cpu_pc;
 	else if (pf_valid && cpu_ready)
 	begin
-		f_address[AW+1:2] <= f_address[AW+1:2] + 1'b1;
-		f_address[1:0] <= 0;
+		f_address[BW-1:INSN_LSB] <= f_address[BW-1:INSN_LSB] + 1'b1;
+		if (INSN_LSB > 0)
+			f_address[INSN_LSB-1:0] <= 0;
 	end
 
 	always @(*)
 	begin
-		f_next_address = f_address + 4;
-		f_next_address[1:0] = 2'b00;
+		f_next_address = f_address + (1<<INSN_LSB);
+		if (INSN_LSB > 0)
+			f_next_address[INSN_LSB-1:0] <= 0;
 	end
 	// }}}
 

ParseResult:
INS HdlStmIf@@ to body

INS HdlStmAssign@@if_true to 

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: f_next_address
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 1
                            HdlValueInt: 0
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    MOV HdlValueInt@@1 to ops
                    HdlValueInt: 1
            DEL HdlValueInt@@00 from ops
            DEL list@@ops from ASSIGN
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@ADD to ADD
                UPD HdlValueInt@@4 to 1
                MOV HdlValueInt@@4 to ops
                HdlValueInt: 4
        DEL HdlOp@@ASSIGN from body

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS HdlOp@@GT to 
    HdlOp: GT
        list: ops
            HdlValueId: INSN_LSB
            HdlValueInt: 0
    INS list@@elifs to 

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: f_address
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@ADD to SUB
            UPD HdlOp@@ADD to ADD
                UPD HdlValueId@@AW to BW
            DEL HdlValueInt@@2 from ops
    UPD HdlOp@@ADD to ADD
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlOp@@ADD to SUB
                UPD HdlOp@@ADD to ADD
                    UPD HdlValueId@@AW to BW
                DEL HdlValueInt@@2 from ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            INS HdlValueId@@INSN_LSB to ops
    UPD HdlOp@@ADD to ADD
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                INS HdlValueId@@INSN_LSB to ops

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            INS HdlOp@@SUB to ops
            UPD HdlOp@@SUB to SUB
                INS list@@ops to SUB
                INS HdlValueId@@INSN_LSB to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            MOV HdlValueInt@@1 to ops
            HdlValueInt: 1


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/bench/formal/ffetch.v
+++ b/bench/formal/ffetch.v
@@ -265,7 +277,7 @@ module	ffetch #(
 	generate if (OPT_CONTRACT)
 	begin : CHECK_CONTRACT
 		always @(*)
-		if (pf_valid && fc_pc[AW+1:2] == f_address[AW+1:2])
+		if (pf_valid && fc_pc[BW-1:INSN_LSB] == f_address[BW-1:INSN_LSB])
 		begin
 			if (fc_illegal)
 			begin

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@EQ to EQ
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    UPD HdlOp@@ADD to SUB
                    UPD HdlOp@@ADD to ADD
                        UPD HdlValueId@@AW to BW
                    DEL HdlValueInt@@2 from ops
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    UPD HdlOp@@ADD to SUB
                    UPD HdlOp@@ADD to ADD
                        UPD HdlValueId@@AW to BW
                    DEL HdlValueInt@@2 from ops


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/bench/formal/ffetch.v
+++ b/bench/formal/ffetch.v
@@ -276,7 +288,7 @@ module	ffetch #(
 
 		always @(posedge i_clk)
 		if (f_past_valid && !$past(pf_illegal) && pf_valid
-				&& fc_pc[AW+1:2] == f_address[AW+1:2])
+				&& fc_pc[BW-1:INSN_LSB] == f_address[BW-1:INSN_LSB])
 			`CPU_ASSUME(fc_illegal == pf_illegal);
 
 	end endgenerate
ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@EQ to EQ
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    INS HdlValueId@@INSN_LSB to ops
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    INS HdlValueId@@INSN_LSB to ops

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@EQ to EQ
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    UPD HdlOp@@ADD to SUB
                    UPD HdlOp@@ADD to ADD
                        UPD HdlValueId@@AW to BW
                    DEL HdlValueInt@@2 from ops
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    UPD HdlOp@@ADD to SUB
                    UPD HdlOp@@ADD to ADD
                        UPD HdlValueId@@AW to BW
                    DEL HdlValueInt@@2 from ops


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -100,17 +100,10 @@ module	dblfetch(i_clk, i_rst, i_new_pc, i_clear_cache,
 		begin
 			o_wb_cyc <= 1'b0;
 			o_wb_stb <= 1'b0;
-			// last_stb <= 1'b0;
-			// last_ack <= 1'b0;
 		end else if (o_wb_cyc)
 		begin
 			if ((o_wb_stb)&&(!i_wb_stall))
-			begin
-				// last_stb <= 1'b1;
 				o_wb_stb <= !last_stb;
-			end
-			// if (i_wb_ack)
-			//	last_ack <= 1'b1;
 			if ((i_new_pc)||(invalid_bus_cycle))
 				o_wb_stb <= 1'b0;
 

ParseResult:
UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: last_stb
    HdlValueId: o_wb_stb

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -210,7 +205,7 @@ module	dblfetch(i_clk, i_rst, i_new_pc, i_clear_cache,
 
 	initial	o_i = {(32){1'b1}};
 	always @(posedge i_clk)
-		if ((i_stall_n)&&(o_wb_cyc)&&(i_wb_ack))
+		if (((i_stall_n)||(!o_v))&&(o_wb_cyc)&&(i_wb_ack))
 			o_i <= i_wb_data;
 		else
 			o_i <= cache[cache_read_addr];
ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            INS HdlOp@@OR_LOG to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS list@@ops to OR_LOG
                INS HdlOp@@NEG_LOG to ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: o_v

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlValueId@@i_stall_n to ops
            HdlValueId: i_stall_n


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -48,6 +48,7 @@ module	zipcore #(
 		parameter	ADDRESS_WIDTH=30,
 				LGICACHE=12,
 		parameter	IMPLEMENT_MPY = 0,
+		parameter [0:0]	IMPLEMENT_SHIFTS = 1,
 		parameter [0:0]	IMPLEMENT_DIVIDE = 1,
 `ifdef	OPT_IMPLEMENT_FPU
 		parameter [0:0]	IMPLEMENT_FPU = 1,

ParseResult:
INS HdlIdDef@@IMPLEMENT_SHIFTS to params
HdlIdDef: IMPLEMENT_SHIFTS
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -70,14 +72,14 @@ module	zipcore #(
 		input	wire		i_clk, i_reset, i_interrupt,
 		// Debug interface
 		// {{{
-		input	wire		i_halt, i_clear_pf_cache,
+		input	wire		i_halt, i_clear_cache,
 		input	wire	[4:0]	i_dbg_reg,
 		input	wire		i_dbg_we,
 		input	wire	[31:0]	i_dbg_data,
 		//
 		output	wire		o_dbg_stall,
 		output	reg	[31:0]	o_dbg_reg,
-		output	reg	[3:0]	o_dbg_cc,
+		output	reg	[2:0]	o_dbg_cc,
 		output	wire		o_break,
 		// }}}
 		// Instruction fetch interface

ParseResult:
UPD HdlIdDef@@i_clear_pf_cache to i_clear_cache

UPD HdlIdDef@@o_dbg_cc to o_dbg_cc
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@3 to 2


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -124,11 +126,6 @@ module	zipcore #(
 	localparam	[0:0]	OPT_MEMPIPE = OPT_PIPELINED_BUS_ACCESS;
 	localparam [(AW-1):0]	RESET_BUS_ADDRESS = RESET_ADDRESS[(AW+1):2];
 	localparam	[0:0]	OPT_LOCK=(IMPLEMENT_LOCK)&&(OPT_PIPELINED);
-`ifdef	OPT_NO_USERMODE
-	localparam	[0:0]	OPT_NO_USERMODE = 1'b1;
-`else
-	localparam	[0:0]	OPT_NO_USERMODE = 1'b0;
-`endif
 	localparam	[3:0]	CPU_CC_REG = 4'he,
 				CPU_PC_REG = 4'hf;
 	localparam	[3:0]	CPU_SUB_OP = 4'h0,// also a compare instruction

ParseResult:
MOV HdlIdDef@@OPT_NO_USERMODE to objs
HdlIdDef: OPT_NO_USERMODE
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -438,9 +439,14 @@ module	zipcore #(
 			(!adf_ce_unconditional)&&(!mem_ce)
 			)
 			||(dcd_valid)&&(
+				// If we are halted, then accepting anything
+				// into the Op stage might accept a register
+				// that then gets modified by the debugging
+				// interface so as to be invalid.
+				i_halt
 				// Stall if we need to wait for an operand A
 				// to be ready to read
-				(dcd_A_stall)
+				|| (dcd_A_stall)
 				// Likewise for B, also includes logic
 				// regarding immediate offset (register must
 				// be in register file if we need to add to

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    INS HdlOp@@OR_LOG to ops
                    UPD HdlOp@@OR_LOG to OR_LOG
                        INS list@@ops to OR_LOG
                        INS HdlValueId@@i_halt to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    MOV HdlValueId@@dcd_A_stall to ops
                    HdlValueId: dcd_A_stall


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -630,17 +640,17 @@ module	zipcore #(
 `else
 		.OPT_SIM(1'b0),
 `endif
-		.OPT_CIS(OPT_CIS))
-		instruction_decoder(i_clk,
-			(i_reset)||(clear_pipeline)||(o_clear_icache),
+		.OPT_CIS(OPT_CIS)
+		// }}}
+	) instruction_decoder(
+		// {{{
+			i_clk, (i_reset)||(clear_pipeline)||(o_clear_icache),
 			dcd_ce,
 			dcd_stalled, i_pf_instruction, pf_gie,
 			i_pf_instruction_pc, i_pf_valid, i_pf_illegal,
 			dcd_valid, dcd_phase,
 			dcd_illegal, dcd_pc,
-			{ dcd_Rcc, dcd_Rpc, dcd_R },
-			{ dcd_Acc, dcd_Apc, dcd_A },
-			{ dcd_Bcc, dcd_Bpc, dcd_B },
+			dcd_full_R, dcd_full_A, dcd_full_B,
 			dcd_preA, dcd_preB,
 			dcd_I, dcd_zI, dcd_F, dcd_wF, dcd_opn,
 			dcd_ALU, dcd_M, dcd_DIV, dcd_FP, dcd_break, dcd_lock,

ParseResult:
INS HdlStmAssign@@ to objs


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -652,7 +662,12 @@ module	zipcore #(
 `ifdef	FORMAL
 			, f_dcd_insn_word, f_dcd_insn_gie
 `endif
-			);
+		// }}}
+	);
+
+	assign	{ dcd_Rcc, dcd_Rpc, dcd_R } = dcd_full_R;
+	assign	{ dcd_Acc, dcd_Apc, dcd_A } = dcd_full_A;
+	assign	{ dcd_Bcc, dcd_Bpc, dcd_B } = dcd_full_B;
 	assign	dcd_gie = pf_gie;
 	// }}}
 	////////////////////////////////////////////////////////////////////////

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlValueId@@dcd_full_R to 

UPD HdlStmAssign@@ to 
    INS HdlValueId@@dcd_full_A to 


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1423,7 +1443,7 @@ module	zipcore #(
 		end else if (!alu_busy) begin
 			// These are strobe signals, so clear them if not
 			// set for any particular clock
-			alu_wR <= (r_halted)&&(i_dbg_we);
+			alu_wR <= (r_halted)&&(i_dbg_we && !o_dbg_stall);
 			alu_wF <= 1'b0;
 		end
 	end else begin

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@r_halted to o_dbg_stall
        MOV HdlValueId@@r_halted to ops
        HdlValueId: r_halted


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1466,13 +1486,13 @@ module	zipcore #(
 		always @(posedge i_clk)
 		if (alu_ce || div_ce || o_mem_ce || fpu_ce)
 			alu_reg <= op_R;
-		else if ((r_halted)&&(i_dbg_we))
+		else if (i_dbg_we && !o_dbg_stall)
 			alu_reg <= i_dbg_reg;
 
 	end else begin
 
 		always @(posedge i_clk)
-			if ((r_halted)&&(i_dbg_we))
+			if (i_dbg_we && !o_dbg_stall)
 				alu_reg <= i_dbg_reg;
 			else
 				alu_reg <= op_R;

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: o_dbg_stall
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlOp@@NEG_LOG to ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_dbg_stall

UPD HdlStmIf@@body to body
    MOV HdlValueId@@i_dbg_we to 
    HdlValueId: i_dbg_we
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@i_clear_pf_cache to i_clear_cache
        MOV HdlValueId@@i_clear_pf_cache to ops
        HdlValueId: i_clear_pf_cache


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2367,7 +2387,7 @@ module	zipcore #(
 		begin
 			pfpcsrc = 0;
 			pfpcset = 1;
-		end else if ((dbg_clear_pipe)&&(wr_reg_ce)&&(wr_write_pc))
+		end else if ((dbgv)&&(wr_reg_ce)&&(wr_reg_id[4] == gie && wr_write_pc))
 		begin
 			pfpcsrc = 1; // spreg
 			pfpcset = 1;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@r_halted to i_clear_cache
        UPD HdlValueId@@i_clear_pf_cache to o_dbg_stall
        MOV HdlValueId@@i_clear_pf_cache to ops
        HdlValueId: i_clear_pf_cache


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2380,7 +2400,7 @@ module	zipcore #(
 		begin
 			pfpcsrc = 3; // upc
 			pfpcset = 1;
-		end else if ((wr_reg_ce)&&(wr_reg_id[4] == gie)&&(wr_write_pc))
+		end else if ((wr_reg_ce)&&(wr_reg_id[4] == gie && wr_write_pc))
 		begin
 			pfpcsrc = 1; // spreg
 			pfpcset = 1;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@r_halted to i_clear_cache
        UPD HdlValueId@@i_clear_pf_cache to o_dbg_stall
        MOV HdlValueId@@i_clear_pf_cache to ops
        HdlValueId: i_clear_pf_cache


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2502,7 +2522,6 @@ module	zipcore #(
 
 	// debug_pc
 	// {{{
-	reg	[31:0]	debug_pc;
 	generate if (OPT_NO_USERMODE)
 	begin
 		// {{{

ParseResult:
INS HdlStmIf@@body to 

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_halted

UPD HdlStmAssign@@body to if_false

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: i_halt
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: alu_phase
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: o_bus_lock
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: i_pf_valid
                                                            HdlOp: NEG_LOG
                                                                list: ops
                                                                    HdlValueId: i_mem_busy
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: alu_busy
                                            HdlOp: NEG_LOG
                                                list: ops
                                                    HdlValueId: div_busy
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: fpu_busy
                            HdlOp: OR_LOG
                                list: ops
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlValueId: op_valid
                                            HdlValueId: i_reset
                                    HdlValueId: dcd_illegal
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: OR_LOG
                                list: ops
                                    HdlValueId: dcd_valid
                                    HdlValueId: i_reset
                            HdlValueId: i_pf_illegal
    HdlValueId: r_halted

UPD HdlStmAssign@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: i_halt
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: alu_phase
            MOV HdlOp@@NEG_LOG to ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_bus_lock
            UPD HdlOp@@AND_LOG to AND_LOG
                DEL HdlValueId@@i_halt from ops
            DEL list@@ops from AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    MOV HdlValueId@@dcd_valid to ops
                    HdlValueId: dcd_valid
                    DEL HdlValueId@@i_reset from ops
                    DEL list@@ops from OR_LOG
                DEL HdlOp@@OR_LOG from ops
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    UPD HdlOp@@OR_LOG to OR_LOG
                        MOV HdlValueId@@op_valid to ops
                        HdlValueId: op_valid
                        DEL HdlValueId@@i_reset from ops
                        DEL list@@ops from OR_LOG
                    DEL HdlOp@@OR_LOG from ops
        DEL HdlOp@@AND_LOG from ops

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2554,27 +2573,35 @@ module	zipcore #(
 
 `ifdef	NO_DISTRIBUTED_RAM
 		// {{{
+		reg		dbg_reg_sel;
+		reg	[31:0]	pre_dbg_special;
+
+		always @(posedge i_clk)
+			dbg_reg_sel <= (i_dbg_reg[3:1] == 3'h7);
+
 		always @(posedge i_clk)
 			pre_dbg_reg <= regset[i_dbg_reg];
 
 		always @(posedge i_clk)
-		begin
-			o_dbg_reg <= pre_dbg_reg;
-			if (i_dbg_reg[3:0] == CPU_PC_REG)
-				o_dbg_reg <= debug_pc;
-			else if (i_dbg_reg[3:0] == CPU_CC_REG)
-			begin
-				o_dbg_reg[15:0] <= (i_dbg_reg[4])
+		if (i_dbg_reg[0])
+			pre_dbg_special <= debug_pc;
+		else begin
+			pre_dbg_special[15:0] <= (i_dbg_reg[4])
 						? w_uflags : w_iflags;
-				o_dbg_reg[31:23] <= w_cpu_info;
-				o_dbg_reg[CPU_GIE_BIT] <= gie;
-			end
+			pre_dbg_special[31:23] <= w_cpu_info;
+			pre_dbg_special[CPU_GIE_BIT] <= gie;
 		end
+
+		always @(posedge i_clk)
+		if (dbg_reg_sel)
+			o_dbg_reg <= pre_dbg_special;
+		else
+			o_dbg_reg <= pre_dbg_reg;
 		// }}}
 `else
 		// {{{
 		always @(*)
-			pre_dbg_reg <= regset[i_dbg_reg];
+			pre_dbg_reg = regset[i_dbg_reg];
 
 		always @(posedge i_clk)
 		begin

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@NEG_LOG to body
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: i_halt
    INS list@@elifs to body
    list: elifs
        tuple
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: i_reset
                    HdlValueId: r_halted
            HdlStmAssign
                HdlValueInt: 1
                HdlValueId: r_halted


CommitId: cf2feffdfef26575245532024a3482ac25daa466
Fixed cache usage issue(s) (sort of)
--- a/rtl/core/pfcache.v
+++ b/rtl/core/pfcache.v
@@ -221,7 +221,7 @@ module	pfcache #(
 
 	//
 	// Read the tag value associated with this i_pc value
-	initial	tagvalipc = 0;
+	// initial	tagvalipc = 0;
 	always @(posedge i_clk)
 		tagvalipc <= cache_tags[i_pc[(CW+1):LS+2]];
 

ParseResult:
DEL HdlStmProcess@@ from objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: tagvalipc
                    HdlValueInt: 0
            HdlStmWait:
                list: val


CommitId: cf2feffdfef26575245532024a3482ac25daa466
Fixed cache usage issue(s) (sort of)
--- a/rtl/core/pfcache.v
+++ b/rtl/core/pfcache.v
@@ -230,7 +230,7 @@ module	pfcache #(
 	// Read the tag value associated with the lastpc value, from what
 	// i_pc was when we could not tell if this value was in our cache or
 	// not, or perhaps from when we determined that i was not in the cache.
-	initial	tagvallst = 0;
+	// initial	tagvallst = 0;
 	always @(posedge i_clk)
 		tagvallst <= cache_tags[lastpc[(CW+1):LS+2]];
 
ParseResult:
DEL HdlStmProcess@@ from objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: tagvallst
                    HdlValueInt: 0
            HdlStmWait:
                list: val


CommitId: dd4e68fc843052024ab4b2ea10830416a3f87e9d
Simplified ZipBones dbg interface, fixed ack on cyc bug
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -107,35 +113,30 @@ module	zipbones(i_clk, i_rst,
 	reg		cmd_reset, cmd_halt, cmd_step, cmd_clear_pf_cache;
 	reg	[4:0]	cmd_addr;
 	wire	[3:0]	cpu_dbg_cc;
-	assign	dbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(~i_dbg_addr);
+	assign	dbg_cmd_write = (i_dbg_cyc)&&(i_dbg_stb)&&(i_dbg_we)&&(!i_dbg_addr);
 	//
 	// Always start us off with an initial reset
 	//
 	initial	cmd_reset = 1'b1;
 	always @(posedge i_clk)
-		cmd_reset <= ((dbg_cmd_write)&&(i_dbg_data[6]));
+		cmd_reset <= ((dbg_cmd_write)&&(i_dbg_data[`RESET_BIT]));
 	//
 	initial	cmd_halt  = START_HALTED;
 	always @(posedge i_clk)
 		if (i_rst)
-			cmd_halt <= (START_HALTED == 1)? 1'b1 : 1'b0;
+			cmd_halt <= (START_HALTED);
 		else if (dbg_cmd_write)
-			cmd_halt <= ((i_dbg_data[10])||(i_dbg_data[8]));
+			cmd_halt <= ((i_dbg_data[`HALT_BIT])&&(!i_dbg_data[`STEP_BIT]));
 		else if ((cmd_step)||(cpu_break))
 			cmd_halt  <= 1'b1;
 
 	initial	cmd_clear_pf_cache = 1'b0;
 	always @(posedge i_clk)
-		if (i_rst)
-			cmd_clear_pf_cache <= 1'b0;
-		else if (dbg_cmd_write)
-			cmd_clear_pf_cache <= i_dbg_data[11];
-		else
-			cmd_clear_pf_cache <= 1'b0;
+		cmd_clear_pf_cache <= (dbg_cmd_write)&&(i_dbg_data[`CLEAR_CACHE_BIT]);
 	//
 	initial	cmd_step  = 1'b0;
 	always @(posedge i_clk)
-		cmd_step <= (dbg_cmd_write)&&(i_dbg_data[8]);
+		cmd_step <= (dbg_cmd_write)&&(i_dbg_data[`STEP_BIT]);
 	//
 	initial	cmd_addr = 5'h0;
 	always @(posedge i_clk)

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG to NEG_LOG


CommitId: dd4e68fc843052024ab4b2ea10830416a3f87e9d
Simplified ZipBones dbg interface, fixed ack on cyc bug
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -146,7 +147,7 @@ module	zipbones(i_clk, i_rst,
 	assign	cpu_reset = (cmd_reset)||(i_rst);
 
 	wire	cpu_halt, cpu_dbg_stall;
-	assign	cpu_halt = (i_rst)||((cmd_halt)&&(~cmd_step));
+	assign	cpu_halt = (cmd_halt);
 	wire	[31:0]	cmd_data;
 	// Values:
 	//	0x0003f -> cmd_addr mask

ParseResult:
UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@EQ to EQ
            MOV HdlValueId@@START_HALTED to ops
            HdlValueId: START_HALTED
            DEL HdlValueInt@@1 from ops
            DEL list@@ops from EQ
        DEL HdlOp@@EQ from ops
        DEL HdlValueInt@@1 from ops
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from if_true

UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to AND_LOG
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: i_dbg_data
                HdlValueInt: 8

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@NEG_LOG to ops
        UPD HdlOp@@NEG_LOG to NEG_LOG
            INS list@@ops to NEG_LOG


CommitId: dd4e68fc843052024ab4b2ea10830416a3f87e9d
Simplified ZipBones dbg interface, fixed ack on cyc bug
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -161,7 +162,7 @@ module	zipbones(i_clk, i_rst,
 	//	0x10000 -> External interrupt line is high
 	assign	cmd_data = { 7'h00, 8'h00, i_ext_int,
 			cpu_dbg_cc,
-			1'b0, cmd_halt, (~cpu_dbg_stall), 1'b0,
+			1'b0, cmd_halt, (!cpu_dbg_stall), 1'b0,
 			1'b0, cpu_reset, 1'b0, cmd_addr };
 
 	//

ParseResult:
UPD HdlStmAssign@@ to body

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: i_dbg_data
            HdlValueInt: 11
    HdlValueId: cmd_clear_pf_cache

UPD HdlStmAssign@@body to body
    INS HdlOp@@AND_LOG to body

UPD HdlStmIf@@body to body
    UPD list@@elifs to ops
    MOV list@@elifs to body
    list: elifs
        tuple
            HdlValueId: dbg_cmd_write
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_dbg_data
                        HdlValueInt: 11
                HdlValueId: cmd_clear_pf_cache
    MOV HdlValueId@@dbg_cmd_write to 
    HdlValueId: dbg_cmd_write
    DEL tuple@@ from elifs
    DEL HdlValueId@@i_rst from body

UPD HdlStmAssign@@ to 
    MOV HdlOp@@INDEX to 
    HdlOp: INDEX
        list: ops
            HdlValueId: i_dbg_data
            HdlValueInt: 11

DEL HdlStmIf@@body from 


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/sim/rtl/wbdown.v
+++ b/sim/rtl/wbdown.v
@@ -117,10 +153,10 @@ module wbdown #(
 			if (OPT_LITTLE_ENDIAN)
 			begin
 				s_data <= s_data >> SMALL_DW;
-				s_sel  <= s_sel >> 1;
+				s_sel  <= s_sel >> (SMALL_DW/8);
 			end else begin
 				s_data <= s_data << SMALL_DW;
-				s_sel  <= s_sel << 1;
+				s_sel  <= s_sel << (SMALL_DW/8);
 			end
 			// }}}
 		end
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@SRL to SRL
        UPD HdlValueInt@@1 to 8
        MOV HdlValueInt@@1 to ops
        HdlValueInt: 1

UPD HdlStmAssign@@ to 
    UPD HdlOp@@SLL to SLL
        UPD HdlValueInt@@1 to 8
        MOV HdlValueInt@@1 to ops
        HdlValueInt: 1


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_fsm.v
+++ b/rtl/zipdma/zipdma_fsm.v
@@ -90,7 +90,7 @@ module	zipdma_fsm #(
 
 	// Local declarations
 	// {{{
-	localparam	[1:0]	// S_IDLE = 2'b00,
+	localparam	[1:0]	S_IDLE = 2'b00,
 				S_WAIT = 2'b01,
 				S_READ = 2'b10,
 				S_WRITE = 2'b11;

ParseResult:
INS HdlIdDef@@S_IDLE to objs
HdlIdDef: S_IDLE
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 00
    HdlDirection: INTERNAL


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_fsm.v
+++ b/rtl/zipdma/zipdma_fsm.v
@@ -104,14 +104,16 @@ module	zipdma_fsm #(
 	if (i_reset || i_soft_reset || i_mm2s_err || i_s2mm_err)
 	begin
 		// {{{
-		o_dma_busy <= 0;
-		r_length <= 0;
-		r_transferlen <= 0;
+		o_dma_busy     <= 0;
+		r_length       <= 0;
+		r_transferlen  <= 0;
 		o_mm2s_request <= 0;
 		o_s2mm_request <= 0;
 
 		o_mm2s_addr <= 0;
 		o_s2mm_addr <= 0;
+
+		fsm_state   <= S_IDLE;
 		// }}}
 	end else if (!o_dma_busy)
 	begin

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: S_IDLE
    HdlValueId: fsm_state


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_fsm.v
+++ b/rtl/zipdma/zipdma_fsm.v
@@ -124,7 +126,7 @@ module	zipdma_fsm #(
 					: i_transferlen;
 		// Verilator lint_on  WIDTH
 
-		fsm_state <= (i_trigger) ? S_WAIT : S_READ;
+		fsm_state <= S_IDLE;
 
 		o_mm2s_request <= 0;
 		o_s2mm_request <= 0;

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlValueId@@S_WAIT to S_IDLE
        MOV HdlValueId@@S_WAIT to ops
        HdlValueId: S_WAIT
        DEL HdlValueId@@i_trigger from ops
        DEL HdlValueId@@S_READ from ops
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from 


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_fsm.v
+++ b/rtl/zipdma/zipdma_fsm.v
@@ -133,10 +135,16 @@ module	zipdma_fsm #(
 		begin
 			o_dma_busy <= 1'b1;
 
+			fsm_state      <= (i_trigger) ? S_READ : S_WAIT;
+			o_mm2s_request <= i_trigger;
+
 			o_mm2s_addr <= i_src_addr;
 			o_s2mm_addr <= i_dst_addr;
 			r_length <= i_length;
 		end
+`ifdef	FORMAL
+		assert(fsm_state == S_IDLE);
+`endif
 		// }}}
 	end else case(fsm_state)
 	S_WAIT: begin

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlValueId: i_trigger
            HdlValueId: S_READ
            HdlValueId: S_WAIT
    HdlValueId: fsm_state

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: i_trigger
    HdlValueId: o_mm2s_request


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_fsm.v
+++ b/rtl/zipdma/zipdma_fsm.v
@@ -151,7 +159,7 @@ module	zipdma_fsm #(
 		// }}}
 	S_READ: begin
 		// {{{
-		if (!i_mm2s_busy)
+		if (o_mm2s_request && !i_mm2s_busy)	// VALID && READY
 			o_mm2s_request <= 1'b0;
 		if (!i_mm2s_busy && !o_mm2s_request)
 		begin

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlOp@@NEG_LOG to 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: i_mm2s_busy


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_fsm.v
+++ b/rtl/zipdma/zipdma_fsm.v
@@ -171,7 +179,7 @@ module	zipdma_fsm #(
 		// }}}
 	S_WRITE: begin
 		// {{{
-		if (!i_s2mm_busy)
+		if (o_s2mm_request && !i_s2mm_busy)	// VALID && READY
 			o_s2mm_request <= 1'b0;
 		if (!i_s2mm_busy && !o_s2mm_request)
 		begin

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlOp@@NEG_LOG to 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: i_s2mm_busy


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_fsm.v
+++ b/rtl/zipdma/zipdma_fsm.v
@@ -185,13 +193,14 @@ module	zipdma_fsm #(
 
 			if (i_s2mm_inc)
 				// Verilator lint_off WIDTH
-				o_s2mm_addr <= o_mm2s_addr + r_transferlen;
+				o_s2mm_addr <= o_s2mm_addr + r_transferlen;
 				// Verilator lint_on  WIDTH
 
 			if (r_length == 0)
 			begin
-				fsm_state  <= S_WAIT;
-				o_dma_busy <= 1'b0;
+				fsm_state      <= S_IDLE;
+				o_mm2s_request <= 1'b0;
+				o_dma_busy     <= 1'b0;
 			end
 		end end
 		// }}}
ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: o_mm2s_request

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@ADD to ADD
        UPD HdlValueId@@o_mm2s_addr to o_s2mm_addr

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@S_WAIT to S_IDLE


CommitId: a7e501077e22ac4d6ef05550defeb80c0db4c1cb
Fixed a register use-before-name issue
--- a/rtl/aux/wbdblpriarb.v
+++ b/rtl/aux/wbdblpriarb.v
@@ -107,9 +107,10 @@ module	wbdblpriarb(i_clk, i_rst,
 	//
 	// The CYC logic is here to make certain that, by the time we determine
 	// who the bus owner is, we can do so based upon determined criteria.
+	reg	r_a_owner;
+
 	assign o_cyc_a = ((r_a_owner) ? i_a_cyc_a : i_b_cyc_a);
 	assign o_cyc_b = ((r_a_owner) ? i_a_cyc_b : i_b_cyc_b);
-	reg	r_a_owner;
 	initial	r_a_owner = 1'b1;
 	always @(posedge i_clk)
 		if (i_rst)
ParseResult:
MOV HdlIdDef@@r_a_owner to objs
HdlIdDef: r_a_owner
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_master.v
+++ b/rtl/aux/fwb_master.v
@@ -88,6 +88,19 @@ module	fwb_master(i_clk, i_reset,
 	parameter	[0:0]	F_OPT_DISCONTINUOUS = 0;
 	//
 	//
+	// If true, insist that there be a minimum of a single clock delay
+	// between request and response.  This defaults to off since the
+	// wishbone specification specifically doesn't require this.  However,
+	// some interfaces do, so we allow it as an option here.
+	parameter	[0:0]	F_OPT_MINCLOCK_DELAY = 0;
+	//
+	//
+	// F_OPT_CLK2FFLOGIC needs to be set to true any time the clk2fflogic
+	// command is present in the yosys script.  If clk2fflogic isn't used,
+	// then setting this parameter to zero will eliminate some formal
+	// tests which would then be inappropriate.
+	parameter	[0:0]	F_OPT_CLK2FFLOGIC = 1'b1;
+	//
 	localparam [(F_LGDEPTH-1):0] MAX_OUTSTANDING = {(F_LGDEPTH){1'b1}};
 	localparam	MAX_DELAY = (F_MAX_STALL > F_MAX_ACK_DELAY)
 				? F_MAX_STALL : F_MAX_ACK_DELAY;

ParseResult:
INS HdlIdDef@@F_OPT_MINCLOCK_DELAY to params
HdlIdDef: F_OPT_MINCLOCK_DELAY
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@F_OPT_CLK2FFLOGIC to params
HdlIdDef: F_OPT_CLK2FFLOGIC
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_master.v
+++ b/rtl/aux/fwb_master.v
@@ -139,7 +152,7 @@ module	fwb_master(i_clk, i_reset,
 		f_past_valid <= 1'b1;
 	always @(*)
 		if (!f_past_valid)
-			assume(i_reset);
+			assert(i_reset);
 	//
 	//
 	// Assertions regarding the initial (and reset) state

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    MOV HdlOp@@NEG_LOG to body
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: f_past_valid
    DEL HdlOp@@CALL from body
    HdlOp: CALL
        list: ops
            HdlValueId: assume
            HdlValueId: i_reset
    DEL list@@elifs from body

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_master.v
+++ b/rtl/aux/fwb_master.v
@@ -166,21 +179,21 @@ module	fwb_master(i_clk, i_reset,
 	end
 
 	// Things can only change on the positive edge of the clock
-	always @($global_clock)
-	if ((f_past_valid)&&(!$rose(i_clk)))
+	generate if (F_OPT_CLK2FFLOGIC)
 	begin
-		assert($stable(i_reset));
-		assert($stable(i_wb_cyc));
-		if (i_wb_we)
+		always @($global_clock)
+		if ((f_past_valid)&&(!$rose(i_clk)))
+		begin
+			assert($stable(i_reset));
+			assert($stable(i_wb_cyc));
 			assert($stable(f_request)); // The entire request should b stabl
-		else
-			assert($stable(f_request[(2+AW-1):(DW+DW/8)]));
-		//
-		assume($stable(i_wb_ack));
-		assume($stable(i_wb_stall));
-		assume($stable(i_wb_idata));
-		assume($stable(i_wb_err));
-	end
+			//
+			assume($stable(i_wb_ack));
+			assume($stable(i_wb_stall));
+			assume($stable(i_wb_idata));
+			assume($stable(i_wb_err));
+		end
+	end endgenerate
 
 	//
 	//

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@body to body
    INS HdlOp@@CALL to body
    HdlOp: CALL
        list: ops
            HdlValueId: assert
            HdlValueId: i_reset
    INS list@@elifs to body

MOV HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: CALL
            list: ops
                HdlValueId: $global_clock
    HdlStmIf: body
        HdlOp: AND_LOG
            list: ops
                HdlValueId: f_past_valid
                HdlOp: NEG_LOG
                    list: ops
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $rose
                                HdlValueId: i_clk
        HdlStmBlock: SEQ
            list: body
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_reset
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_cyc
                HdlStmIf
                    HdlValueId: i_wb_we
                    HdlOp: CALL
                        list: ops
                            HdlValueId: assert
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $stable
                                    HdlValueId: f_request
                    list: elifs
                    HdlOp: CALL
                        list: ops
                            HdlValueId: assert
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $stable
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: f_request
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlOp: ADD
                                                                list: ops
                                                                    HdlValueInt: 2
                                                                    HdlValueId: AW
                                                            HdlValueInt: 1
                                                    HdlOp: ADD
                                                        list: ops
                                                            HdlValueId: DW
                                                            HdlOp: DIV
                                                                list: ops
                                                                    HdlValueId: DW
                                                                    HdlValueInt: 8
                HdlOp: CALL
                    list: ops
                        HdlValueId: assume
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_ack
                HdlOp: CALL
                    list: ops
                        HdlValueId: assume
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_stall
                HdlOp: CALL
                    list: ops
                        HdlValueId: assume
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_idata
                HdlOp: CALL
                    list: ops
                        HdlValueId: assume
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_err
        list: elifs

DEL HdlStmIf@@ from body
HdlStmIf
    HdlValueId: i_wb_we
    HdlOp: CALL
        list: ops
            HdlValueId: assert
            HdlOp: CALL
                list: ops
                    HdlValueId: $stable
                    HdlValueId: f_request
    list: elifs
    HdlOp: CALL
        list: ops
            HdlValueId: assert
            HdlOp: CALL
                list: ops
                    HdlValueId: $stable
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: f_request
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlOp: ADD
                                                list: ops
                                                    HdlValueInt: 2
                                                    HdlValueId: AW
                                            HdlValueInt: 1
                                    HdlOp: ADD
                                        list: ops
                                            HdlValueId: DW
                                            HdlOp: DIV
                                                list: ops
                                                    HdlValueId: DW
                                                    HdlValueInt: 8


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_master.v
+++ b/rtl/aux/fwb_master.v
@@ -206,7 +219,11 @@ module	fwb_master(i_clk, i_reset,
 			&&($past(i_wb_stall))&&(i_wb_cyc))
 	begin
 		assert(i_wb_stb);
-		assert($stable(f_request));
+		assert(i_wb_we   == $past(i_wb_we));
+		assert(i_wb_addr == $past(i_wb_addr));
+		assert(i_wb_sel  == $past(i_wb_sel));
+		if (i_wb_we)
+			assert(i_wb_data == $past(i_wb_data));
 	end
 
 	// Within any series of STB/requests, the direction of the request

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlValueId@@F_OPT_CLK2FFLOGIC to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmIf@@ to body
HdlStmIf
    HdlValueId: i_wb_we
    HdlOp: CALL
        list: ops
            HdlValueId: assert
            HdlOp: EQ
                list: ops
                    HdlValueId: i_wb_data
                    HdlOp: CALL
                        list: ops
                            HdlValueId: $past
                            HdlValueId: i_wb_data
    list: elifs

UPD HdlStmIf@@body to body
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@CALL to body
        HdlOp: CALL
            list: ops
                HdlValueId: assert
                HdlOp: CALL
                    list: ops
                        HdlValueId: $stable
                        HdlValueId: f_request


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_master.v
+++ b/rtl/aux/fwb_master.v
@@ -335,10 +352,16 @@ module	fwb_master(i_clk, i_reset,
 			// no acknowledgements ... however, an acknowledgement
 			// *can* come back on the same clock as the stb is
 			// going out.
-			assume((!i_wb_ack)||((i_wb_stb)&&(!i_wb_stall)));
-			// The same is true of errors.  They may not be
-			// created before the request gets through
-			assume((!i_wb_err)||((i_wb_stb)&&(!i_wb_stall)));
+			if (F_OPT_MINCLOCK_DELAY)
+			begin
+				assume(!i_wb_ack);
+				assume(!i_wb_err);
+			end else begin
+				assume((!i_wb_ack)||((i_wb_stb)&&(!i_wb_stall)));
+				// The same is true of errors.  They may not be
+				// created before the request gets through
+				assume((!i_wb_err)||((i_wb_stb)&&(!i_wb_stall)));
+			end
 		end
 
 	generate if (F_OPT_SOURCE)
ParseResult:
INS HdlStmIf@@ to body

UPD HdlStmIf@@body to body
    MOV HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlOp: CALL
                list: ops
                    HdlValueId: assume
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_wb_ack
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_wb_stb
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_wb_stall
            HdlOp: CALL
                list: ops
                    HdlValueId: assume
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_wb_err
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_wb_stb
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_wb_stall


CommitId: 2b8d4ec1d0365b6a737636fb784373bdbc71e12b
Fixed lint errors and warnings generally
--- a/rtl/ex/busdelay.v
+++ b/rtl/ex/busdelay.v
@@ -66,7 +66,9 @@
 module	busdelay #(
 		// {{{
 		parameter		AW=32, DW=32,
+`ifdef	FORMAL
 		localparam		F_LGDEPTH=4,
+`endif
 		parameter	 [0:0]	DELAY_STALL  = 1,
 		parameter	 [0:0]	OPT_LOWPOWER = 0
 		// }}}
ParseResult:
DEL HdlIdDef@@F_LGDEPTH from params
HdlIdDef: F_LGDEPTH
    HdlValueInt: 4
    HdlDirection: INTERNAL


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -136,9 +136,7 @@ module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
 
 	initial	invalid_bus_cycle = 1'b0;
 	always @(posedge i_clk)
-		if (i_reset)
-			invalid_bus_cycle <= 1'b0;
-		else if ((o_wb_cyc)&&(i_new_pc))
+		if ((o_wb_cyc)&&(i_new_pc))
 			invalid_bus_cycle <= 1'b1;
 		else if (!o_wb_cyc)
 			invalid_bus_cycle <= 1'b0;

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: o_wb_cyc
            HdlValueId: i_new_pc
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlValueInt: 1
    HdlValueId: invalid_bus_cycle

DEL HdlStmAssign@@if_true from body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: invalid_bus_cycle


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -75,10 +75,10 @@ module	zipaxi #(
 		parameter [0:0]	OPT_CIS = 1'b1,
 		parameter [0:0]	OPT_LOWPOWER   = 1'b0,
 		parameter [0:0]	OPT_DISTRIBUTED_REGS = 1'b1,
-		parameter [0:0]	OPT_DBGPORT    = 1'b1,
+		parameter [0:0]	OPT_DBGPORT    = START_HALTED,
 		parameter [0:0]	OPT_TRACE_PORT = 1'b0,
 		parameter [0:0]	OPT_PROFILER   = 1'b0,
-		parameter	[0:0]	OPT_USERMODE = 1'b1,
+		parameter [0:0]	OPT_USERMODE   = 1'b1,
 		parameter		LGILINESZ= 3,
 		parameter		OPT_LGDLINESZ = 3,
 		parameter	RESET_DURATION = 10,

ParseResult:
UPD HdlIdDef@@OPT_DBGPORT to OPT_DBGPORT
    INS HdlValueId@@START_HALTED to OPT_DBGPORT

UPD HdlIdDef@@OPT_DBGPORT to OPT_DBGPORT
    DEL HdlValueInt@@1 from OPT_DBGPORT


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -510,6 +516,18 @@ module	zipaxi #(
 	assign	dbg_cmd_data = wskd_data;
 	assign	dbg_cmd_strb = wskd_strb;
 
+	assign	reset_request = dbg_cmd_write && dbg_cmd_strb[RESET_BIT/8]
+						&& dbg_cmd_data[RESET_BIT];
+	assign	release_request = dbg_cmd_write && dbg_cmd_strb[HALT_BIT/8]
+						&& !dbg_cmd_data[HALT_BIT];
+	assign	halt_request = dbg_cmd_write && dbg_cmd_strb[HALT_BIT/8]
+						&& dbg_cmd_data[HALT_BIT];
+	assign	step_request = dbg_cmd_write && dbg_cmd_strb[STEP_BIT/8]
+						&& dbg_cmd_data[STEP_BIT];
+	assign	clear_cache_request = dbg_cmd_write
+					&& dbg_cmd_strb[CLEAR_CACHE_BIT/8]
+					&& dbg_cmd_data[CLEAR_CACHE_BIT];
+
 	//
 	// reset_hold: Always start us off with an initial reset
 	// {{{

ParseResult:
INS HdlStmAssign@@ to objs

INS HdlStmAssign@@ to objs

INS HdlStmAssign@@ to objs

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    INS HdlValueId@@reset_request to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: dbg_cmd_write
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_cmd_strb
                        HdlOp: DIV
                            list: ops
                                HdlValueId: RESET_BIT
                                HdlValueInt: 8

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    INS HdlValueId@@release_request to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: dbg_cmd_write
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_cmd_strb
                        HdlOp: DIV
                            list: ops
                                HdlValueId: HALT_BIT
                                HdlValueInt: 8


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -546,23 +564,26 @@ module	zipaxi #(
 	end endgenerate
 	// }}}
 
+	assign	halt_on_fault = dbg_catch;
+
 	// cmd_reset
 	// {{{
+	// Always start us off with an initial reset
 	initial	cmd_reset = 1'b1;
 	always @(posedge S_AXI_ACLK)
 	if (!S_AXI_ARESETN || i_cpu_reset)
 		cmd_reset <= 1'b1;
 	else if (reset_hold)
 		cmd_reset <= 1'b1;
-	else if (cpu_break && !START_HALTED)
+	else if (cpu_break && !halt_on_fault)
 		cmd_reset <= 1'b1;
 	else
-		cmd_reset <= (dbg_cmd_write && dbg_cmd_strb[0]
-					&& dbg_cmd_data[RESET_BIT]);
+		cmd_reset <= reset_request;
 	// }}}
 
 	// cmd_halt
 	// {{{
+	initial	cmd_halt  = START_HALTED;
 	always @(posedge S_AXI_ACLK)
 	if (!S_AXI_ARESETN)
 		cmd_halt <= START_HALTED;

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: cmd_halt
                    HdlValueId: START_HALTED
            HdlStmWait:
                list: val

UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_data
                HdlValueId: RESET_BIT
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@dbg_cmd_write to reset_request
            MOV HdlValueId@@dbg_cmd_write to ops
            HdlValueId: dbg_cmd_write
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_strb
                    HdlValueInt: 0
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from if_false

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            MOV HdlOp@@NEG_LOG to ops
            HdlOp: NEG_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_cmd_data
                            HdlValueId: HALT_BIT
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: STEP_BIT
            DEL list@@ops from OR_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: dbg_write_valid
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: cpu_dbg_stall
                        HdlValueId: dbg_cmd_write
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_cmd_strb
                        HdlValueInt: 0
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@INDEX to OR_LOG
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@dbg_cmd_strb to release_request
                DEL HdlValueInt@@0 from ops
        DEL HdlOp@@OR_LOG from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@START_HALTED to halt_on_fault


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -572,9 +593,12 @@ module	zipaxi #(
 		cmd_halt <= START_HALTED;
 	else begin
 		// {{{
+		// When shall we release from a halt?  Only if we have come to
+		// a full and complete stop.  Even then, we only release if we
+		// aren't being given a command to step the CPU.
+		//
 		if (!dbg_write_valid && !cpu_dbg_stall && dbg_cmd_write
-			&& dbg_cmd_strb[0] && (!dbg_cmd_data[HALT_BIT]
-				|| dbg_cmd_data[STEP_BIT]))
+				&& (release_request || step_request))
 			cmd_halt <= 1'b0;
 
 		// Reasons to halt

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@START_HALTED to halt_on_fault

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: dbg_cmd_write
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_cmd_strb
                            HdlValueInt: 0
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@dbg_cmd_strb to halt_request
                    MOV HdlValueId@@dbg_cmd_strb to ops
                    HdlValueId: dbg_cmd_strb
                    DEL HdlValueInt@@0 from ops
                    DEL list@@ops from INDEX
                DEL HdlOp@@INDEX from ops
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: HALT_BIT
            DEL list@@ops from AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlOp@@INDEX to INDEX
                MOV list@@ops to INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: STEP_BIT
                UPD HdlValueId@@dbg_cmd_data to step_request
                DEL HdlValueId@@STEP_BIT from ops
            DEL HdlOp@@INDEX from ops
            DEL list@@ops from NEG_LOG
        DEL HdlOp@@AND_LOG from ops


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -583,13 +607,12 @@ module	zipaxi #(
 		//	exception must be cured before we can (re)start.
 		//	If the CPU is configured to start immediately on power
 		//	up, we leave it to reset on any exception instead.
-		if (cpu_break && START_HALTED)
+		if (cpu_break && halt_on_fault)
 			cmd_halt <= 1'b1;
 
 		// 2. Halt on any user request to halt.  (Only valid if the
 		//	STEP bit isn't also set)
-		if (dbg_cmd_write && dbg_cmd_strb[0] && dbg_cmd_data[HALT_BIT]
-				&& !dbg_cmd_data[STEP_BIT])
+		if (dbg_cmd_write && halt_request && !step_request)
 			cmd_halt <= 1'b1;
 
 		// 3. Halt on any user request to write to a CPU register

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            INS HdlValueId@@step_request to ops


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -605,7 +628,7 @@ module	zipaxi #(
 			cmd_halt <= 1'b1;
 
 		// 5. Halt on any clear cache bit--independent of any step bit
-		if (dbg_cmd_write && dbg_cmd_strb[0] && dbg_cmd_data[CLEAR_CACHE_BIT])
+		if (clear_cache_request)
 			cmd_halt <= 1'b1;
 		// }}}
 	end

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: HALT_BIT
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@dbg_cmd_data to clear_cache_request
                    MOV HdlValueId@@dbg_cmd_data to ops
                    HdlValueId: dbg_cmd_data
                    DEL HdlValueId@@CLEAR_CACHE_BIT from ops
                    DEL list@@ops from INDEX
                DEL HdlOp@@INDEX from ops
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: dbg_cmd_write
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: dbg_cmd_data
                                HdlValueId: CLEAR_CACHE_BIT
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_cmd_data
                        HdlValueId: HALT_BIT
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 0
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -617,8 +640,7 @@ module	zipaxi #(
 	always @(posedge  S_AXI_ACLK)
 	if (!S_AXI_ARESETN || cmd_reset)
 		cmd_clear_cache <= 1'b0;
-	else if (dbg_cmd_write && dbg_cmd_data[CLEAR_CACHE_BIT]
-			&& dbg_cmd_data[HALT_BIT] && dbg_cmd_strb[0])
+	else if (dbg_cmd_write && clear_cache_request && halt_request)
 		cmd_clear_cache <= 1'b1;
 	else if (cmd_halt && !cpu_dbg_stall)
 		cmd_clear_cache <= 1'b0;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: STEP_BIT
            UPD HdlValueId@@dbg_cmd_write to step_request
            MOV HdlValueId@@dbg_cmd_write to ops
            HdlValueId: dbg_cmd_write
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 0
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -630,12 +652,31 @@ module	zipaxi #(
 	always @(posedge S_AXI_ACLK)
 	if (!S_AXI_ARESETN || i_cpu_reset)
 		cmd_step <= 1'b0;
-	else if (dbg_cmd_write && dbg_cmd_data[STEP_BIT] && dbg_cmd_strb[0])
+	else if (step_request)
 		cmd_step <= 1'b1;
 	else if (!cpu_dbg_stall)
 		cmd_step <= 1'b0;
 	// }}}
 
+	// dbg_catch
+	// {{{
+	generate if (!OPT_DBGPORT)
+	begin
+		assign	dbg_catch = START_HALTED;
+	end else begin
+		reg	r_dbg_catch;
+
+		initial	r_dbg_catch = START_HALTED;
+		always @(posedge S_AXI_ACLK)
+		if (!S_AXI_ARESETN)
+			r_dbg_catch <= START_HALTED;
+		else if (dbg_cmd_write && dbg_cmd_strb[CATCH_BIT/8])
+			r_dbg_catch <= dbg_cmd_data[CATCH_BIT];
+
+		assign	dbg_catch = r_dbg_catch;
+	end endgenerate
+	// }}}
+
 	// cpu_status
 	// {{{
 	//	0xffff_f000 -> (Unused / reserved)

ParseResult:
INS HdlStmIf@@ to objs
HdlStmIf
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: OPT_DBGPORT
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueId: START_HALTED
                HdlValueId: dbg_catch
    list: elifs
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_dbg_catch
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: r_dbg_catch
                                HdlValueId: START_HALTED
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: S_AXI_ACLK
                HdlStmIf: body
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: S_AXI_ARESETN
                    HdlStmAssign: if_true
                        HdlValueId: START_HALTED
                        HdlValueId: r_dbg_catch
                    list: elifs
                        tuple
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: dbg_cmd_write
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: dbg_cmd_strb
                                            HdlOp: DIV
                                                list: ops
                                                    HdlValueId: CATCH_BIT
                                                    HdlValueInt: 8
                            HdlStmAssign
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: dbg_cmd_data
                                        HdlValueId: CATCH_BIT
                                HdlValueId: r_dbg_catch
            HdlStmAssign
                HdlValueId: r_dbg_catch
                HdlValueId: dbg_catch


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -645,7 +686,8 @@ module	zipaxi #(
 	//	0x0000_0200 -> User mode
 	//	0x0000_0100 -> Sleep (CPU is sleeping)
 	//
-	//	0x0000_00e0 -> (Unused/reserved)
+	//	0x0000_00c0 -> (Unused/reserved)
+	//	0x0000_0020 -> dbg_catch
 	//	0x0000_0010 -> cmd_clear_cache
 	//
 	//	0x0000_0008 -> Reset

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlValueId@@halt_request to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@CONCAT to CONCAT
            MOV HdlOp@@CONCAT to ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlOp: CONCAT
                                                                list: ops
                                                                    HdlOp: CONCAT
                                                                        list: ops
                                                                            HdlValueInt: 0
                                                                            HdlValueInt: 0
                                                                    HdlValueId: cpu_break
                                                            HdlValueId: i_interrupt
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: cpu_dbg_cc
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 1
                                                                    HdlValueInt: 0
                                            HdlValueInt: 0
                                    HdlValueInt: 0
                            HdlValueId: cmd_reset
                    HdlValueInt: 0
            UPD HdlOp@@CONCAT to CONCAT
                MOV HdlValueInt@@0 to ops
                HdlValueInt: 0
                UPD HdlOp@@CONCAT to CONCAT
                    MOV HdlValueId@@cmd_reset to ops
                    HdlValueId: cmd_reset
                    UPD HdlOp@@CONCAT to CONCAT
                        MOV HdlValueInt@@0 to ops
                        HdlValueInt: 0


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/div.v
+++ b/rtl/core/div.v
@@ -97,7 +97,8 @@
 `default_nettype	none
 // }}}
 module	div #(
-		parameter		BW=32, LGBW = 5
+		parameter		BW=32, LGBW = 5,
+		parameter [0:0]	OPT_LOWPOWER = 1'b0
 	) (
 		// {{{
 		input	wire		i_clk, i_reset,

ParseResult:
INS HdlIdDef@@OPT_LOWPOWER to params
HdlIdDef: OPT_LOWPOWER
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/div.v
+++ b/rtl/core/div.v
@@ -297,7 +298,7 @@ module	div #(
 		r_dividend <= { r_dividend[2*BW-3:0], 1'b0 };
 		if (!diff[BW])
 			r_dividend[2*BW-2:BW] <= diff[(BW-2):0];
-	end else if (!r_busy)
+	end else if (!r_busy && (!OPT_LOWPOWER || i_wr))
 		// Once we are done, and r_busy is no longer high, we'll
 		// always accept new values into our dividend.  This
 		// guarantees that, when i_wr is set, the new value

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: OPT_LOWPOWER
                HdlValueId: i_wr

UPD HdlStmIf@@body to body
    MOV HdlOp@@NEG_LOG to 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: r_busy


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/div.v
+++ b/rtl/core/div.v
@@ -315,7 +316,7 @@ module	div #(
 	begin
 		if (r_divisor[BW-1])
 			r_divisor <= -r_divisor;
-	end else if (!r_busy)
+	end else if (!r_busy && (!OPT_LOWPOWER || i_wr))
 		r_divisor <= i_denominator;
 	// }}}
 

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: OPT_LOWPOWER
                HdlValueId: i_wr

UPD HdlStmIf@@body to body
    MOV HdlOp@@NEG_LOG to 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: r_busy


CommitId: 2414f9b93038046da588ea193d143e123d56c6c0
ZIPDMA: Speed fixes, to bring it to 200MHz on a Kintex-7
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -100,13 +100,13 @@ module	zipdma_mm2s #(
 	reg	[WBLSB:0]	nxtstb_size, rdstb_size, rdack_size, first_size;
 	reg	[ADDRESS_WIDTH-1:0]	next_addr, last_request_addr;
 	reg	[WBLSB-1:0]	subaddr, rdack_subaddr;
-	reg	[DW/8-1:0]	nxtstb_sel, first_sel;
+	reg	[DW/8-1:0]	nxtstb_sel, first_sel, base_sel, ibase_sel;
 	reg	[LGLENGTH:0]	wb_outstanding;
 
 	reg	[WBLSB+1:0]	fill, next_fill;
 
 	reg			m_valid, m_last;
-	reg	[2*DW-1:0]	sreg;
+	reg	[DW-1:0]	sreg;
 	reg	[WBLSB:0]	m_bytes;
 
 	reg	[LGLENGTH:0]	rdstb_len, rdack_len;

ParseResult:
INS HdlIdDef@@base_sel to objs
HdlIdDef: base_sel
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@ibase_sel to objs
HdlIdDef: ibase_sel
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@sreg to objs

UPD HdlIdDef@@sreg to sreg
    INS HdlDirection@@INTERNAL to sreg

DEL HdlIdDef@@sreg from objs
HdlIdDef: sreg
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: MUL
                                list: ops
                                    HdlValueInt: 2
                                    HdlValueId: DW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 2414f9b93038046da588ea193d143e123d56c6c0
ZIPDMA: Speed fixes, to bring it to 200MHz on a Kintex-7
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -204,7 +204,8 @@ module	zipdma_mm2s #(
 			default: begin
 				// Verilator lint_off WIDTH
 				nxtstb_size = (DW/8);
-				if (DW/8 > rdstb_len - rdstb_size)
+				if ((rdstb_len[LGLENGTH:WBLSB+1] == 0)
+					    &&(rdstb_size + DW/8 > rdstb_len[WBLSB:0]))
 					nxtstb_size =
 						{ 1'b0, rdstb_len[WBLSB:0] }
 						-{ 1'b0, rdstb_size[WBLSB:0]};

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@EQ to ops
        HdlOp: EQ
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: rdstb_len
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueId: LGLENGTH
                                HdlOp: ADD
                                    list: ops
                                        HdlValueId: WBLSB
                                        HdlValueInt: 1
                HdlValueInt: 0
        INS HdlOp@@GT to ops
        UPD HdlOp@@GT to GT
            INS list@@ops to GT
            UPD HdlOp@@ADD to ADD
                INS HdlValueId@@rdstb_size to ops
            UPD HdlOp@@INDEX to INDEX
                INS HdlOp@@DOWNTO to ops
                UPD HdlOp@@DOWNTO to DOWNTO
                    INS list@@ops to DOWNTO
                    INS HdlValueInt@@0 to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@GT to ADD
    MOV HdlOp@@GT to 
    HdlOp: GT
        list: ops
            HdlOp: DIV
                list: ops
                    HdlValueId: DW
                    HdlValueInt: 8
            HdlOp: SUB
                list: ops
                    HdlValueId: rdstb_len
                    HdlValueId: rdstb_size
    UPD HdlOp@@GT to GT
        UPD HdlOp@@SUB to INDEX
        MOV HdlOp@@SUB to ops
        HdlOp: SUB
            list: ops
                HdlValueId: rdstb_len
                HdlValueId: rdstb_size
        UPD HdlOp@@SUB to SUB
            UPD HdlValueId@@rdstb_size to WBLSB
            MOV HdlValueId@@rdstb_size to ops
            HdlValueId: rdstb_size


CommitId: 2414f9b93038046da588ea193d143e123d56c6c0
ZIPDMA: Speed fixes, to bring it to 200MHz on a Kintex-7
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -314,8 +315,9 @@ module	zipdma_mm2s #(
 `ifdef	FORMAL
 	always @(*)
 	if (!o_busy)
+	begin
 		assert(!m_valid);
-	else if (m_valid && m_last)
+	end else if (m_valid && m_last)
 	begin
 		assert(rdack_len == 0);
 		assert(fill == m_bytes);

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll

DEL HdlStmProcess@@ from objs


CommitId: 2414f9b93038046da588ea193d143e123d56c6c0
ZIPDMA: Speed fixes, to bring it to 200MHz on a Kintex-7
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -549,8 +643,8 @@ module	zipdma_mm2s #(
 		if ((!m_valid || !m_last) && rdack_len == 0 && fill > 0)
 			m_valid <= 1;
 		else if (o_rd_cyc && i_rd_ack)
-			m_valid <= ((next_fill >= DW/8)
-			|| (rdack_len <= { {(LGLENGTH-1){1'b0}}, rdack_size }));
+			m_valid <= 1'b1; // ((next_fill >= DW/8)
+			// || (rdack_len <= { {(LGLENGTH-1){1'b0}}, rdack_size }));
 		// Verilator lint_on  WIDTH
 	end
 	// }}}

ParseResult:
UPD HdlStmIf@@ to body

MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: r_inc
    HdlStmCase: r_size
        HdlStmCaseType: CASE
        HdlValueId: r_size
        list: cases
            tuple
                HdlValueId: SZ_BYTE
                HdlStmAssign
                    HdlOp: ADD
                        list: ops
                            HdlValueId: pre_shift
                            HdlValueInt: 1
                    HdlValueId: pre_shift
            tuple
                HdlValueId: SZ_16B
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlValueId: pre_shift
                                    HdlValueInt: 2
                            HdlValueId: pre_shift
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: pre_shift
                                    HdlValueInt: 0
            tuple
                HdlValueId: SZ_32B
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlValueId: pre_shift
                                    HdlValueInt: 4
                            HdlValueId: pre_shift
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: pre_shift
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 1
                                            HdlValueInt: 0
            tuple
                HdlValueId: SZ_BUS
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: pre_shift
    list: elifs

UPD HdlStmIf@@body to body
    MOV HdlOp@@NEG_LOG to body
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: o_busy
    MOV HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_LOWPOWER
                        HdlValueId: i_request
                HdlStmAssign: if_true
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: WBLSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0
                    HdlValueId: pre_shift
                list: elifs
    MOV list@@elifs to body
    list: elifs
        tuple
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: o_rd_cyc
                    HdlValueId: i_rd_ack
            HdlStmBlock: SEQ
                list: body
                    HdlStmIf
                        HdlValueId: r_inc
                        HdlStmCase: r_size
                            HdlStmCaseType: CASE
                            HdlValueId: r_size
                            list: cases
                                tuple
                                    HdlValueId: SZ_BYTE
                                    HdlStmAssign
                                        HdlOp: ADD
                                            list: ops
                                                HdlValueId: pre_shift
                                                HdlValueInt: 1
                                        HdlValueId: pre_shift
                                tuple
                                    HdlValueId: SZ_16B
                                    HdlStmBlock: SEQ
                                        list: body
                                            HdlStmAssign
                                                HdlOp: ADD
                                                    list: ops
                                                        HdlValueId: pre_shift
                                                        HdlValueInt: 2
                                                HdlValueId: pre_shift
                                            HdlStmAssign
                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: pre_shift
                                                        HdlValueInt: 0
                                tuple
                                    HdlValueId: SZ_32B
                                    HdlStmBlock: SEQ
                                        list: body
                                            HdlStmAssign
                                                HdlOp: ADD
                                                    list: ops
                                                        HdlValueId: pre_shift
                                                        HdlValueInt: 4
                                                HdlValueId: pre_shift
                                            HdlStmAssign
                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: pre_shift
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlValueInt: 0
                                tuple
                                    HdlValueId: SZ_BUS
                                    HdlStmAssign
                                        HdlValueInt: 0
                                        HdlValueId: pre_shift
                        list: elifs

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: pre_shift

MOV HdlStmCase@@r_size to 
HdlStmCase: r_size
    HdlStmCaseType: CASE
    HdlValueId: r_size
    list: cases
        tuple
            HdlValueId: SZ_BYTE
            HdlStmAssign
                HdlOp: ADD
                    list: ops
                        HdlValueId: pre_shift
                        HdlValueInt: 1
                HdlValueId: pre_shift
        tuple
            HdlValueId: SZ_16B
            HdlStmBlock: SEQ
                list: body
                    HdlStmAssign
                        HdlOp: ADD
                            list: ops
                                HdlValueId: pre_shift
                                HdlValueInt: 2
                        HdlValueId: pre_shift
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: pre_shift
                                HdlValueInt: 0
        tuple
            HdlValueId: SZ_32B
            HdlStmBlock: SEQ
                list: body
                    HdlStmAssign
                        HdlOp: ADD
                            list: ops
                                HdlValueId: pre_shift
                                HdlValueInt: 4
                        HdlValueId: pre_shift
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: pre_shift
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
        tuple
            HdlValueId: SZ_BUS
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: pre_shift

UPD HdlStmIf@@ to 
    DEL HdlValueId@@r_inc from 
    DEL list@@elifs from 

DEL HdlStmIf@@body from 


CommitId: 2414f9b93038046da588ea193d143e123d56c6c0
ZIPDMA: Speed fixes, to bring it to 200MHz on a Kintex-7
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -561,23 +655,23 @@ module	zipdma_mm2s #(
 	always @(posedge i_clk)
 	if (!o_busy)
 	begin
+		pre_shift <= 0;
 		if (!OPT_LOWPOWER || i_request)
 			pre_shift <= i_addr[WBLSB-1:0];
 	end else if (o_rd_cyc && i_rd_ack)
 	begin
-		if (r_inc)
 		case(r_size)
-		SZ_BYTE: pre_shift <= pre_shift + 1;
+		SZ_BYTE: pre_shift <= pre_shift + (r_inc ? 1 : 0);
 		SZ_16B:  begin
 			// {{{
-			pre_shift <= pre_shift + 2;
+			pre_shift <= pre_shift + (r_inc ? 2 : 0);
 			pre_shift[0] <= 1'b0;
 			end
 			// }}}
 		SZ_32B:  begin
 			// {{{
 			// Verilator lint_off WIDTH
-			pre_shift <= pre_shift + 4;
+			pre_shift <= pre_shift + (r_inc ? 4 : 0);
 			// Verilator lint_on  WIDTH
 			pre_shift[1:0] <= 2'b0;
 			end

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmIf@@ to body

MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: r_inc
    HdlStmCase: r_size
        HdlStmCaseType: CASE
        HdlValueId: r_size
        list: cases
            tuple
                HdlValueId: SZ_BYTE
                HdlStmAssign
                    HdlOp: ADD
                        list: ops
                            HdlValueId: pre_shift
                            HdlValueInt: 1
                    HdlValueId: pre_shift
            tuple
                HdlValueId: SZ_16B
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlValueId: pre_shift
                                    HdlValueInt: 2
                            HdlValueId: pre_shift
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: pre_shift
                                    HdlValueInt: 0
            tuple
                HdlValueId: SZ_32B
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlValueId: pre_shift
                                    HdlValueInt: 4
                            HdlValueId: pre_shift
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: pre_shift
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 1
                                            HdlValueInt: 0
            tuple
                HdlValueId: SZ_BUS
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: pre_shift
    list: elifs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    MOV HdlOp@@NEG_LOG to body
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: o_busy
    MOV HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_LOWPOWER
                        HdlValueId: i_request
                HdlStmAssign: if_true
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: WBLSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0
                    HdlValueId: pre_shift
                list: elifs
    MOV list@@elifs to body
    list: elifs
        tuple
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: o_rd_cyc
                    HdlValueId: i_rd_ack
            HdlStmBlock: SEQ
                list: body
                    HdlStmIf
                        HdlValueId: r_inc
                        HdlStmCase: r_size
                            HdlStmCaseType: CASE
                            HdlValueId: r_size
                            list: cases
                                tuple
                                    HdlValueId: SZ_BYTE
                                    HdlStmAssign
                                        HdlOp: ADD
                                            list: ops
                                                HdlValueId: pre_shift
                                                HdlValueInt: 1
                                        HdlValueId: pre_shift
                                tuple
                                    HdlValueId: SZ_16B
                                    HdlStmBlock: SEQ
                                        list: body
                                            HdlStmAssign
                                                HdlOp: ADD
                                                    list: ops
                                                        HdlValueId: pre_shift
                                                        HdlValueInt: 2
                                                HdlValueId: pre_shift
                                            HdlStmAssign
                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: pre_shift
                                                        HdlValueInt: 0
                                tuple
                                    HdlValueId: SZ_32B
                                    HdlStmBlock: SEQ
                                        list: body
                                            HdlStmAssign
                                                HdlOp: ADD
                                                    list: ops
                                                        HdlValueId: pre_shift
                                                        HdlValueInt: 4
                                                HdlValueId: pre_shift
                                            HdlStmAssign
                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: pre_shift
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlValueInt: 0
                                tuple
                                    HdlValueId: SZ_BUS
                                    HdlStmAssign
                                        HdlValueInt: 0
                                        HdlValueId: pre_shift
                        list: elifs

UPD HdlStmIf@@body to body
    MOV HdlOp@@NEG_LOG to body
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: o_busy
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: o_rd_cyc
            HdlValueId: i_rd_ack
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL tuple@@ from elifs
    DEL HdlValueId@@m_valid from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL tuple@@ from elifs
    DEL list@@elifs from body

MOV HdlStmCase@@r_size to 
HdlStmCase: r_size
    HdlStmCaseType: CASE
    HdlValueId: r_size
    list: cases
        tuple
            HdlValueId: SZ_BYTE
            HdlStmAssign
                HdlOp: ADD
                    list: ops
                        HdlValueId: pre_shift
                        HdlValueInt: 1
                HdlValueId: pre_shift
        tuple
            HdlValueId: SZ_16B
            HdlStmBlock: SEQ
                list: body
                    HdlStmAssign
                        HdlOp: ADD
                            list: ops
                                HdlValueId: pre_shift
                                HdlValueInt: 2
                        HdlValueId: pre_shift
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: pre_shift
                                HdlValueInt: 0
        tuple
            HdlValueId: SZ_32B
            HdlStmBlock: SEQ
                list: body
                    HdlStmAssign
                        HdlOp: ADD
                            list: ops
                                HdlValueId: pre_shift
                                HdlValueInt: 4
                        HdlValueId: pre_shift
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: pre_shift
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
        tuple
            HdlValueId: SZ_BUS
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: pre_shift

UPD HdlStmAssign@@ to 
    UPD HdlOp@@ADD to ADD
        MOV HdlValueInt@@4 to ops
        HdlValueInt: 4

UPD HdlStmIf@@ to 
    DEL HdlValueId@@r_inc from 
    DEL list@@elifs from 

DEL HdlStmIf@@body from 

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -203,22 +223,18 @@ module	zipbones(i_clk, i_reset,
 	//	0x00100 -> cmd_step
 	//	0x00200 -> cmd_stall
 	//	0x00400 -> cmd_halt
-	//	0x00800 -> cmd_clear_pf_cache
+	//	0x00800 -> cmd_clear_cache
 	//	0x01000 -> cc.sleep
 	//	0x02000 -> cc.gie
 	//	0x10000 -> External interrupt line is high
 	assign	cmd_data = { 7'h00, 8'h00, i_ext_int,
-			cpu_dbg_cc,
+			cpu_break, cpu_dbg_cc,
 			1'b0, cmd_halt, (!cpu_dbg_stall), 1'b0,
 			i_ext_int, cpu_reset, 1'b0, cmd_addr };
 
 	//
 	// The CPU itself
-	//
-	wire		cpu_lcl_cyc, cpu_lcl_stb, 
-			cpu_dbg_we,
-			cpu_op_stall, cpu_pf_stall, cpu_i_count;
-	wire	[31:0]	cpu_dbg_data;
+	// {{{
 	assign cpu_dbg_we = ((dbg_stb)&&(dbg_we)&&(dbg_addr));
 	zipwb	#(.RESET_ADDRESS(RESET_ADDRESS),
 			.ADDRESS_WIDTH(ADDRESS_WIDTH),

ParseResult:
INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    MOV HdlValueId@@i_reset to body
    HdlValueId: i_reset
    MOV tuple@@ to elifs
    tuple
        HdlValueId: cmd_reset
        HdlStmAssign
            HdlValueId: START_HALTED
            HdlValueId: cmd_halt
    MOV tuple@@ to elifs
    tuple
        HdlOp: OR_LOG
            list: ops
                HdlValueId: cmd_step
                HdlValueId: cpu_break
        HdlStmAssign
            HdlValueInt: 1
            HdlValueId: cmd_halt
    MOV tuple@@ to elifs
    tuple
        HdlValueId: dbg_cmd_write
        HdlStmAssign
            HdlOp: AND_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_idata
                            HdlValueInt: 10
                    HdlOp: NEG_LOG
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: dbg_idata
                                    HdlValueInt: 8
            HdlValueId: cmd_halt
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlValueId@@cmd_step to ops
        HdlValueId: cmd_step
        UPD list@@ops to elifs
        MOV list@@ops to OR_LOG
        list: ops
            HdlValueId: cmd_step
            HdlValueId: cpu_break
        UPD HdlValueId@@cpu_break to cpu_dbg_stall
        MOV HdlValueId@@cpu_break to ops
        HdlValueId: cpu_break
    MOV HdlOp@@OR_LOG to 
    HdlOp: OR_LOG
        list: ops
            HdlValueId: cmd_step
            HdlValueId: cpu_break
    UPD list@@elifs to body
    MOV list@@elifs to body
    list: elifs
        tuple
            HdlValueId: cmd_reset
            HdlStmAssign
                HdlValueId: START_HALTED
                HdlValueId: cmd_halt
        tuple
            HdlValueId: dbg_cmd_write
            HdlStmAssign
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: dbg_idata
                                HdlValueInt: 10
                        HdlOp: NEG_LOG
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: dbg_idata
                                        HdlValueInt: 8
                HdlValueId: cmd_halt
        tuple
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: cmd_step
                    HdlValueId: cpu_break
            HdlStmAssign
                HdlValueInt: 1
                HdlValueId: cmd_halt
    MOV HdlValueId@@dbg_cmd_write to 
    HdlValueId: dbg_cmd_write

UPD HdlStmIf@@body to body
    INS list@@elifs to body
    INS tuple@@ to elifs
    tuple
        HdlValueId: cpu_break
        HdlStmAssign
            HdlValueInt: 1
            HdlValueId: cmd_halt
    INS tuple@@ to elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: dbg_cmd_write
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: dbg_idata
                                HdlValueInt: 10
                HdlOp: NEG_LOG
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: dbg_idata
                                HdlValueInt: 8
        HdlStmAssign
            HdlValueInt: 1
            HdlValueId: cmd_halt
    INS HdlStmBlock@@SEQ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: cmd_halt
        INS HdlOp@@NEG_LOG to ops
        UPD HdlOp@@NEG_LOG to NEG_LOG
            INS list@@ops to NEG_LOG

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@cmd_clear_pf_cache to cmd_clear_cache

UPD HdlStmIf@@body to 

MOV HdlStmIf@@body to 
HdlStmIf: body
    HdlValueId: i_reset
    HdlStmAssign: if_true
        HdlValueId: START_HALTED
        HdlValueId: cmd_halt
    list: elifs
        tuple
            HdlValueId: cmd_reset
            HdlStmAssign
                HdlValueId: START_HALTED
                HdlValueId: cmd_halt
        tuple
            HdlValueId: dbg_cmd_write
            HdlStmAssign
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: dbg_idata
                                HdlValueInt: 10
                        HdlOp: NEG_LOG
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: dbg_idata
                                        HdlValueInt: 8
                HdlValueId: cmd_halt
        tuple
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: cmd_step
                    HdlValueId: cpu_break
            HdlStmAssign
                HdlValueInt: 1
                HdlValueId: cmd_halt

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlOp: AND_LOG
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_idata
                    HdlValueInt: 10
            HdlOp: NEG_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_idata
                            HdlValueInt: 8
    HdlValueId: cmd_halt


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -226,7 +242,7 @@ module	zipbones(i_clk, i_reset,
 			.OPT_LGDCACHE(LGDCACHE),
 			.WITH_LOCAL_BUS(0))
 		thecpu(i_clk, cpu_reset, i_ext_int,
-			cpu_halt, cmd_clear_pf_cache, cmd_addr[4:0], cpu_dbg_we,
+			cpu_halt, cmd_clear_cache, cmd_addr[4:0], cpu_dbg_we,
 				dbg_idata, cpu_dbg_stall, cpu_dbg_data,
 				cpu_dbg_cc, cpu_break,
 			o_wb_cyc, o_wb_stb,

ParseResult:
INS HdlStmIf@@body to 

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS list@@elifs to body
    INS tuple@@ to elifs
    tuple
        HdlValueId: cpu_break
        HdlStmAssign
            HdlValueInt: 1
            HdlValueId: cmd_halt
    INS tuple@@ to elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: dbg_cmd_write
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: dbg_idata
                                HdlValueInt: 10
                HdlOp: NEG_LOG
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: dbg_idata
                                HdlValueInt: 8
        HdlStmAssign
            HdlValueInt: 1
            HdlValueId: cmd_halt
    INS HdlStmBlock@@SEQ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: cmd_halt
        INS HdlOp@@NEG_LOG to ops
        UPD HdlOp@@NEG_LOG to NEG_LOG
            INS list@@ops to NEG_LOG

UPD HdlStmAssign@@body to body
    UPD HdlValueId@@cmd_clear_pf_cache to cmd_clear_cache
    MOV HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: dbg_cmd_write
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_idata
                    HdlValueInt: 11
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@dbg_cmd_write to ops
        HdlValueId: dbg_cmd_write

UPD HdlStmAssign@@body to body
    MOV HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: dbg_cmd_write
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_idata
                    HdlValueInt: 8
    MOV HdlValueId@@cmd_step to body
    HdlValueId: cmd_step

DEL HdlStmAssign@@body from 


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -239,20 +255,26 @@ module	zipbones(i_clk, i_reset,
 			, o_cpu_debug
 `endif
 			);
+	// }}}
 
 	// Return debug response values
+	// {{{
 	assign	dbg_odata = (!dbg_addr)?cmd_data :cpu_dbg_data;
 	initial dbg_ack = 1'b0;
 	always @(posedge i_clk)
 		dbg_ack <= (dbg_stb)&&(!o_dbg_stall);
+
 	assign	dbg_stall= (cpu_dbg_stall)&&(dbg_addr);
+	// }}}
 
 	assign	o_ext_int = (cmd_halt) && (!i_wb_stall);
 
 	// Make Verilator happy
+	// {{{
 	// verilator lint_off UNUSED
-	wire	[4:0] unused;
-	assign	unused = { dbg_cyc, cpu_lcl_stb, cpu_op_stall, cpu_pf_stall, cpu_i_count };
+	wire	unused;
+	assign	unused = &{ 1'b0, dbg_cyc, cpu_lcl_stb, cpu_op_stall,
+			cpu_pf_stall, cpu_i_count, i_dbg_sel };
 	// verilator lint_on  UNUSED
-
+	// }}}
 endmodule
ParseResult:
MOV HdlIdDef@@cmd_data to objs
HdlIdDef: cmd_data
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS list@@elifs to body
    INS tuple@@ to elifs
    tuple
        HdlValueId: cpu_break
        HdlStmAssign
            HdlValueInt: 1
            HdlValueId: cmd_halt
    INS tuple@@ to elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: dbg_cmd_write
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: dbg_idata
                                HdlValueInt: 10
                HdlOp: NEG_LOG
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: dbg_idata
                                HdlValueInt: 8
        HdlStmAssign
            HdlValueInt: 1
            HdlValueId: cmd_halt
    INS HdlStmBlock@@SEQ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: cmd_halt
        INS HdlOp@@NEG_LOG to ops
        UPD HdlOp@@NEG_LOG to NEG_LOG
            INS list@@ops to NEG_LOG

UPD HdlStmAssign@@body to body
    INS HdlOp@@AND_LOG to body
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_idata
                HdlValueInt: 10
        UPD HdlOp@@AND_LOG to AND_LOG
            INS HdlOp@@AND_LOG to ops
            UPD HdlOp@@AND_LOG to AND_LOG
                INS list@@ops to AND_LOG
                INS HdlValueId@@cmd_halt to ops

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS tuple@@ to elifs
    INS tuple@@ to elifs
    tuple
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: cpu_dbg_stall
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: cmd_step

INS HdlStmAssign@@ to 

UPD HdlStmAssign@@ to 
    INS HdlValueInt@@1 to 


CommitId: d6c7cd3395aa9c723c6256610b1110b56a3628df
WSTRB alignment fix in AXIOPS and AXIPIPE
--- a/rtl/core/axipipe.v
+++ b/rtl/core/axipipe.v
@@ -282,8 +282,16 @@ module	axipipe #(
 			axi_size <= AXILSB[2:0];
 		else begin
 			casez(i_op[2:1])
-			2'b0?: axi_size <= 3'b010;
-			2'b10: axi_size <= 3'b001;
+			2'b0?: begin
+				axi_size <= 3'b010;
+				if ((|i_addr[1:0]) && !w_misaligned)
+					axi_size <= AXILSB[2:0];
+				end
+			2'b10: begin
+				axi_size <= 3'b001;
+				if (i_addr[0] && !w_misaligned)
+					axi_size <= AXILSB[2:0];
+				end
 			2'b11: axi_size <= 3'b000;
 			// default: begin end
 			endcase

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: S_AXI_ACLK

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    MOV HdlOp@@NEG_LOG to body
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: S_AXI_ARESETN
    DEL HdlValueId@@i_stb from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmIf@@body to body
    INS list@@elifs to body
    INS tuple@@ to elifs
    INS HdlValueId@@i_stb to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS HdlValueId@@SWAP_WSTRB to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlOp: INDEX
        list: ops
            HdlValueId: AXILSB
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlValueId: axi_size

INS HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  to body

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    INS HdlStmCaseType@@CASEZ to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    INS list@@cases to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    INS tuple@@ to cases
    INS tuple@@ to cases
    INS HdlValueInt@@0? to 
    INS HdlStmBlock@@SEQ to 
    INS HdlValueInt@@10 to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    MOV HdlOp@@INDEX to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    HdlOp: INDEX
        list: ops
            HdlValueId: i_op
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 1
    MOV tuple@@ to cases
    tuple
        HdlValueInt: 11
        HdlStmAssign
            HdlValueInt: 000
            HdlValueId: axi_size
    DEL HdlStmCaseType@@CASEZ from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    DEL HdlValueInt@@0? from 
    DEL tuple@@ from cases
    DEL HdlValueInt@@10 from 
    DEL tuple@@ from cases
    DEL list@@cases from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlValueInt: 010
    HdlValueId: axi_size

INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlOp: OR_UNARY
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 1
                                    HdlValueInt: 0
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: w_misaligned
    HdlStmAssign: if_true
        HdlOp: INDEX
            list: ops
                HdlValueId: AXILSB
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 2
                        HdlValueInt: 0
        HdlValueId: axi_size
    list: elifs

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlValueInt: 001
    HdlValueId: axi_size

INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlValueInt: 0
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: w_misaligned
    HdlStmAssign: if_true
        HdlOp: INDEX
            list: ops
                HdlValueId: AXILSB
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 2
                        HdlValueInt: 0
        HdlValueId: axi_size
    list: elifs

UPD HdlStmIf@@ to 
    DEL HdlValueId@@SWAP_WSTRB from 
    DEL list@@elifs from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

DEL HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  from body

DEL HdlStmIf@@ from body

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs


CommitId: 136697cb2922a1f0b42d0071064a18c8ab4df451
FIX: Named generate blocks
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -474,12 +474,20 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 	//
 	generate
 		if (4+LGHCTX-1>4)
+		begin : PTABLE_REG_LIL
 			assign	w_ptable_reg[(4+LGHCTX-1):4] =  {
 				tlb_cdata[wr_tlb_addr][(LGCTXT-1):LGLCTX] };
+		end
+
 		if (LGPGSZB > LGLCTX+4)
+		begin : VTABLE_REG
 			assign	w_vtable_reg[(LGPGSZB-1):(LGLCTX+4)] = 0;
+		end
+
 		if (LGPGSZB > LGHCTX+4)
+		begin : PTABLE_REG
 			assign	w_ptable_reg[(LGPGSZB-1):(LGHCTX+4)] = 0;
+		end
 	endgenerate
 
 	//

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlOp: INDEX
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: tlb_cdata
                    HdlValueId: wr_tlb_addr
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: LGCTXT
                            HdlValueInt: 1
                    HdlValueId: LGLCTX
    HdlOp: INDEX
        list: ops
            HdlValueId: w_ptable_reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: ADD
                                list: ops
                                    HdlValueInt: 4
                                    HdlValueId: LGHCTX
                            HdlValueInt: 1
                    HdlValueInt: 4

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: w_vtable_reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: LGPGSZB
                            HdlValueInt: 1
                    HdlOp: ADD
                        list: ops
                            HdlValueId: LGLCTX
                            HdlValueInt: 4

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: w_ptable_reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: LGPGSZB
                            HdlValueInt: 1
                    HdlOp: ADD
                        list: ops
                            HdlValueId: LGHCTX
                            HdlValueInt: 4


CommitId: 73c6fae1aac6cf941fb44b6612f2a66038917b22
BUF FIX: assert/else/asserts replaced
--- a/rtl/core/axilfetch.v
+++ b/rtl/core/axilfetch.v
@@ -93,7 +93,7 @@ module	axilfetch #(
 	reg	[W:0]			new_flushcount, outstanding,
 					next_outstanding, flushcount;
 	reg				flushing, flush_request, full_bus;
-	reg	[((AXILLSB>INSN_LSB) ? (AXILLSB-INSN_LSB-1):0):0]	shift;
+	wire	[((AXILLSB>INSN_LSB) ? (AXILLSB-INSN_LSB-1):0):0]	shift;
 	wire				fifo_reset, fifo_wr, fifo_rd;
 	wire				ign_fifo_full, fifo_empty;
 	wire	[LGFIFO:0]		ign_fifo_fill;

ParseResult:
UPD HdlIdDef@@shift to shift
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@reg to wire


CommitId: 73c6fae1aac6cf941fb44b6612f2a66038917b22
BUF FIX: assert/else/asserts replaced
--- a/rtl/core/axilfetch.v
+++ b/rtl/core/axilfetch.v
@@ -281,13 +281,11 @@ module	axilfetch #(
 	generate if (AXILLSB > INSN_LSB)
 	begin : BIG_WORD
 		// {{{
-		always @(*)
-			shift = o_pc[AXILLSB-1:INSN_LSB];
+		assign	shift = o_pc[AXILLSB-1:INSN_LSB];
 		// }}}
 	end else begin : NO_SHIFT
 		// {{{
-		always @(*)
-			shift = 0;
+		assign	shift = 0;
 		// }}}
 	end endgenerate
 

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD list@@ops to body
        MOV list@@ops to ASSIGN
        list: ops
            HdlValueId: shift
            HdlOp: INDEX
                list: ops
                    HdlValueId: o_pc
                    HdlOp: DOWNTO
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: AXILLSB
                                    HdlValueInt: 1
                            HdlValueId: INSN_LSB
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: o_pc
                HdlOp: DOWNTO
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlValueId: AXILLSB
                                HdlValueInt: 1
                        HdlValueId: INSN_LSB
        DEL HdlValueId@@shift from ops
    DEL list@@sensitivity from 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 

INS HdlStmAssign@@ to body

INS HdlStmAssign@@ to body

UPD HdlStmAssign@@ to 
    INS HdlValueId@@shift to 

UPD HdlStmAssign@@ to 
    INS HdlValueInt@@0 to 

UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        MOV HdlValueId@@shift to ops
        HdlValueId: shift
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from ASSIGN
    DEL list@@sensitivity from 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 

DEL HdlStmProcess@@ from body

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ

DEL HdlStmProcess@@ from body


CommitId: 73c6fae1aac6cf941fb44b6612f2a66038917b22
BUF FIX: assert/else/asserts replaced
--- a/rtl/core/axilfetch.v
+++ b/rtl/core/axilfetch.v
@@ -409,10 +407,10 @@ module	axilfetch #(
 		if (fifo_empty)
 			out_fill <= 0;
 		else if (o_valid)
-			out_fill <= INSNS_PER_WORD;
+			out_fill <= INSNS_PER_WORD[FILLBITS:0];
 		else
 			// Verilator lint_off WIDTH
-			out_fill <= (INSNS_PER_WORD - shift);
+			out_fill <= (INSNS_PER_WORD[FILLBITS:0] - shift);
 			// Verilator lint_on  WIDTH
 	end else if (i_ready && out_fill > 0)
 		out_fill <= out_fill - 1;
ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: S_AXI_ACLK

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlValueId@@fifo_reset to body
    INS list@@elifs to body
    INS tuple@@ to elifs
    INS HdlValueId@@fifo_rd to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@body to body
    MOV tuple@@ to elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlValueId: i_ready
                HdlOp: GT
                    list: ops
                        HdlValueId: out_fill
                        HdlValueInt: 0
        HdlStmAssign
            HdlOp: SUB
                list: ops
                    HdlValueId: out_fill
                    HdlValueInt: 1
            HdlValueId: out_fill
    DEL HdlValueId@@fifo_reset from body
    DEL HdlValueId@@fifo_rd from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL tuple@@ from elifs
    DEL list@@elifs from body

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS HdlValueId@@fifo_empty to 
    INS list@@elifs to 
    list: elifs
        tuple
            HdlValueId: o_valid
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: INSNS_PER_WORD
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueId: FILLBITS
                                HdlValueInt: 0
                HdlValueId: out_fill

INS HdlStmAssign@@if_false to 
HdlStmAssign: if_false
    HdlOp: SUB
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: INSNS_PER_WORD
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueId: FILLBITS
                            HdlValueInt: 0
            HdlValueId: shift
    HdlValueId: out_fill

UPD HdlStmIf@@ to 
    DEL HdlValueId@@fifo_empty from 
    DEL list@@elifs from 
    list: elifs
        tuple
            HdlValueId: o_valid
            HdlStmAssign
                HdlValueId: INSNS_PER_WORD
                HdlValueId: out_fill

DEL HdlStmAssign@@if_false from 
HdlStmAssign: if_false
    HdlOp: SUB
        list: ops
            HdlValueId: INSNS_PER_WORD
            HdlValueId: shift
    HdlValueId: out_fill

DEL HdlStmIf@@ from body

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs


CommitId: e4e59aea0232dd94c748ba091cf9f0c809f17015
Fixed broken sby file, now proves nopipe CPU
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -458,6 +458,8 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	initial	o_dcdR = 0;
 	initial	o_dcdA = 0;
 	initial	o_dcdB = 0;
+	initial	o_DV   = 0;
+	initial	o_FP   = 0;
 	always @(posedge i_clk)
 		if (i_ce)
 		begin

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: o_DV
                    HdlValueInt: 0
            HdlStmWait:
                list: val

INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: o_FP
                    HdlValueInt: 0
            HdlStmWait:
                list: val


CommitId: e4e59aea0232dd94c748ba091cf9f0c809f17015
Fixed broken sby file, now proves nopipe CPU
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -500,7 +502,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 			// or flags, which should already be true.
 			o_ALU  <=  (w_ALU)||(w_ldi)||(w_cmptst)||(w_noop);
 			o_M    <=  w_mem;
-			o_DV   <=  w_div;
+			o_DV   <=  (OPT_DIVIDE)&&(w_div);
 			o_FP   <=  (OPT_FPU)&&(w_fpu);
 
 			o_break <= w_break;
ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@OPT_DIVIDE to ops

UPD HdlStmAssign@@ to 
    MOV HdlValueId@@w_div to 
    HdlValueId: w_div


CommitId: b3bee662b54a54d5b9ff27379e52d79b1e7f0a88
Fixed interrupt/op_phase hanging bug in zipcpu.v, update cpyright yr
--- a/bench/formal/abs_div.v
+++ b/bench/formal/abs_div.v
@@ -118,8 +118,10 @@ module	abs_div(i_clk, i_reset, i_wr, i_signed, i_numerator, i_denominator,
 	(* anyseq *)	reg	[(BW-1):0]	any_quotient;
 	(* anyseq *)	reg	[5:0]		wait_time;
 
-	assign o_err      = any_err;
-	assign o_quotient = any_quotient;
+	always @(*)
+		o_err      = any_err;
+	always @(*)
+		o_quotient = any_quotient;
 
 	reg	[5:0]	r_busy_counter;
 
ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlAll
    INS HdlOp@@ASSIGN to 
    UPD HdlOp@@ASSIGN to ASSIGN
        INS list@@ops to ASSIGN

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlAll
    INS HdlOp@@ASSIGN to 
    UPD HdlOp@@ASSIGN to ASSIGN
        INS list@@ops to ASSIGN

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@any_err to o_err
    MOV HdlValueId@@any_err to 
    HdlValueId: any_err
    UPD HdlValueId@@o_err to any_err
    MOV HdlValueId@@o_err to 
    HdlValueId: o_err

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@any_quotient to o_quotient
    MOV HdlValueId@@any_quotient to 
    HdlValueId: any_quotient
    UPD HdlValueId@@o_quotient to any_quotient
    MOV HdlValueId@@o_quotient to 
    HdlValueId: o_quotient

DEL HdlStmAssign@@ from objs

DEL HdlStmAssign@@ from objs


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -131,7 +131,7 @@ module	zipcore #(
 	// Verilator lint_off UNUSED
 	localparam	[0:0]	OPT_MEMPIPE = OPT_PIPELINED_BUS_ACCESS;
 	localparam [(AW-1):0]	RESET_BUS_ADDRESS = RESET_ADDRESS[(AW+1):2];
-	localparam	[0:0]	OPT_LOCK=(IMPLEMENT_LOCK)&&(OPT_PIPELINED);
+	localparam	[0:0]	OPT_LOCK= IMPLEMENT_LOCK;
 	localparam	[3:0]	CPU_CC_REG = 4'he,
 				CPU_PC_REG = 4'hf;
 	localparam	[3:0]	CPU_SUB_OP = 4'h0,// also a compare instruction

ParseResult:
UPD HdlIdDef@@OPT_LOCK to OPT_LOCK
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@IMPLEMENT_LOCK to ops
        HdlValueId: IMPLEMENT_LOCK
        DEL HdlValueId@@OPT_PIPELINED from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from OPT_LOCK


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -581,7 +581,7 @@ module	zipcore #(
 	// {{{
 	assign	master_stall = (!master_ce)||(!op_valid)||(ill_err_i)
 			||(ibus_err_flag)||(idiv_err_flag)
-			||(pending_interrupt)&&(!alu_phase)
+			||(pending_interrupt && !o_bus_lock)&&(!alu_phase)
 			||(alu_busy)||(div_busy)||(fpu_busy)||(op_break)
 			||((OPT_PIPELINED)&&(
 				prelock_stall

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    UPD HdlOp@@OR_LOG to OR_LOG
                        UPD HdlOp@@OR_LOG to OR_LOG
                            UPD HdlOp@@AND_LOG to AND_LOG
                                INS HdlOp@@AND_LOG to ops
                                UPD HdlOp@@AND_LOG to AND_LOG
                                    INS list@@ops to AND_LOG
                                    INS HdlOp@@NEG_LOG to ops
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: o_bus_lock

UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    UPD HdlOp@@OR_LOG to OR_LOG
                        UPD HdlOp@@OR_LOG to OR_LOG
                            UPD HdlOp@@AND_LOG to AND_LOG
                                MOV HdlValueId@@pending_interrupt to ops
                                HdlValueId: pending_interrupt


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1718,7 +1718,7 @@ module	zipcore #(
 	// Bus lock logic
 	// {{{
 	generate
-	if ((OPT_PIPELINED)&&(!OPT_LOCK))
+	if (OPT_LOCK)
 	begin : BUSLOCK
 		reg		r_prelock_stall;
 		reg		r_prelock_primed;

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            MOV HdlValueId@@OPT_LOCK to ops
            HdlValueId: OPT_LOCK
            DEL list@@ops from NEG_LOG
        DEL HdlValueId@@OPT_PIPELINED from ops
        DEL HdlOp@@NEG_LOG from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 

UPD HdlStmIf@@ to 
    INS HdlOp@@NE to 
    UPD HdlOp@@NE to NE
        INS list@@ops to NE
        INS HdlValueInt@@00 to ops
    INS tuple@@ to elifs
    tuple
        HdlValueId: r_prelock_primed
        HdlStmAssign
            HdlValueInt: 10
            HdlValueId: r_bus_lock
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlOp: SUB
        list: ops
            HdlValueId: r_bus_lock
            HdlValueInt: 1
    HdlValueId: r_bus_lock

UPD HdlStmIf@@ to 
    UPD HdlValueId@@r_prelock_primed to r_bus_lock
    MOV HdlValueId@@r_prelock_primed to 
    HdlValueId: r_prelock_primed
    UPD HdlOp@@NE to NEG_LOG
    UPD HdlOp@@NE to NE
        UPD HdlValueId@@r_bus_lock to OPT_PIPELINED
        DEL HdlValueInt@@0 from ops

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    INS list@@elifs to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@op_ce to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS HdlValueId@@op_valid to ops

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueInt: 10
    HdlValueId: r_bus_lock

UPD HdlStmAssign@@ to 
    UPD HdlOp@@ADD to AND_LOG
    MOV HdlOp@@ADD to 
    HdlOp: ADD
        list: ops
            HdlValueId: r_bus_lock
            HdlValueInt: 11
    UPD HdlOp@@ADD to ADD
        UPD HdlValueId@@r_bus_lock to op_lock
        DEL HdlValueInt@@11 from ops
    DEL HdlValueId@@r_bus_lock from 

DEL HdlStmAssign@@ from 


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1729,7 +1729,7 @@ module	zipcore #(
 		// {{{
 		initial	r_prelock_stall = 1'b0;
 		always @(posedge i_clk)
-		if (clear_pipeline)
+		if (!OPT_PIPELINED || clear_pipeline)
 			r_prelock_stall <= 1'b0;
 		else if ((op_valid)&&(op_lock)&&(op_ce))
 			r_prelock_stall <= 1'b1;

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            MOV HdlValueId@@OPT_LOCK to ops
            HdlValueId: OPT_LOCK
            DEL list@@ops from NEG_LOG
        DEL HdlValueId@@OPT_PIPELINED from ops
        DEL HdlOp@@NEG_LOG from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@OPT_PIPELINED to ops


CommitId: d511239e19be8fcc7f340a64554ea93699637e62
Updated pipemem with formal differences
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -109,16 +109,24 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 	always @(posedge i_clk)
 		fifo_oreg[wraddr] <= { i_oreg, i_op[2:1], i_addr[1:0] };
 
+	initial	wraddr = 0;
 	always @(posedge i_clk)
-		if ((i_reset)||((i_wb_err)&&(cyc))||((i_pipe_stb)&&(misaligned)))
+	if (i_reset)
+		wraddr <= 0;
+	else if (((i_wb_err)&&(cyc))||((i_pipe_stb)&&(misaligned)))
 			wraddr <= 0;
-		else if (i_pipe_stb)
-			wraddr <= wraddr + 1'b1;
+	else if (i_pipe_stb)
+		wraddr <= wraddr + 1'b1;
+
+	initial	rdaddr = 0;
 	always @(posedge i_clk)
-		if ((i_reset)||((i_wb_err)&&(cyc))||((i_pipe_stb)&&(misaligned)))
-			rdaddr <= 0;
-		else if ((i_wb_ack)&&(cyc))
-			rdaddr <= rdaddr + 1'b1;
+	if (i_reset)
+		rdaddr <= 0;
+	else if (((i_wb_err)&&(cyc))||((i_pipe_stb)&&(misaligned)))
+		rdaddr <= 0;
+	else if ((i_wb_ack)&&(cyc))
+		rdaddr <= rdaddr + 1'b1;
+
 	assign	nxt_rdaddr = rdaddr + 1'b1;
 
 	wire	gbl_stb, lcl_stb, lcl_bus;

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: wraddr
                    HdlValueInt: 0
            HdlStmWait:
                list: val

INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: rdaddr
                    HdlValueInt: 0
            HdlStmWait:
                list: val

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS tuple@@ to elifs

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS tuple@@ to elifs

UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: i_reset
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: i_wb_err
                        HdlValueId: cyc
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: i_pipe_stb
                HdlValueId: misaligned
        DEL list@@ops from OR_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            DEL HdlValueId@@i_reset from ops
    DEL HdlOp@@OR_LOG from body

INS HdlStmAssign@@ to 
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: wraddr

UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: i_reset
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: i_wb_err
                        HdlValueId: cyc
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: i_pipe_stb
                HdlValueId: misaligned
        DEL list@@ops from OR_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            DEL HdlValueId@@i_reset from ops
    DEL HdlOp@@OR_LOG from body

INS HdlStmAssign@@ to 
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: rdaddr


CommitId: d511239e19be8fcc7f340a64554ea93699637e62
Updated pipemem with formal differences
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -147,15 +155,9 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 			begin
 				o_wb_stb_gbl <= 1'b0;
 				o_wb_stb_lcl <= 1'b0;
-			// end else if ((i_pipe_stb)&&(!i_wb_stall))
-			// begin
-				// o_wb_addr <= i_addr[(AW-1):0];
-				// o_wb_data <= i_data;
 			end
 
 			if (((i_wb_ack)&&(nxt_rdaddr == wraddr)
-					&&(!o_wb_stb_gbl)
-					&&(!o_wb_stb_lcl)
 					&&((!i_pipe_stb)||(misaligned)))
 				||(i_wb_err))
 			begin

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to OR_LOG
            MOV HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_wb_ack
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: nxt_rdaddr
                                            HdlValueId: wraddr
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: o_wb_stb_gbl
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: o_wb_stb_lcl
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@NEG_LOG to NEG_LOG
                    UPD HdlValueId@@o_wb_stb_lcl to i_wb_err
                    MOV HdlValueId@@o_wb_stb_lcl to ops
                    HdlValueId: o_wb_stb_lcl
                    DEL list@@ops from NEG_LOG
                UPD HdlOp@@AND_LOG to AND_LOG
                    DEL HdlOp@@NEG_LOG from ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: o_wb_stb_gbl
                DEL HdlOp@@NEG_LOG from ops
            MOV HdlOp@@OR_LOG to ops
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: i_pipe_stb
                    HdlValueId: misaligned
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL HdlValueId@@i_wb_err from ops
        DEL list@@ops from OR_LOG
    DEL HdlOp@@OR_LOG from 


CommitId: d511239e19be8fcc7f340a64554ea93699637e62
Updated pipemem with formal differences
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -217,9 +217,16 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 
 	initial	o_valid = 1'b0;
 	always @(posedge i_clk)
+	if (i_reset)
+		o_valid <= 1'b0;
+	else
 		o_valid <= (cyc)&&(i_wb_ack)&&(!o_wb_we);
+
 	initial	o_err = 1'b0;
 	always @(posedge i_clk)
+	if (i_reset)
+		o_err <= 1'b0;
+	else
 		o_err <= ((cyc)&&(i_wb_err))||((i_pipe_stb)&&(misaligned));
 	assign	o_busy = cyc;
 

ParseResult:
INS HdlStmIf@@body to 

INS HdlStmIf@@body to 

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: o_valid

UPD HdlStmAssign@@body to if_false

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: cyc
                    HdlValueId: i_wb_ack
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_wb_we
    HdlValueId: o_valid

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: o_err

UPD HdlStmAssign@@body to if_false

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: OR_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: cyc
                    HdlValueId: i_wb_err
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: i_pipe_stb
                    HdlValueId: misaligned
    HdlValueId: o_err


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -225,7 +225,7 @@ module	axiops #(
 	reg				axlock;
 	reg	[AXILSB-1:0]		swapaddr;
 	wire	[DW-1:0]		endian_swapped_rdata;
-	reg	[2*DW-1:0]		pre_result;
+	reg	[2*DW-1:0]		pre_result, wide_return;
 
 	// }}}
 

ParseResult:
INS HdlIdDef@@wide_return to objs
HdlIdDef: wide_return
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: MUL
                                list: ops
                                    HdlValueInt: 2
                                    HdlValueId: DW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -370,11 +370,16 @@ module	axiops #(
 			M_AXI_AWADDR <= 0;
 
 		if (SWAP_ENDIANNESS || SWAP_WSTRB)
+		begin
 			// When adjusting endianness, reads (or writes) are
 			// always full words.  This is important since the
 			// the bytes at issues may (or may not) be in their
 			// expected locations
-			M_AXI_AWADDR[AXILSB-1:0] <= 0;
+			if (OPT_ALIGNMENT_ERR)
+				M_AXI_AWADDR[AXILSB-1:0] <= 0;
+			else
+				M_AXI_AWADDR[1:0] <= 0;
+		end
 		// }}}
 	end else if ((M_AXI_AWVALID && M_AXI_AWREADY)
 			||(M_AXI_ARVALID && M_AXI_ARREADY))

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_ALIGNMENT_ERR to 

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: M_AXI_AWADDR
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AXILSB
                            HdlValueInt: 1
                    HdlValueInt: 0

UPD HdlStmIf@@ to 
    MOV list@@elifs to 
    list: elifs

INS HdlStmAssign@@if_false to 
HdlStmAssign: if_false
    HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: M_AXI_AWADDR
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -420,7 +425,7 @@ module	axiops #(
 		endcase
 
 		if (SWAP_WSTRB)
-			axsize <= DSZ;
+			axsize <= (OPT_ALIGNMENT_ERR) ? DSZ : AXILSB[2:0];
 	end
 
 	assign	M_AXI_AWSIZE = axsize;

ParseResult:
UPD HdlStmAssign@@if_true to if_true
    MOV HdlValueId@@DSZ to if_true
    HdlValueId: DSZ


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -864,35 +869,40 @@ module	axiops #(
 		if (SWAP_WSTRB)
 		begin
 			if (misaligned_read && !OPT_ALIGNMENT_ERR)
-				pre_result={ last_result, endian_swapped_rdata }
+				wide_return={ last_result, endian_swapped_rdata }
 						<< (8*r_op[AXILSB-1:0]);
 			else
-				pre_result = { endian_swapped_rdata, {(DW){1'b0}} }
+				wide_return = { endian_swapped_rdata, {(DW){1'b0}} }
 						<< (8*r_op[AXILSB-1:0]);
 
-			casez(r_op[AXILSB +: 2])
-			2'b10: pre_result = { 16'h0,
-					pre_result[(2*DW)-1:(2*DW)-16],
-					{(DW){1'b0}} };
-			2'b11: pre_result = { 24'h0,
-					pre_result[(2*DW)-1:(2*DW)-8],
-					{(DW){1'b0}} };
-			default: begin end
-			endcase
-
-			pre_result[31:0] = pre_result[(2*DW-1):(2*DW-32)];
-
 		end else begin
 			if (misaligned_read && !OPT_ALIGNMENT_ERR)
-				pre_result={ endian_swapped_rdata, last_result }
+				wide_return={ endian_swapped_rdata, last_result }
 						>> (8*r_op[AXILSB-1:0]);
 			else
-				pre_result = { {(DW){1'b0}}, endian_swapped_rdata }
+				wide_return = { {(DW){1'b0}}, endian_swapped_rdata }
 						>> (8*r_op[AXILSB-1:0]);
 		end
 
 		if (OPT_LOWPOWER && (!M_AXI_RVALID || M_AXI_RRESP[1]))
-			pre_result = 0;
+			wide_return = 0;
+	end
+
+	always @(*)
+	begin
+		if (SWAP_WSTRB)
+		begin
+
+			casez(r_op[AXILSB +: 2])
+			2'b10: pre_result = { {(DW){1'b0}}, 16'h0,
+					wide_return[(2*DW)-1:(2*DW)-16] };
+			2'b11: pre_result = { {(DW){1'b0}}, 24'h0,
+					wide_return[(2*DW)-1:(2*DW)-8] };
+			default: pre_result[31:0] = wide_return[(2*DW-1):(2*DW-32)];
+			endcase
+
+		end else
+			pre_result = wide_return;
 	end
 
 	// }}}

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlAll
    INS HdlStmBlock@@SEQ to 

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        MOV list@@body to SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: misaligned_read
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_ALIGNMENT_ERR
                HdlOp: ASSIGN
                    list: ops
                        HdlValueId: pre_result
                        HdlOp: SLL
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: last_result
                                        HdlValueId: endian_swapped_rdata
                                HdlOp: MUL
                                    list: ops
                                        HdlValueInt: 8
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: r_op
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlValueId: AXILSB
                                                                HdlValueInt: 1
                                                        HdlValueInt: 0
                list: elifs
                HdlOp: ASSIGN
                    list: ops
                        HdlValueId: pre_result
                        HdlOp: SLL
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: endian_swapped_rdata
                                        HdlOp: REPL_CONCAT
                                            list: ops
                                                HdlValueId: DW
                                                HdlValueInt: 0
                                HdlOp: MUL
                                    list: ops
                                        HdlValueInt: 8
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: r_op
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlValueId: AXILSB
                                                                HdlValueInt: 1
                                                        HdlValueInt: 0
            HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
                HdlStmCaseType: CASEZ
                HdlOp: INDEX
                    list: ops
                        HdlValueId: r_op
                        HdlOp: PART_SELECT_POST
                            list: ops
                                HdlValueId: AXILSB
                                HdlValueInt: 2
                list: cases
                    tuple
                        HdlValueInt: 10
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: pre_result
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: pre_result
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlOp: MUL
                                                                            list: ops
                                                                                HdlValueInt: 2
                                                                                HdlValueId: DW
                                                                        HdlValueInt: 1
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlOp: MUL
                                                                            list: ops
                                                                                HdlValueInt: 2
                                                                                HdlValueId: DW
                                                                        HdlValueInt: 16
                                        HdlOp: REPL_CONCAT
                                            list: ops
                                                HdlValueId: DW
                                                HdlValueInt: 0
                    tuple
                        HdlValueInt: 11
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: pre_result
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: pre_result
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlOp: MUL
                                                                            list: ops
                                                                                HdlValueInt: 2
                                                                                HdlValueId: DW
                                                                        HdlValueInt: 1
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlOp: MUL
                                                                            list: ops
                                                                                HdlValueInt: 2
                                                                                HdlValueId: DW
                                                                        HdlValueInt: 8
                                        HdlOp: REPL_CONCAT
                                            list: ops
                                                HdlValueId: DW
                                                HdlValueInt: 0
                HdlStmBlock: SEQ
                    list: body
            HdlOp: ASSIGN
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: pre_result
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 31
                                    HdlValueInt: 0
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: pre_result
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlOp: MUL
                                                list: ops
                                                    HdlValueInt: 2
                                                    HdlValueId: DW
                                            HdlValueInt: 1
                                    HdlOp: SUB
                                        list: ops
                                            HdlOp: MUL
                                                list: ops
                                                    HdlValueInt: 2
                                                    HdlValueId: DW
                                            HdlValueInt: 32
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: pre_result
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlOp: INDEX
                    list: ops
                        HdlValueId: pre_result
                        HdlOp: DOWNTO
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueInt: 2
                                                HdlValueId: DW
                                        HdlValueInt: 1
                                HdlOp: SUB
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueInt: 2
                                                HdlValueId: DW
                                        HdlValueInt: 32
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@pre_result to wide_return
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: misaligned_read
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_ALIGNMENT_ERR
                HdlOp: ASSIGN
                    list: ops
                        HdlValueId: pre_result
                        HdlOp: SLL
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: last_result
                                        HdlValueId: endian_swapped_rdata
                                HdlOp: MUL
                                    list: ops
                                        HdlValueInt: 8
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: r_op
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlValueId: AXILSB
                                                                HdlValueInt: 1
                                                        HdlValueInt: 0
                list: elifs
                HdlOp: ASSIGN
                    list: ops
                        HdlValueId: pre_result
                        HdlOp: SLL
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: endian_swapped_rdata
                                        HdlOp: REPL_CONCAT
                                            list: ops
                                                HdlValueId: DW
                                                HdlValueInt: 0
                                HdlOp: MUL
                                    list: ops
                                        HdlValueInt: 8
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: r_op
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlValueId: AXILSB
                                                                HdlValueInt: 1
                                                        HdlValueInt: 0
            HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
                HdlStmCaseType: CASEZ
                HdlOp: INDEX
                    list: ops
                        HdlValueId: r_op
                        HdlOp: PART_SELECT_POST
                            list: ops
                                HdlValueId: AXILSB
                                HdlValueInt: 2
                list: cases
                    tuple
                        HdlValueInt: 10
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: pre_result
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: pre_result
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlOp: MUL
                                                                            list: ops
                                                                                HdlValueInt: 2
                                                                                HdlValueId: DW
                                                                        HdlValueInt: 1
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlOp: MUL
                                                                            list: ops
                                                                                HdlValueInt: 2
                                                                                HdlValueId: DW
                                                                        HdlValueInt: 16
                                        HdlOp: REPL_CONCAT
                                            list: ops
                                                HdlValueId: DW
                                                HdlValueInt: 0
                    tuple
                        HdlValueInt: 11
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: pre_result
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: pre_result
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlOp: MUL
                                                                            list: ops
                                                                                HdlValueInt: 2
                                                                                HdlValueId: DW
                                                                        HdlValueInt: 1
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlOp: MUL
                                                                            list: ops
                                                                                HdlValueInt: 2
                                                                                HdlValueId: DW
                                                                        HdlValueInt: 8
                                        HdlOp: REPL_CONCAT
                                            list: ops
                                                HdlValueId: DW
                                                HdlValueInt: 0
                HdlStmBlock: SEQ
                    list: body
            HdlOp: ASSIGN
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: pre_result
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 31
                                    HdlValueInt: 0
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: pre_result
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlOp: MUL
                                                list: ops
                                                    HdlValueInt: 2
                                                    HdlValueId: DW
                                            HdlValueInt: 1
                                    HdlOp: SUB
                                        list: ops
                                            HdlOp: MUL
                                                list: ops
                                                    HdlValueInt: 2
                                                    HdlValueId: DW
                                            HdlValueInt: 32

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@ to 
    INS HdlValueId@@SWAP_WSTRB to 
    INS list@@elifs to 
    INS HdlOp@@ASSIGN to 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: pre_result
            HdlValueId: wide_return

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['r_op',          {'__class__': 'HdlOp',           'fn': 'PART_SELECT_POST',           'ops': ['AXILSB',                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '2'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['r_op',          {'__class__': 'HdlOp',           'fn': 'PART_SELECT_POST',           'ops': ['AXILSB',                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '2'}]}]} 
    UPD list@@cases to body
    MOV list@@cases to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['r_op',          {'__class__': 'HdlOp',           'fn': 'PART_SELECT_POST',           'ops': ['AXILSB',                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '2'}]}]} 
    list: cases
        tuple
            HdlValueInt: 10
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: pre_result
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: pre_result
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlOp: MUL
                                                                list: ops
                                                                    HdlValueInt: 2
                                                                    HdlValueId: DW
                                                            HdlValueInt: 1
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlOp: MUL
                                                                list: ops
                                                                    HdlValueInt: 2
                                                                    HdlValueId: DW
                                                            HdlValueInt: 16
                            HdlOp: REPL_CONCAT
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 0
        tuple
            HdlValueInt: 11
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: pre_result
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: pre_result
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlOp: MUL
                                                                list: ops
                                                                    HdlValueInt: 2
                                                                    HdlValueId: DW
                                                            HdlValueInt: 1
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlOp: MUL
                                                                list: ops
                                                                    HdlValueInt: 2
                                                                    HdlValueId: DW
                                                            HdlValueInt: 8
                            HdlOp: REPL_CONCAT
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 0
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD list@@ops to cases
        MOV list@@ops to ASSIGN
        list: ops
            HdlValueId: pre_result
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: pre_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlOp: MUL
                                                        list: ops
                                                            HdlValueInt: 2
                                                            HdlValueId: DW
                                                    HdlValueInt: 1
                                            HdlOp: SUB
                                                list: ops
                                                    HdlOp: MUL
                                                        list: ops
                                                            HdlValueInt: 2
                                                            HdlValueId: DW
                                                    HdlValueInt: 16
                    HdlOp: REPL_CONCAT
                        list: ops
                            HdlValueId: DW
                            HdlValueInt: 0
        UPD HdlOp@@CONCAT to ASSIGN
        MOV HdlOp@@CONCAT to ops
        HdlOp: CONCAT
            list: ops
                HdlOp: CONCAT
                    list: ops
                        HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: pre_result
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlOp: SUB
                                            list: ops
                                                HdlOp: MUL
                                                    list: ops
                                                        HdlValueInt: 2
                                                        HdlValueId: DW
                                                HdlValueInt: 1
                                        HdlOp: SUB
                                            list: ops
                                                HdlOp: MUL
                                                    list: ops
                                                        HdlValueInt: 2
                                                        HdlValueId: DW
                                                HdlValueInt: 16
                HdlOp: REPL_CONCAT
                    list: ops
                        HdlValueId: DW
                        HdlValueInt: 0
        MOV HdlValueId@@pre_result to ops
        HdlValueId: pre_result
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlOp@@CONCAT to CONCAT
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@pre_result to wide_return
                DEL HdlValueInt@@0 from ops
            MOV HdlOp@@REPL_CONCAT to ops
            HdlOp: REPL_CONCAT
                list: ops
                    HdlValueId: DW
                    HdlValueInt: 0
    MOV tuple@@ to cases
    tuple
        HdlValueInt: 10
        HdlOp: ASSIGN
            list: ops
                HdlValueId: pre_result
                HdlOp: CONCAT
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: pre_result
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlOp: MUL
                                                            list: ops
                                                                HdlValueInt: 2
                                                                HdlValueId: DW
                                                        HdlValueInt: 1
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlOp: MUL
                                                            list: ops
                                                                HdlValueInt: 2
                                                                HdlValueId: DW
                                                        HdlValueInt: 16
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueId: DW
                                HdlValueInt: 0
    MOV tuple@@ to cases
    tuple
        HdlValueInt: 11
        HdlOp: ASSIGN
            list: ops
                HdlValueId: pre_result
                HdlOp: CONCAT
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: pre_result
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlOp: MUL
                                                            list: ops
                                                                HdlValueInt: 2
                                                                HdlValueId: DW
                                                        HdlValueInt: 1
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlOp: MUL
                                                            list: ops
                                                                HdlValueInt: 2
                                                                HdlValueId: DW
                                                        HdlValueInt: 8
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueId: DW
                                HdlValueInt: 0
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@CONCAT to ASSIGN
        MOV HdlOp@@CONCAT to ops
        HdlOp: CONCAT
            list: ops
                HdlOp: CONCAT
                    list: ops
                        HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: pre_result
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlOp: SUB
                                            list: ops
                                                HdlOp: MUL
                                                    list: ops
                                                        HdlValueInt: 2
                                                        HdlValueId: DW
                                                HdlValueInt: 1
                                        HdlOp: SUB
                                            list: ops
                                                HdlOp: MUL
                                                    list: ops
                                                        HdlValueInt: 2
                                                        HdlValueId: DW
                                                HdlValueInt: 8
                HdlOp: REPL_CONCAT
                    list: ops
                        HdlValueId: DW
                        HdlValueInt: 0
        MOV HdlValueId@@pre_result to ops
        HdlValueId: pre_result
        UPD HdlOp@@CONCAT to CONCAT
            MOV HdlOp@@REPL_CONCAT to ops
            HdlOp: REPL_CONCAT
                list: ops
                    HdlValueId: DW
                    HdlValueInt: 0
            UPD HdlOp@@CONCAT to CONCAT
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@pre_result to wide_return
                DEL HdlValueInt@@0 from ops
        DEL list@@ops from ASSIGN
    DEL HdlOp@@ASSIGN from 
    DEL HdlOp@@ASSIGN from 
    DEL HdlStmBlock@@SEQ from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['r_op',          {'__class__': 'HdlOp',           'fn': 'PART_SELECT_POST',           'ops': ['AXILSB',                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '2'}]}]} 
    HdlStmBlock: SEQ
        list: body

MOV HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlValueId: misaligned_read
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: OPT_ALIGNMENT_ERR
    HdlOp: ASSIGN
        list: ops
            HdlValueId: pre_result
            HdlOp: SLL
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlValueId: last_result
                            HdlValueId: endian_swapped_rdata
                    HdlOp: MUL
                        list: ops
                            HdlValueInt: 8
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_op
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: AXILSB
                                                    HdlValueInt: 1
                                            HdlValueInt: 0
    list: elifs
    HdlOp: ASSIGN
        list: ops
            HdlValueId: pre_result
            HdlOp: SLL
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlValueId: endian_swapped_rdata
                            HdlOp: REPL_CONCAT
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 0
                    HdlOp: MUL
                        list: ops
                            HdlValueInt: 8
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_op
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: AXILSB
                                                    HdlValueInt: 1
                                            HdlValueInt: 0

UPD HdlStmIf@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@pre_result to wide_return

MOV HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['r_op',          {'__class__': 'HdlOp',           'fn': 'PART_SELECT_POST',           'ops': ['AXILSB',                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '2'}]}]}  to body
HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
    HdlStmCaseType: CASEZ
    HdlOp: INDEX
        list: ops
            HdlValueId: r_op
            HdlOp: PART_SELECT_POST
                list: ops
                    HdlValueId: AXILSB
                    HdlValueInt: 2
    list: cases
        tuple
            HdlValueInt: 10
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: pre_result
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: pre_result
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlOp: MUL
                                                                list: ops
                                                                    HdlValueInt: 2
                                                                    HdlValueId: DW
                                                            HdlValueInt: 1
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlOp: MUL
                                                                list: ops
                                                                    HdlValueInt: 2
                                                                    HdlValueId: DW
                                                            HdlValueInt: 16
                            HdlOp: REPL_CONCAT
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 0
        tuple
            HdlValueInt: 11
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: pre_result
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: pre_result
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlOp: MUL
                                                                list: ops
                                                                    HdlValueInt: 2
                                                                    HdlValueId: DW
                                                            HdlValueInt: 1
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlOp: MUL
                                                                list: ops
                                                                    HdlValueInt: 2
                                                                    HdlValueId: DW
                                                            HdlValueInt: 8
                            HdlOp: REPL_CONCAT
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 0
    HdlStmBlock: SEQ
        list: body

UPD HdlStmIf@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@pre_result to wide_return
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@pre_result to wide_return

UPD HdlStmIf@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@pre_result to wide_return
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@pre_result to wide_return

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['r_op',          {'__class__': 'HdlOp',           'fn': 'PART_SELECT_POST',           'ops': ['AXILSB',                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '2'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['r_op',          {'__class__': 'HdlOp',           'fn': 'PART_SELECT_POST',           'ops': ['AXILSB',                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '2'}]}]} 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@CONCAT to CONCAT
            INS HdlOp@@CONCAT to ops
            UPD HdlOp@@CONCAT to CONCAT
                INS list@@ops to CONCAT
                INS HdlValueInt@@0 to ops
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@CONCAT to CONCAT
            INS HdlOp@@CONCAT to ops
            UPD HdlOp@@CONCAT to CONCAT
                INS list@@ops to CONCAT
                INS HdlValueInt@@0 to ops


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -904,6 +914,9 @@ module	axiops #(
 		{ last_result, o_result } <= 0;
 	else begin
 		// {{{
+		if (OPT_LOWPOWER)
+			o_result <= 0;
+
 		if (OPT_LOCK && M_AXI_BVALID && (!OPT_LOWPOWER
 					|| (axlock && M_AXI_BRESP == OKAY)))
 		begin

ParseResult:
UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlAll
    INS HdlStmBlock@@SEQ to 

UPD HdlStmIf@@ to 
    INS HdlValueId@@SWAP_WSTRB to 
    INS list@@elifs to 
    INS HdlOp@@ASSIGN to 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: pre_result
            HdlValueId: wide_return

INS HdlStmIf@@ to body
HdlStmIf
    HdlValueId: OPT_LOWPOWER
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: o_result
    list: elifs


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -919,9 +932,6 @@ module	axiops #(
 			else
 				last_result <= endian_swapped_rdata;
 
-			if (OPT_ALIGNMENT_ERR)
-				last_result <= 0;
-
 			o_result <= pre_result[31:0];
 
 			if (OPT_SIGN_EXTEND)

ParseResult:
MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: OPT_ALIGNMENT_ERR
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: last_result
    list: elifs


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -943,12 +953,17 @@ module	axiops #(
 				endcase
 			end
 
-			if (OPT_LOWPOWER && (M_AXI_RRESP[1] || pending_err
-					|| misaligned_response_pending
+			if (OPT_LOWPOWER && (M_AXI_RRESP[1]
 					|| (axlock && !M_AXI_RRESP[0])))
 				o_result <= 0;
 			// }}}
 		end
+
+		if (OPT_ALIGNMENT_ERR)
+			last_result <= 0;
+
+		if (OPT_LOWPOWER && (pending_err || misaligned_response_pending))
+			o_result <= 0;
 		// }}}
 	end
 	// }}}
ParseResult:
INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: pending_err
                    HdlValueId: misaligned_response_pending
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: o_result
    list: elifs

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    MOV HdlOp@@INDEX to ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: M_AXI_RRESP
                            HdlValueInt: 1
                    DEL HdlValueId@@pending_err from ops
                    DEL list@@ops from OR_LOG
                DEL HdlOp@@OR_LOG from ops
                DEL HdlValueId@@misaligned_response_pending from ops
                DEL list@@ops from OR_LOG
            DEL HdlOp@@OR_LOG from ops


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -215,9 +215,14 @@
 //
 `default_nettype	none
 //
+`define	ROFLAG	3	// Read-only flag
+`define	AXFLAG	2	// Accessed flag
+`define	CHFLAG	1	// Cachable flag
+`define	EXEFLG	0	// No-execute flag (invalid for I-cache)
+//
 module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 				i_wbs_data, o_wbs_ack, o_wbs_stall, o_wbs_data,
-		i_wbm_cyc, i_wbm_stb, i_wbm_we,
+		i_wbm_cyc, i_wbm_stb, i_wbm_we, i_wbm_exe,
 			i_wbm_addr, i_wbm_data, i_wbm_sel, i_gie,
 		o_cyc, o_stb, o_we, o_addr, o_data, o_sel,
 			i_stall, i_ack, i_err, i_data,

ParseResult:
INS HdlIdDef@@i_wbm_exe to ports
HdlIdDef: i_wbm_exe
    HdlDirection: IN

INS HdlIdDef@@o_rtn_ack to ports
HdlIdDef: o_rtn_ack
    HdlDirection: OUT


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -243,6 +248,7 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 `else
 			PLGCTXT=16;
 `endif
+	parameter [0:0] OPT_DELAY_RETURN = 1'b0;
 	localparam	// And for our derived parameters (don't set these ...)
 			// Width of the data bus is 32-bits.  This may be hard
 			// to change.

ParseResult:
INS HdlIdDef@@OPT_DELAY_RETURN to params
HdlIdDef: OPT_DELAY_RETURN
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -314,7 +320,7 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 //
 //
 //
-	reg	[3:1]			tlb_flags	[0:(TBL_SIZE-1)];
+	reg	[3:0]			tlb_flags	[0:(TBL_SIZE-1)];
 	reg	[(LGCTXT-1):0]		tlb_cdata	[0:(TBL_SIZE-1)];
 	reg	[(VAW-1):0]		tlb_vdata	[0:(TBL_SIZE-1)];
 	reg	[(PAW-1):0]		tlb_pdata	[0:(TBL_SIZE-1)];

ParseResult:
UPD HdlIdDef@@tlb_flags to tlb_flags
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlValueInt@@1 to 0


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -338,9 +344,12 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 	reg	[31:0]	status_word;
 	//
 	//
-	reg			r_pending, r_we, last_page_valid, last_ro, r_valid;
+	reg			r_pending, r_we, r_exe, r_valid,
+				last_page_valid, last_ro, last_exe;
 	reg	[(DW-3):0]	r_addr;
 	reg	[(DW-1):0]	r_data;
+	wire	[(VAW-1):0]	vpage;
+	wire	[AW-LGPGSZW-1:0]	ppage;
 	reg	[(DW/8-1):0]	r_sel;
 	reg	[(PAW-1):0]	last_ppage;
 	reg	[(VAW-1):0]	last_vpage;

ParseResult:
MOV HdlIdDef@@r_valid to objs
HdlIdDef: r_valid
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

INS HdlIdDef@@vpage to objs
HdlIdDef: vpage
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: VAW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@ppage to objs
HdlIdDef: ppage
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: AW
                                    HdlValueId: LGPGSZW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -349,13 +358,22 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 	reg	[(LGTBL-1):0]		s_tlb_addr;
 	reg				s_tlb_miss, s_tlb_hit, s_pending;
 	//
-	wire	ro_flag, simple_miss, ro_miss, table_err, cachable;
+	wire	ro_flag, exe_flag, simple_miss, ro_miss, exe_miss, table_err, cachable;
 	reg	p_tlb_miss,p_tlb_err, pf_stb, pf_cachable;
 	reg	miss_pending;
 	//
 	reg	rtn_err;
 
 
+	wire	this_page_valid, pending_page_valid;
+	assign	this_page_valid = ((last_page_valid)
+				&&(i_wbm_addr[(DW-3):(DW-2-VAW)]==last_vpage)
+				&&((!last_ro)||(!i_wbm_we))
+				&&((!last_exe)||(!i_wbm_exe)));
+	assign	pending_page_valid = ((s_pending)&&(s_tlb_hit)
+				&&((!r_we)||(!ro_flag))
+				&&((!r_exe)||(exe_flag)));
+
 	//////////////////////////////////////////
 	//
 	//

ParseResult:
INS HdlIdDef@@exe_miss to objs
HdlIdDef: exe_miss
    HdlDirection: INTERNAL

INS HdlIdDef@@this_page_valid to objs
HdlIdDef: this_page_valid
    HdlDirection: INTERNAL

INS HdlIdDef@@pending_page_valid to objs
HdlIdDef: pending_page_valid
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to objs


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -372,11 +390,13 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 			tlb_pdata[wr_tlb_addr]<=i_wbs_data[(AW+1):LGPGSZB];
 		// Set the context register for the page
 		if ((wr_vtable)||(wr_ptable))
-			tlb_flags[wr_tlb_addr] <= i_wbs_data[3:1];
+			tlb_flags[wr_tlb_addr] <= i_wbs_data[3:0];
 		// Otherwise, keep track of the accessed bit if we
 		// ever access this page
-		else if ((!kernel_context)&&(s_pending)&&(s_tlb_hit)&&((!r_we)||(!ro_flag)))
-			tlb_flags[s_tlb_addr][2] <= 1'b1;
+		else if ((!kernel_context)&&(pending_page_valid))
+			tlb_flags[s_tlb_addr][`AXFLAG] <= 1'b1;
+		else if ((!kernel_context)&&(this_page_valid));
+			tlb_flags[s_tlb_addr][`AXFLAG] <= 1'b1;
 		if (wr_vtable)
 			tlb_cdata[wr_tlb_addr][((LGCTXT>=8)? 7:(LGCTXT-1)):0]
 				<= i_wbs_data[((LGCTXT>=8)? 11:(4+LGCTXT-1)):4];

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    INS HdlValueId@@pending_page_valid to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: r_exe
                HdlValueId: exe_flag
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                INS HdlValueId@@s_pending to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: last_exe
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: i_wbm_exe

UPD HdlStmIf@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: kernel_context
                            HdlValueId: s_pending
                    HdlValueId: s_tlb_hit
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: r_we
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: ro_flag
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: kernel_context
                    HdlValueId: s_pending
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlValueId@@s_pending to pending_page_valid

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 1
    HdlOp: INDEX
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: tlb_flags
                    HdlValueId: s_tlb_addr
            HdlValueInt: 2

INS HdlStmNop@@ to 

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@1 to 0


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -454,7 +474,9 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 	//
 	//
 	wire	[(VAW-1):0]	r_vpage;
+	wire	[(PAW-1):0]	r_ppage;
 	assign	r_vpage = (r_addr[(DW-3):(DW-2-VAW)]);
+	assign	r_ppage = (o_addr[(AW-1):LGPGSZW]);
 
 	initial	s_pending = 1'b0;
 	initial	r_pending = 1'b0;

ParseResult:
INS HdlIdDef@@r_ppage to objs
HdlIdDef: r_ppage
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: PAW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: o_addr
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueId: LGPGSZW
    HdlValueId: r_ppage


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -475,27 +498,23 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 	begin
 		if (!o_rtn_stall)
 		begin
-			r_pending <= (i_wbm_stb)&&(!kernel_context);
+			r_pending <= (i_wbm_stb)&&(!kernel_context)
+						&&(!this_page_valid);
 			r_we      <= i_wbm_we;
+			r_exe     <= i_wbm_exe;
 			o_addr    <= { { (kernel_context)?
 				i_wbm_addr[(AW-1):LGPGSZW] : last_ppage },
 				i_wbm_addr[(LGPGSZW-1):0] };
 			r_addr    <= i_wbm_addr;
 			r_data    <= i_wbm_data;
 			r_sel     <= i_wbm_sel;
-			r_valid   <= (i_wbm_stb)&&(
-				(kernel_context)
-				||((last_page_valid)
-					&&(i_wbm_addr[(DW-3):(DW-2-VAW)] == last_vpage)
-					&&((!last_ro)||(!i_wbm_we))));
+			r_valid   <= (i_wbm_stb)&&((kernel_context)||(this_page_valid));
 			s_pending <= 1'b0;
 		end else if (!r_valid) begin
-			r_valid <= (!miss_pending)&&((last_page_valid)
-					&&(r_vpage== last_vpage)
-					&&((!last_ro)||(!r_we)));
-			o_addr <= { last_ppage , r_addr[(LGPGSZW-1):0] };
-			r_pending<= (r_pending);
-			s_pending <=(r_pending)&&(!kernel_context);
+			r_valid <= (pending_page_valid);
+			o_addr <= { ppage , r_addr[(LGPGSZW-1):0] };
+			r_pending<= (r_pending)&&(!pending_page_valid);
+			s_pending <=(r_pending)&&(!pending_page_valid);
 		end else begin
 			r_pending <= 1'b0;
 			s_pending <= 1'b0;

ParseResult:
MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_wbm_stb
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: kernel_context
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: last_page_valid
                                    HdlOp: EQ
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_wbm_addr
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlOp: SUB
                                                                list: ops
                                                                    HdlValueId: DW
                                                                    HdlValueInt: 3
                                                            HdlOp: SUB
                                                                list: ops
                                                                    HdlOp: SUB
                                                                        list: ops
                                                                            HdlValueId: DW
                                                                            HdlValueInt: 2
                                                                    HdlValueId: VAW
                                            HdlValueId: last_vpage
                            HdlOp: OR_LOG
                                list: ops
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: last_ro
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_wbm_we
    HdlValueId: r_valid

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to AND_LOG
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: kernel_context
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: last_page_valid
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_wbm_addr
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlValueId: DW
                                                                HdlValueInt: 3
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlValueId: DW
                                                                        HdlValueInt: 2
                                                                HdlValueId: VAW
                                        HdlValueId: last_vpage
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: last_ro
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: i_wbm_we
        UPD HdlOp@@OR_LOG to OR_LOG
            MOV HdlValueId@@kernel_context to ops
            HdlValueId: kernel_context
    UPD HdlValueId@@r_valid to this_page_valid
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_wbm_stb
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: kernel_context
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: last_page_valid
                                    HdlOp: EQ
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_wbm_addr
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlOp: SUB
                                                                list: ops
                                                                    HdlValueId: DW
                                                                    HdlValueInt: 3
                                                            HdlOp: SUB
                                                                list: ops
                                                                    HdlOp: SUB
                                                                        list: ops
                                                                            HdlValueId: DW
                                                                            HdlValueInt: 2
                                                                    HdlValueId: VAW
                                            HdlValueId: last_vpage
                            HdlOp: OR_LOG
                                list: ops
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: last_ro
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_wbm_we

UPD HdlStmAssign@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: r_pending
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: kernel_context
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@r_pending to ops
        HdlValueId: r_pending

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: i_wbm_exe
    HdlValueId: r_exe

INS HdlStmAssign@@ to body

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: this_page_valid

UPD HdlStmAssign@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_wbm_stb
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: kernel_context

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlValueId@@last_page_valid to pending_page_valid
                MOV HdlValueId@@last_page_valid to ops
                HdlValueId: last_page_valid
                DEL HdlOp@@EQ from ops
                HdlOp: EQ
                    list: ops
                        HdlValueId: r_vpage
                        HdlValueId: last_vpage
                DEL list@@ops from AND_LOG
            DEL HdlOp@@AND_LOG from ops
            DEL HdlOp@@OR_LOG from ops
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: last_ro
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: r_we
            DEL list@@ops from AND_LOG
        DEL HdlOp@@NEG_LOG from ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: miss_pending
        DEL HdlOp@@AND_LOG from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlValueId@@last_ppage to ppage

UPD HdlStmAssign@@ to 
    MOV HdlValueId@@r_pending to 
    HdlValueId: r_pending


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -554,19 +567,22 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 
 	// Third clock: Read from the address the virtual table offset,
 	// whether read-only, etc.
-	assign	ro_flag     = tlb_flags[s_tlb_addr][3];
+	assign	ro_flag     = tlb_flags[s_tlb_addr][`ROFLAG];
+	assign	exe_flag    = tlb_flags[s_tlb_addr][`EXEFLG];
 	assign	simple_miss = (s_pending)&&(s_tlb_miss);
 	assign	ro_miss     = (s_pending)&&(s_tlb_hit)&&(r_we)&&(ro_flag);
+	assign	exe_miss    = (s_pending)&&(s_tlb_hit)&&(r_exe)&&(!exe_flag);
 	assign	table_err   = (s_pending)&&(!s_tlb_miss)&&(!s_tlb_hit);
-	assign	cachable    = tlb_flags[s_tlb_addr][1];
-	// assign	tlb_access_flag    = tlb_flags[s_tlb_addr][2];
+	assign	vpage       = tlb_vdata[s_tlb_addr];
+	assign	ppage	    = tlb_pdata[s_tlb_addr];
+	assign	cachable    = tlb_flags[s_tlb_addr][`CHFLAG];
 
 	initial	p_tlb_miss = 1'b0;
 	always @(posedge i_clk)
 	if (i_reset)
 		p_tlb_miss <= 1'b0;
 	else
-		p_tlb_miss <= (i_wbm_cyc)&&((simple_miss)||(ro_miss));
+		p_tlb_miss <= (i_wbm_cyc)&&((simple_miss)||(ro_miss)||(exe_miss));
 
 	initial	p_tlb_err  = 1'b0;
 	always @(posedge i_clk)

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@i_wbm_cyc to ops
        HdlValueId: i_wbm_cyc
    UPD HdlOp@@AND_LOG to OR_LOG
    MOV HdlOp@@AND_LOG to if_false
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_wbm_cyc
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: simple_miss
                    HdlValueId: ro_miss


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -593,19 +609,25 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 		last_vpage <= 0;
 	end else if ((!kernel_context)&&(r_pending)&&(!last_page_valid))
 	begin
-		last_ppage <= tlb_pdata[s_tlb_addr];
-		last_vpage <= tlb_vdata[s_tlb_addr];
+		last_ppage <= ppage;
+		last_vpage <= vpage;
+		last_exe   <= exe_flag;
 		last_ro    <= ro_flag;
 		pf_stb <= 1'b1;
 	end else
 		pf_stb <= 1'b0;
 
-
+	initial	status_word = 0;
 	always @(posedge i_clk)
-		if ((table_err)||(ro_miss)||(simple_miss))
-			status_word <= { r_addr[(AW-1):(AW-VAW)],
+	if (i_reset)
+		status_word <= 0;
+	else if (wr_control)
+		status_word <= 0;
+	else if ((table_err)||(ro_miss)||(simple_miss)||(exe_miss))
+		status_word <= { r_addr[(AW-1):(AW-VAW)],
 				{(LGPGSZW-1){1'b0}}, 
-				(table_err), (ro_miss), (simple_miss) };
+				(table_err), (exe_miss),
+				(ro_miss), (simple_miss) };
 
 	initial	last_page_valid = 1'b0;
 	always @(posedge i_clk)

ParseResult:
MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: tlb_vdata
            HdlValueId: s_tlb_addr
    HdlValueId: last_vpage

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: tlb_pdata
            HdlValueId: s_tlb_addr
    HdlValueId: last_ppage

INS HdlStmProcess@@ to objs

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@last_vpage to vpage

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@last_ppage to ppage

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: status_word

UPD HdlStmAssign@@if_false to if_false
    INS HdlOp@@AND_LOG to if_false
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            INS HdlValueId@@exe_miss to ops

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlOp: CONCAT
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_addr
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlValueId: AW
                                                            HdlValueInt: 1
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlValueId: AW
                                                            HdlValueId: VAW
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: LGPGSZW
                                                    HdlValueInt: 1
                                            HdlValueInt: 0
                            HdlValueId: table_err
                    HdlValueId: ro_miss
            HdlValueId: simple_miss
    HdlValueId: status_word

UPD HdlStmIf@@body to body
    MOV HdlOp@@OR_LOG to body
    HdlOp: OR_LOG
        list: ops
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: table_err
                    HdlValueId: ro_miss
            HdlValueId: simple_miss
    DEL list@@elifs from body

UPD HdlStmAssign@@if_true to if_true
    MOV HdlOp@@CONCAT to if_true
    HdlOp: CONCAT
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_addr
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlValueId: AW
                                                            HdlValueInt: 1
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlValueId: AW
                                                            HdlValueId: VAW
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: LGPGSZW
                                                    HdlValueInt: 1
                                            HdlValueInt: 0
                            HdlValueId: table_err
                    HdlValueId: ro_miss
            HdlValueId: simple_miss
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlValueId@@simple_miss to ro_miss
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlValueId@@ro_miss to exe_miss


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -620,7 +642,7 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 			last_page_valid <= (last_page_valid)
 				&&(i_wbm_addr[(DW-3):(DW-2-VAW)] == last_vpage);
 		else if ((r_pending)&&(!last_page_valid))
-			last_page_valid <= (s_tlb_hit)&&(!ro_miss);
+			last_page_valid <= (s_pending)&&(s_tlb_hit);
 	end
 
 	parameter	LGFIFO = 6;

ParseResult:
UPD HdlStmProcess@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: status_word
                HdlValueInt: 0

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS tuple@@ to elifs
    tuple
        HdlValueId: wr_control
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: status_word
    INS tuple@@ to elifs
    INS HdlOp@@OR_LOG to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlValueId@@exe_miss to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@s_tlb_hit to s_pending
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@ro_miss to s_tlb_hit
            MOV HdlValueId@@ro_miss to ops
            HdlValueId: ro_miss
            DEL list@@ops from NEG_LOG
        DEL HdlOp@@NEG_LOG from ops


CommitId: b0c30eae89083885f106204c5e88591ea3cddb1a
More complete formal ZipMMU coverage, more bugs corrected
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -682,7 +722,9 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 	else if (!i_wbm_cyc)
 		miss_pending <= 0;
 	else
-		miss_pending <= (p_tlb_miss)||(p_tlb_err);
+		miss_pending <= (i_wbm_cyc)&&(
+				(simple_miss)||(ro_miss)||(exe_miss)
+				||((s_pending)&&(!s_tlb_miss)&&(!s_tlb_hit)));
 
 	assign	o_rtn_miss  = (miss_pending)&&(!bus_pending);
 	assign	o_rtn_err   = (rtn_err);

ParseResult:
UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmIf@@body to body
    MOV list@@elifs to body
    list: elifs
        tuple
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: i_wbm_cyc
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: miss_pending
    DEL HdlValueId@@i_reset from body

DEL HdlStmAssign@@if_false from body
HdlStmAssign: if_false
    HdlOp: OR_LOG
        list: ops
            HdlValueId: p_tlb_miss
            HdlValueId: p_tlb_err
    HdlValueId: miss_pending

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs


CommitId: 6b5ce16b24c5a46dff375e6bfeedd4631de9c6db
Fixed a nasty early branching long jump bug
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -519,12 +519,18 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 				r_ljmp <= 1'b0;
 			else if (i_ce)
 			begin
-				if (o_early_branch_stb)
+				if ((r_ljmp)&&(pf_valid))
+					r_ljmp <= 1'b0;
+				else if (o_early_branch_stb)
 					r_ljmp <= 1'b0;
-				else if ((OPT_CIS)&&(iword[`CISBIT]))
-					r_ljmp <= w_cis_ljmp;
 				else if (pf_valid)
-					r_ljmp <= (w_ljmp);
+				begin
+					if ((OPT_CIS)&&(iword[`CISBIT]))
+						r_ljmp <= w_cis_ljmp;
+					else
+						r_ljmp <= (w_ljmp);
+				end else if ((OPT_CIS)&&(o_phase)&&(iword[`CISBIT]))
+					r_ljmp <= w_cis_ljmp;
 			end
 		assign	o_ljmp = r_ljmp;
 

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@pf_valid to ops
    INS tuple@@ to elifs
    tuple
        HdlValueId: o_early_branch_stb
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: r_ljmp
    INS HdlValueId@@pf_valid to 
    INS HdlStmBlock@@SEQ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: OPT_CIS
                HdlValueId: o_phase
        INS HdlOp@@INDEX to ops
        UPD HdlOp@@INDEX to INDEX
            INS list@@ops to INDEX
            INS HdlValueInt@@31 to ops

UPD HdlStmIf@@ to 
    UPD HdlValueId@@o_early_branch_stb to r_ljmp
    MOV HdlValueId@@o_early_branch_stb to 
    HdlValueId: o_early_branch_stb
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_CIS
            HdlOp: INDEX
                list: ops
                    HdlValueId: iword
                    HdlValueInt: 31
    UPD HdlValueId@@pf_valid to iword
    MOV HdlValueId@@pf_valid to 
    HdlValueId: pf_valid

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlValueId: w_cis_ljmp
    HdlValueId: r_ljmp

INS HdlStmIf@@ to body

INS HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueId: w_cis_ljmp
    HdlValueId: r_ljmp

UPD HdlStmIf@@ to 
    INS list@@elifs to 

INS HdlStmAssign@@if_false to 
HdlStmAssign: if_false
    HdlValueId: w_ljmp
    HdlValueId: r_ljmp

DEL HdlStmAssign@@ from 
HdlStmAssign
    HdlValueId: w_ljmp
    HdlValueId: r_ljmp


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -160,6 +160,7 @@ module	zipsystem #(
 		parameter [0:0]	OPT_USERMODE=1,
 		parameter [0:0]	OPT_DBGPORT=1,
 		parameter [0:0]	OPT_TRACE_PORT=1,
+		parameter [0:0]	OPT_PROFILER=0,
 		parameter [0:0]	OPT_LOWPOWER=0,
 		// }}}
 		// Local bus options

ParseResult:
INS HdlIdDef@@OPT_PROFILER to params
HdlIdDef: OPT_PROFILER
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -225,7 +226,10 @@ module	zipsystem #(
 		output	wire		o_dbg_ack,
 		output	wire [DW-1:0]	o_dbg_data,
 		// }}}
-		output wire	[31:0]	o_cpu_debug
+		output wire	[31:0]	o_cpu_debug,
+		output wire		o_prof_stb,
+		output wire [PAW+1:0]	o_prof_addr,
+		output wire	[31:0]	o_prof_ticks
 		// }}}
 	);
 

ParseResult:
INS HdlIdDef@@o_prof_stb to ports
HdlIdDef: o_prof_stb
    HdlDirection: OUT

INS HdlIdDef@@o_prof_addr to ports
HdlIdDef: o_prof_addr
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: PAW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

INS HdlIdDef@@o_prof_ticks to ports
HdlIdDef: o_prof_ticks
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: OUT


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -337,6 +341,7 @@ module	zipsystem #(
 	wire		no_dbg_err;
 
 	wire		cpu_break, dbg_cmd_write;
+	wire	[31:0]	dbg_cmd_data;
 	reg		cmd_reset, cmd_step, cmd_clear_cache;
 	reg		cmd_write;
 	reg	[4:0]	cmd_waddr;

ParseResult:
INS HdlIdDef@@dbg_cmd_data to objs
HdlIdDef: dbg_cmd_data
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -549,6 +554,7 @@ module	zipsystem #(
 
 	assign	dbg_cmd_write = (dbg_stb)&&(dbg_we)
 					&&(dbg_addr[6:5] == DBG_ADDR_CTRL);
+	assign	dbg_cmd_data = dbg_idata;
 	//
 	// reset_hold: Always start us off with an initial reset
 	// {{{

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: dbg_idata
    HdlValueId: dbg_cmd_data


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -629,12 +635,12 @@ module	zipsystem #(
 
 		// 2. Halt on any user request to halt.  (Only valid if the
 		//	STEP bit isn't also set)
-		if (dbg_cmd_write && dbg_idata[HALT_BIT]
-						&& !dbg_idata[STEP_BIT])
+		if (dbg_cmd_write && dbg_cmd_data[HALT_BIT]
+						&& !dbg_cmd_data[STEP_BIT])
 			cmd_halt <= 1'b1;
 
 		// 3. Halt on any user request to write to a CPU register
-		if (i_dbg_stb && dbg_we && !dbg_addr[5])
+		if (dbg_stb && dbg_we && !dbg_addr[5])
 			cmd_halt <= 1'b1;
 
 		// 4. Halt following any step command

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@i_dbg_stb to dbg_stb


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -646,7 +652,7 @@ module	zipsystem #(
 			cmd_halt <= 1'b1;
 
 		// 5. Halt on any clear cache bit--independent of any step bit
-		if (dbg_cmd_write && dbg_idata[CLEAR_CACHE_BIT])
+		if (dbg_cmd_write && dbg_cmd_data[CLEAR_CACHE_BIT])
 			cmd_halt <= 1'b1;
 		// }}}
 	end

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@dbg_idata to dbg_cmd_data
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@dbg_idata to dbg_cmd_data


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -658,8 +664,8 @@ module	zipsystem #(
 	always @(posedge i_clk)
 	if (i_reset || cpu_reset)
 		cmd_clear_cache <= 1'b0;
-	else if (dbg_cmd_write && dbg_idata[CLEAR_CACHE_BIT]
-			&& dbg_idata[HALT_BIT])
+	else if (dbg_cmd_write && dbg_cmd_data[CLEAR_CACHE_BIT]
+			&& dbg_cmd_data[HALT_BIT])
 		cmd_clear_cache <= 1'b1;
 	else if (cmd_halt && !cpu_dbg_stall)
 		cmd_clear_cache <= 1'b0;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@dbg_idata to dbg_cmd_data


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -158,16 +158,21 @@ module	f_idecode #(
 	assign	w_sto    = (w_mem)&&( w_cis_op[0]);
 	assign	w_div    = (!iword[CISBIT])&&(w_op[4:1] == 4'h7);
 	assign	w_fpu    = (!iword[CISBIT])&&(w_op[4:3] == 2'b11)
-				&&(w_dcdR[3:1] != 3'h7)&&(w_op[2:1] != 2'b00);
+				&&(w_dcdR[3:1] != 3'h7)
+				&&(w_op[2:1] != 2'b00);
 	// If the result register is either CC or PC, and this would otherwise
 	// be a floating point instruction with floating point opcode of 0,
 	// then this is a NOOP.
-	assign	w_special= (!iword[CISBIT])&&((!OPT_FPU)||(w_dcdR[3:1]==3'h7))
+	assign	w_special= (!iword[CISBIT])&&(w_dcdR[3:1]==3'h7)
 			&&(w_op[4:2] == 3'b111);
 	assign	w_break = (w_special)&&(w_op[4:0]==5'h1c);
 	assign	w_lock  = (w_special)&&(w_op[4:0]==5'h1d);
 	assign	w_sim   = (w_special)&&(w_op[4:0]==5'h1e);
 	assign	w_noop  = (w_special)&&(w_op[4:1]==4'hf); // Must include w_sim
+`ifdef	FORMAL
+	always @(*)
+		assert(!w_special || !w_fpu);
+`endif
 	// }}}
 
 	// w_dcdR, w_dcdA

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: iword
                                HdlValueId: CISBIT
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_FPU
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_dcdR
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueInt: 1
                                HdlValueInt: 7
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@OR_LOG to AND_LOG
            MOV HdlOp@@NEG_LOG to ops
            HdlOp: NEG_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: iword
                            HdlValueId: CISBIT
            UPD HdlOp@@OR_LOG to OR_LOG
                DEL HdlOp@@NEG_LOG from ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: OPT_FPU
        MOV HdlOp@@EQ to ops
        HdlOp: EQ
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: w_op
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 4
                                HdlValueInt: 2
                HdlValueInt: 111
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -216,7 +221,7 @@ module	f_idecode #(
 	// rA - do we need to read register A?
 	// {{{
 	assign	w_rA = // Floating point reads reg A
-			((w_fpu)&&(OPT_FPU))
+			(w_fpu)
 			// Divide's read A
 			||(w_div)
 			// ALU ops read A,

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    UPD HdlOp@@AND_LOG to AND_LOG
                        MOV HdlValueId@@w_fpu to ops
                        HdlValueId: w_fpu
                        DEL HdlValueId@@OPT_FPU from ops
                        DEL list@@ops from AND_LOG
                    DEL HdlOp@@AND_LOG from ops


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -253,7 +258,7 @@ module	f_idecode #(
 	// wF -- do we write flags when we are done?
 	// {{{
 	assign	w_wF     = (w_cmptst)
-			||((w_cond[3])&&(((w_fpu)&&(OPT_FPU))||(w_div)
+			||((w_cond[3])&&(w_fpu||w_div
 				||((w_ALU)&&(!w_mov)&&(!w_ldilo)&&(!w_brev)
 					&&(w_dcdR[3:1] != 3'h7))));
 	// }}}

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    UPD HdlOp@@AND_LOG to AND_LOG
                        MOV HdlValueId@@w_fpu to ops
                        HdlValueId: w_fpu
                        DEL HdlValueId@@OPT_FPU from ops
                        DEL list@@ops from AND_LOG
                    DEL HdlOp@@AND_LOG from ops


CommitId: f631145fbafc918489563f6257516528da399d32
Updated AXILOPS, added lowpower option, some endianness fixes
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -78,7 +78,16 @@ module	axilops #(
 		// This may just be a half baked attempt to solve this problem,
 		// since it will fail if you ever trie to access bytes or
 		// halfwords at other than their intended widths.
-		parameter [0:0]	SWAP_WSTRB = 1'b1,
+		parameter [0:0]	SWAP_WSTRB = 1'b0,
+		// }}}
+		// OPT_SIGN_EXTEND
+		// {{{
+		// Some CPU's want memory accesses to be sign extended upon
+		// return.  The ZipCPU is not one of those CPU's.  However,
+		// since it's fairly easy to do so, we'll implement this logic
+		// if ever OPT_SIGN_EXTEND is true so you can see how it would
+		// be done if necessary.
+		parameter [0:0]	OPT_SIGN_EXTEND = 1'b0,
 		// }}}
 		// OPT_ALIGNMENT_ERR
 		// {{{

ParseResult:
INS HdlIdDef@@OPT_SIGN_EXTEND to params
HdlIdDef: OPT_SIGN_EXTEND
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlIdDef@@SWAP_WSTRB to SWAP_WSTRB
    UPD HdlValueInt@@1 to 0


CommitId: f631145fbafc918489563f6257516528da399d32
Updated AXILOPS, added lowpower option, some endianness fixes
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -291,7 +300,7 @@ module	axilops #(
 		// {{{
 		M_AXI_AWADDR <= i_addr;
 
-		if (OPT_LOWPOWER && !i_stb)
+		if (OPT_LOWPOWER && (i_cpu_reset || o_err || !i_stb || w_misalignment_err))
 			M_AXI_AWADDR <= 0;
 
 		if (SWAP_ENDIANNESS || SWAP_WSTRB)

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to OR_LOG
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: i_stb
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_LOWPOWER to i_cpu_reset
        MOV HdlValueId@@OPT_LOWPOWER to ops
        HdlValueId: OPT_LOWPOWER


CommitId: f631145fbafc918489563f6257516528da399d32
Updated AXILOPS, added lowpower option, some endianness fixes
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -307,6 +316,7 @@ module	axilops #(
 		// {{{
 		M_AXI_AWADDR[C_AXI_ADDR_WIDTH-1:AXILSB]
 			<= M_AXI_AWADDR[C_AXI_ADDR_WIDTH-1:AXILSB] + 1;
+
 		M_AXI_AWADDR[AXILSB-1:0] <= 0;
 
 		if (OPT_LOWPOWER && ((M_AXI_RREADY && !misaligned_request)

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@OPT_LOWPOWER to ops
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlValueId@@w_misalignment_err to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS HdlOp@@OR_LOG to ops
                UPD HdlOp@@OR_LOG to OR_LOG
                    INS list@@ops to OR_LOG
                    INS HdlValueId@@o_err to ops


CommitId: f631145fbafc918489563f6257516528da399d32
Updated AXILOPS, added lowpower option, some endianness fixes
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -458,10 +452,10 @@ module	axilops #(
 		if (OPT_LOWPOWER)
 		begin
 			if (w_misalignment_err)
-				{ axi_wdata, axi_wstrb } <= 0;
+				{ axi_wdata, axi_wstrb, r_op } <= 0;
 			if (o_err || i_cpu_reset)
 				{ next_wdata, next_wstrb,
-					axi_wdata, axi_wstrb } <= 0;
+					axi_wdata, axi_wstrb, r_op } <= 0;
 		end
 		// }}}
 		// }}}

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlStmBlock@@SEQ to SEQ
        UPD list@@body to elifs
        MOV list@@body to SEQ
        list: body
            HdlStmIf
                HdlValueId: OPT_LOWPOWER
                HdlStmBlock: SEQ
                    list: body
                        HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
                            HdlStmCaseType: CASEZ
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueInt: 1
                            list: cases
                                tuple
                                    HdlValueInt: 10
                                    HdlStmAssign
                                        HdlOp: SLL
                                            list: ops
                                                HdlOp: CONCAT
                                                    list: ops
                                                        HdlOp: REPL_CONCAT
                                                            list: ops
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlOp: MUL
                                                                            list: ops
                                                                                HdlValueInt: 2
                                                                                HdlValueId: C_AXI_DATA_WIDTH
                                                                        HdlValueInt: 16
                                                                HdlValueInt: 0
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_data
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 15
                                                                        HdlValueInt: 0
                                                HdlOp: MUL
                                                    list: ops
                                                        HdlValueInt: 8
                                                        HdlValueId: swapaddr
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueId: next_wdata
                                                HdlValueId: axi_wdata
                                tuple
                                    HdlValueInt: 11
                                    HdlStmAssign
                                        HdlOp: SLL
                                            list: ops
                                                HdlOp: CONCAT
                                                    list: ops
                                                        HdlOp: REPL_CONCAT
                                                            list: ops
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlOp: MUL
                                                                            list: ops
                                                                                HdlValueInt: 2
                                                                                HdlValueId: C_AXI_DATA_WIDTH
                                                                        HdlValueInt: 8
                                                                HdlValueInt: 0
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_data
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 7
                                                                        HdlValueInt: 0
                                                HdlOp: MUL
                                                    list: ops
                                                        HdlValueInt: 8
                                                        HdlValueId: swapaddr
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueId: next_wdata
                                                HdlValueId: axi_wdata
                            HdlStmAssign: default
                                HdlOp: SLL
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: REPL_CONCAT
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlOp: MUL
                                                                    list: ops
                                                                        HdlValueInt: 2
                                                                        HdlValueId: C_AXI_DATA_WIDTH
                                                                HdlValueInt: 32
                                                        HdlValueInt: 0
                                                HdlValueId: i_data
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueInt: 8
                                                HdlValueId: swapaddr
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: next_wdata
                                        HdlValueId: axi_wdata
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
                            HdlStmCaseType: CASEZ
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueInt: 1
                            list: cases
                                tuple
                                    HdlValueInt: 10
                                    HdlStmAssign
                                        HdlOp: REPL_CONCAT
                                            list: ops
                                                HdlOp: DIV
                                                    list: ops
                                                        HdlOp: MUL
                                                            list: ops
                                                                HdlValueInt: 2
                                                                HdlValueId: C_AXI_DATA_WIDTH
                                                        HdlValueInt: 16
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_data
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 15
                                                                HdlValueInt: 0
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueId: next_wdata
                                                HdlValueId: axi_wdata
                                tuple
                                    HdlValueInt: 11
                                    HdlStmAssign
                                        HdlOp: REPL_CONCAT
                                            list: ops
                                                HdlOp: DIV
                                                    list: ops
                                                        HdlOp: MUL
                                                            list: ops
                                                                HdlValueInt: 2
                                                                HdlValueId: C_AXI_DATA_WIDTH
                                                        HdlValueInt: 8
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_data
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueId: next_wdata
                                                HdlValueId: axi_wdata
                            HdlStmAssign: default
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlOp: DIV
                                            list: ops
                                                HdlOp: MUL
                                                    list: ops
                                                        HdlValueInt: 2
                                                        HdlValueId: C_AXI_DATA_WIDTH
                                                HdlValueInt: 32
                                        HdlValueId: i_data
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: next_wdata
                                        HdlValueId: axi_wdata
            HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
                HdlStmCaseType: CASEZ
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_op
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 2
                                HdlValueInt: 1
                list: cases
                    tuple
                        HdlValueInt: 0?
                        HdlStmAssign
                            HdlValueId: swapped_wstrb_word
                            HdlOp: CONCAT
                                list: ops
                                    HdlValueId: next_wstrb
                                    HdlValueId: axi_wstrb
                    tuple
                        HdlValueInt: 10
                        HdlStmAssign
                            HdlValueId: swapped_wstrb_halfword
                            HdlOp: CONCAT
                                list: ops
                                    HdlValueId: next_wstrb
                                    HdlValueId: axi_wstrb
                    tuple
                        HdlValueInt: 11
                        HdlStmAssign
                            HdlValueId: swapped_wstrb_byte
                            HdlOp: CONCAT
                                list: ops
                                    HdlValueId: next_wstrb
                                    HdlValueId: axi_wstrb
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 2
                                        HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_addr
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueId: AXILSB
                                                HdlValueInt: 1
                                        HdlValueInt: 0
                HdlValueId: r_op
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: OPT_LOWPOWER
                        HdlOp: NEG_LOG
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 0
                HdlStmAssign: if_true
                    HdlValueInt: 0
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlValueId: next_wstrb
                                            HdlValueId: next_wdata
                                    HdlValueId: axi_wstrb
                            HdlValueId: axi_wdata
                list: elifs
            HdlStmIf
                HdlValueId: OPT_ALIGNMENT_ERR
                HdlStmAssign: if_true
                    HdlValueInt: 0
                    HdlOp: CONCAT
                        list: ops
                            HdlValueId: next_wstrb
                            HdlValueId: next_wdata
                list: elifs
            HdlStmIf
                HdlValueId: OPT_LOWPOWER
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlValueId: w_misalignment_err
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: axi_wdata
                                        HdlValueId: axi_wstrb
                            list: elifs
                        HdlStmIf
                            HdlOp: OR_LOG
                                list: ops
                                    HdlValueId: o_err
                                    HdlValueId: i_cpu_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: CONCAT
                                                    list: ops
                                                        HdlValueId: next_wdata
                                                        HdlValueId: next_wstrb
                                                HdlValueId: axi_wdata
                                        HdlValueId: axi_wstrb
                            list: elifs
                list: elifs
    MOV tuple@@ to elifs
    tuple
        HdlValueId: i_stb
        HdlStmBlock: SEQ
            list: body
                HdlStmIf
                    HdlValueId: OPT_LOWPOWER
                    HdlStmBlock: SEQ
                        list: body
                            HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
                                HdlStmCaseType: CASEZ
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 2
                                                HdlValueInt: 1
                                list: cases
                                    tuple
                                        HdlValueInt: 10
                                        HdlStmAssign
                                            HdlOp: SLL
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlOp: REPL_CONCAT
                                                                list: ops
                                                                    HdlOp: SUB
                                                                        list: ops
                                                                            HdlOp: MUL
                                                                                list: ops
                                                                                    HdlValueInt: 2
                                                                                    HdlValueId: C_AXI_DATA_WIDTH
                                                                            HdlValueInt: 16
                                                                    HdlValueInt: 0
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_data
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 15
                                                                            HdlValueInt: 0
                                                    HdlOp: MUL
                                                        list: ops
                                                            HdlValueInt: 8
                                                            HdlValueId: swapaddr
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueId: next_wdata
                                                    HdlValueId: axi_wdata
                                    tuple
                                        HdlValueInt: 11
                                        HdlStmAssign
                                            HdlOp: SLL
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlOp: REPL_CONCAT
                                                                list: ops
                                                                    HdlOp: SUB
                                                                        list: ops
                                                                            HdlOp: MUL
                                                                                list: ops
                                                                                    HdlValueInt: 2
                                                                                    HdlValueId: C_AXI_DATA_WIDTH
                                                                            HdlValueInt: 8
                                                                    HdlValueInt: 0
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_data
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                                    HdlOp: MUL
                                                        list: ops
                                                            HdlValueInt: 8
                                                            HdlValueId: swapaddr
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueId: next_wdata
                                                    HdlValueId: axi_wdata
                                HdlStmAssign: default
                                    HdlOp: SLL
                                        list: ops
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlOp: REPL_CONCAT
                                                        list: ops
                                                            HdlOp: SUB
                                                                list: ops
                                                                    HdlOp: MUL
                                                                        list: ops
                                                                            HdlValueInt: 2
                                                                            HdlValueId: C_AXI_DATA_WIDTH
                                                                    HdlValueInt: 32
                                                            HdlValueInt: 0
                                                    HdlValueId: i_data
                                            HdlOp: MUL
                                                list: ops
                                                    HdlValueInt: 8
                                                    HdlValueId: swapaddr
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlValueId: next_wdata
                                            HdlValueId: axi_wdata
                    list: elifs
                    HdlStmBlock: SEQ
                        list: body
                            HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
                                HdlStmCaseType: CASEZ
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 2
                                                HdlValueInt: 1
                                list: cases
                                    tuple
                                        HdlValueInt: 10
                                        HdlStmAssign
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlOp: DIV
                                                        list: ops
                                                            HdlOp: MUL
                                                                list: ops
                                                                    HdlValueInt: 2
                                                                    HdlValueId: C_AXI_DATA_WIDTH
                                                            HdlValueInt: 16
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_data
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 15
                                                                    HdlValueInt: 0
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueId: next_wdata
                                                    HdlValueId: axi_wdata
                                    tuple
                                        HdlValueInt: 11
                                        HdlStmAssign
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlOp: DIV
                                                        list: ops
                                                            HdlOp: MUL
                                                                list: ops
                                                                    HdlValueInt: 2
                                                                    HdlValueId: C_AXI_DATA_WIDTH
                                                            HdlValueInt: 8
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_data
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 7
                                                                    HdlValueInt: 0
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueId: next_wdata
                                                    HdlValueId: axi_wdata
                                HdlStmAssign: default
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlOp: DIV
                                                list: ops
                                                    HdlOp: MUL
                                                        list: ops
                                                            HdlValueInt: 2
                                                            HdlValueId: C_AXI_DATA_WIDTH
                                                    HdlValueInt: 32
                                            HdlValueId: i_data
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlValueId: next_wdata
                                            HdlValueId: axi_wdata
                HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
                    HdlStmCaseType: CASEZ
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_op
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 2
                                    HdlValueInt: 1
                    list: cases
                        tuple
                            HdlValueInt: 0?
                            HdlStmAssign
                                HdlValueId: swapped_wstrb_word
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: next_wstrb
                                        HdlValueId: axi_wstrb
                        tuple
                            HdlValueInt: 10
                            HdlStmAssign
                                HdlValueId: swapped_wstrb_halfword
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: next_wstrb
                                        HdlValueId: axi_wstrb
                        tuple
                            HdlValueInt: 11
                            HdlStmAssign
                                HdlValueId: swapped_wstrb_byte
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: next_wstrb
                                        HdlValueId: axi_wstrb
                HdlStmAssign
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueInt: 1
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_addr
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: AXILSB
                                                    HdlValueInt: 1
                                            HdlValueInt: 0
                    HdlValueId: r_op
                HdlStmIf
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: OPT_LOWPOWER
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_op
                                            HdlValueInt: 0
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueId: next_wstrb
                                                HdlValueId: next_wdata
                                        HdlValueId: axi_wstrb
                                HdlValueId: axi_wdata
                    list: elifs
                HdlStmIf
                    HdlValueId: OPT_ALIGNMENT_ERR
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlOp: CONCAT
                            list: ops
                                HdlValueId: next_wstrb
                                HdlValueId: next_wdata
                    list: elifs
                HdlStmIf
                    HdlValueId: OPT_LOWPOWER
                    HdlStmBlock: SEQ
                        list: body
                            HdlStmIf
                                HdlValueId: w_misalignment_err
                                HdlStmAssign: if_true
                                    HdlValueInt: 0
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlValueId: axi_wdata
                                            HdlValueId: axi_wstrb
                                list: elifs
                            HdlStmIf
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlValueId: o_err
                                        HdlValueId: i_cpu_reset
                                HdlStmAssign: if_true
                                    HdlValueInt: 0
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueId: next_wdata
                                                            HdlValueId: next_wstrb
                                                    HdlValueId: axi_wdata
                                            HdlValueId: axi_wstrb
                                list: elifs
                    list: elifs
    MOV tuple@@ to elifs
    tuple
        HdlOp: OR_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: M_AXI_WVALID
                        HdlValueId: M_AXI_WREADY
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: M_AXI_ARVALID
                        HdlValueId: M_AXI_ARREADY
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlOp: TERNARY
                        list: ops
                            HdlValueId: OPT_ALIGNMENT_ERR
                            HdlValueInt: 0
                            HdlValueId: next_wdata
                    HdlValueId: axi_wdata
                HdlStmAssign
                    HdlOp: TERNARY
                        list: ops
                            HdlValueId: OPT_ALIGNMENT_ERR
                            HdlValueInt: 0
                            HdlValueId: next_wstrb
                    HdlValueId: axi_wstrb
                HdlStmIf
                    HdlValueId: OPT_LOWPOWER
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlOp: CONCAT
                            list: ops
                                HdlValueId: next_wdata
                                HdlValueId: next_wstrb
                    list: elifs
    MOV tuple@@ to elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlValueId: OPT_LOWPOWER
                HdlValueId: M_AXI_WREADY
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: axi_wdata
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: axi_wstrb
    DEL HdlStmBlock@@SEQ from 
    DEL list@@elifs from body

MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: OPT_LOWPOWER
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlValueId: w_misalignment_err
                HdlStmAssign: if_true
                    HdlValueInt: 0
                    HdlOp: CONCAT
                        list: ops
                            HdlValueId: axi_wdata
                            HdlValueId: axi_wstrb
                list: elifs
            HdlStmIf
                HdlOp: OR_LOG
                    list: ops
                        HdlValueId: o_err
                        HdlValueId: i_cpu_reset
                HdlStmAssign: if_true
                    HdlValueInt: 0
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlValueId: next_wdata
                                            HdlValueId: next_wstrb
                                    HdlValueId: axi_wdata
                            HdlValueId: axi_wstrb
                list: elifs
    list: elifs

UPD HdlStmAssign@@if_true to if_true
    INS HdlOp@@CONCAT to if_true
    UPD HdlOp@@CONCAT to CONCAT
        INS list@@ops to CONCAT
        INS HdlValueId@@r_op to ops

UPD HdlStmAssign@@if_true to if_true
    INS HdlOp@@CONCAT to if_true
    UPD HdlOp@@CONCAT to CONCAT
        INS list@@ops to CONCAT
        INS HdlValueId@@r_op to ops

UPD HdlStmAssign@@if_true to if_true
    MOV HdlOp@@CONCAT to if_true
    HdlOp: CONCAT
        list: ops
            HdlValueId: axi_wdata
            HdlValueId: axi_wstrb

UPD HdlStmAssign@@if_true to if_true
    MOV HdlOp@@CONCAT to if_true
    HdlOp: CONCAT
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlValueId: next_wdata
                            HdlValueId: next_wstrb
                    HdlValueId: axi_wdata
            HdlValueId: axi_wstrb


CommitId: f631145fbafc918489563f6257516528da399d32
Updated AXILOPS, added lowpower option, some endianness fixes
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -650,8 +644,12 @@ module	axilops #(
 	// o_wreg
 	// {{{
 	always @(posedge i_clk)
-	if (i_stb)
+	if (OPT_LOWPOWER && (!S_AXI_ARESETN || i_cpu_reset || o_err || (i_stb && w_misalignment_err)))
+		o_wreg <= 0;
+	else if (i_stb && (!OPT_LOWPOWER || !i_op[0]))
 		o_wreg    <= i_oreg;
+	else if (OPT_LOWPOWER && (o_valid || o_err))
+		o_wreg <= 0;
 	// }}}
 
 	// endian_swapped_rdata

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

INS HdlStmIf@@body to 
HdlStmIf: body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: OR_LOG
                                list: ops
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: S_AXI_ARESETN
                                    HdlValueId: i_cpu_reset
                            HdlValueId: o_err
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: i_stb
                            HdlValueId: w_misalignment_err
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: o_wreg
    list: elifs
        tuple
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: i_stb
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: OPT_LOWPOWER
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_op
                                            HdlValueInt: 0
            HdlStmAssign
                HdlValueId: i_oreg
                HdlValueId: o_wreg
        tuple
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: OPT_LOWPOWER
                    HdlOp: OR_LOG
                        list: ops
                            HdlValueId: o_valid
                            HdlValueId: o_err
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_wreg

DEL HdlStmIf@@body from 
HdlStmIf: body
    HdlValueId: i_stb
    HdlStmAssign: if_true
        HdlValueId: i_oreg
        HdlValueId: o_wreg
    list: elifs

DEL HdlStmProcess@@ from objs


CommitId: f631145fbafc918489563f6257516528da399d32
Updated AXILOPS, added lowpower option, some endianness fixes
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -676,26 +674,26 @@ module	axilops #(
 	always @(*)
 	begin
 		if (misaligned_read && !OPT_ALIGNMENT_ERR)
-			pre_result <= { endian_swapped_rdata, last_result }
+			pre_result = { endian_swapped_rdata, last_result }
 					>> (8*r_op[AXILSB-1:0]);
 		else
-			pre_result <= { 32'h0, endian_swapped_rdata }
+			pre_result = { 32'h0, endian_swapped_rdata }
 						>> (8*r_op[AXILSB-1:0]);
 
 		if (OPT_LOWPOWER && (!M_AXI_RVALID || M_AXI_RRESP[1]))
-			pre_result <= 0;
+			pre_result = 0;
 	end
 
 	// }}}
 	// last_result, o_result
 	// {{{
 	always @(posedge i_clk)
-	if (OPT_LOWPOWER &&(!M_AXI_RREADY || !S_AXI_ARESETN))
+	if (OPT_LOWPOWER &&(!M_AXI_RREADY || !S_AXI_ARESETN || r_flushing || i_cpu_reset))
 		{ last_result, o_result } <= 0;
 	else if (M_AXI_RVALID)
 	begin
 		// {{{
-		if (!misaligned_response_pending && OPT_LOWPOWER)
+		if ((M_AXI_RRESP[1] || !misaligned_response_pending) && OPT_LOWPOWER)
 			last_result <= 0;
 		else
 			last_result <= endian_swapped_rdata;

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to body
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlValueId@@i_cpu_reset to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS HdlValueId@@r_flushing to ops
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@ to 
    INS HdlOp@@ASSIGN to 
    INS list@@elifs to 
    INS HdlOp@@ASSIGN to 
    UPD HdlOp@@ASSIGN to ASSIGN
        INS list@@ops to ASSIGN
        INS HdlValueId@@pre_result to ops
    UPD HdlOp@@ASSIGN to ASSIGN
        INS list@@ops to ASSIGN

UPD HdlStmIf@@ to 
    INS HdlOp@@ASSIGN to 
    UPD HdlOp@@ASSIGN to ASSIGN
        INS list@@ops to ASSIGN
        INS HdlValueId@@pre_result to ops

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@OPT_LOWPOWER to ops
        HdlValueId: OPT_LOWPOWER
    UPD HdlOp@@AND_LOG to OR_LOG
    MOV HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: M_AXI_RREADY
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: S_AXI_ARESETN
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: misaligned_response_pending
                        HdlValueId: OPT_LOWPOWER
                HdlStmAssign: if_true
                    HdlValueInt: 0
                    HdlValueId: last_result
                list: elifs
                HdlStmAssign: if_false
                    HdlValueId: endian_swapped_rdata
                    HdlValueId: last_result
            HdlStmIf
                HdlValueId: OPT_ALIGNMENT_ERR
                HdlStmAssign: if_true
                    HdlValueInt: 0
                    HdlValueId: last_result
                list: elifs
            HdlStmAssign
                HdlValueId: pre_result
                HdlValueId: o_result
            HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
                HdlStmCaseType: CASEZ
                HdlOp: INDEX
                    list: ops
                        HdlValueId: r_op
                        HdlOp: PART_SELECT_POST
                            list: ops
                                HdlValueId: AXILSB
                                HdlValueInt: 2
                list: cases
                    tuple
                        HdlValueInt: 10
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: o_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 16
                    tuple
                        HdlValueInt: 11
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: o_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 8
                HdlStmBlock: SEQ
                    list: body

UPD HdlStmAssign@@if_true to if_true
    MOV HdlOp@@SRL to if_true
    HdlOp: SRL
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlValueId: endian_swapped_rdata
                    HdlValueId: last_result
            HdlOp: MUL
                list: ops
                    HdlValueInt: 8
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: r_op
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AXILSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0
    MOV HdlValueId@@pre_result to if_true
    HdlValueId: pre_result

UPD HdlStmAssign@@if_false to if_false
    MOV HdlOp@@SRL to if_false
    HdlOp: SRL
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlValueInt: 0
                    HdlValueId: endian_swapped_rdata
            HdlOp: MUL
                list: ops
                    HdlValueInt: 8
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: r_op
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AXILSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0
    DEL HdlValueId@@pre_result from if_false

UPD HdlStmAssign@@if_true to if_true
    MOV HdlValueInt@@0 to if_true
    HdlValueInt: 0
    DEL HdlValueId@@pre_result from if_true

MOV HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: misaligned_response_pending
            HdlValueId: OPT_LOWPOWER
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: last_result
    list: elifs
    HdlStmAssign: if_false
        HdlValueId: endian_swapped_rdata
        HdlValueId: last_result

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to OR_LOG
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: misaligned_response_pending
            HdlValueId: OPT_LOWPOWER
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@OPT_LOWPOWER to ops
        HdlValueId: OPT_LOWPOWER

DEL HdlStmAssign@@if_true from 

UPD HdlStmIf@@ to 
    DEL list@@elifs from 

DEL HdlStmAssign@@if_false from 

DEL HdlStmAssign@@if_true from 


CommitId: f631145fbafc918489563f6257516528da399d32
Updated AXILOPS, added lowpower option, some endianness fixes
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -705,11 +703,28 @@ module	axilops #(
 
 		o_result <= pre_result;
 
-		casez(r_op[AXILSB +: 2])
-		2'b10: o_result[31:16] <= 0;
-		2'b11: o_result[31: 8] <= 0;
-		default: begin end
-		endcase
+		if (OPT_SIGN_EXTEND)
+		begin
+			// {{{
+			// Optionally sign extend the return result.
+			casez(r_op[AXILSB +: 2])
+			2'b10: o_result[31:16] <= {(16){pre_result[15]}};
+			2'b11: o_result[31: 8] <= {(24){pre_result[7]}};
+			default: begin end
+			endcase
+			// }}}
+		end else begin
+			// Fill unused return bits with zeros
+			casez(r_op[AXILSB +: 2])
+			2'b10: o_result[31:16] <= 0;
+			2'b11: o_result[31: 8] <= 0;
+			default: begin end
+			endcase
+		end
+
+		if (OPT_LOWPOWER && (M_AXI_RRESP[1] || pending_err
+					|| misaligned_response_pending))
+			o_result <= 0;
 		// }}}
 	end
 	// }}}

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to body
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlValueId@@i_cpu_reset to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS HdlValueId@@r_flushing to ops
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@OPT_LOWPOWER to ops
        HdlValueId: OPT_LOWPOWER
    UPD HdlOp@@AND_LOG to OR_LOG
    MOV HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: M_AXI_RREADY
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: S_AXI_ARESETN
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: misaligned_response_pending
                        HdlValueId: OPT_LOWPOWER
                HdlStmAssign: if_true
                    HdlValueInt: 0
                    HdlValueId: last_result
                list: elifs
                HdlStmAssign: if_false
                    HdlValueId: endian_swapped_rdata
                    HdlValueId: last_result
            HdlStmIf
                HdlValueId: OPT_ALIGNMENT_ERR
                HdlStmAssign: if_true
                    HdlValueInt: 0
                    HdlValueId: last_result
                list: elifs
            HdlStmAssign
                HdlValueId: pre_result
                HdlValueId: o_result
            HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
                HdlStmCaseType: CASEZ
                HdlOp: INDEX
                    list: ops
                        HdlValueId: r_op
                        HdlOp: PART_SELECT_POST
                            list: ops
                                HdlValueId: AXILSB
                                HdlValueInt: 2
                list: cases
                    tuple
                        HdlValueInt: 10
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: o_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 16
                    tuple
                        HdlValueInt: 11
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: o_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 8
                HdlStmBlock: SEQ
                    list: body

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: pre_result
    HdlValueId: o_result

INS HdlStmIf@@ to body

INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: M_AXI_RRESP
                                    HdlValueInt: 1
                            HdlValueId: pending_err
                    HdlValueId: misaligned_response_pending
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: o_result
    list: elifs

UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            INS HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: M_AXI_RRESP
                    HdlValueInt: 1


CommitId: c63bc58ecdd71cf2e584190854c2ebf53d45be2b
Debug writes not restricted to full word writes only
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -461,7 +462,7 @@ module	zipaxi #(
 	// {{{
 	initial	dbg_read_valid = 0;
 	always @(posedge S_AXI_ACLK)
-	if (!S_AXI_ARESETN)
+	if (!S_AXI_ARESETN || !OPT_DBGPORT)
 		dbg_read_valid <= 0;
 	else
 		dbg_read_valid <= dbg_read_ready

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: OPT_DBGPORT

UPD HdlStmIf@@body to body
    MOV HdlOp@@NEG_LOG to body
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: S_AXI_ARESETN


CommitId: c63bc58ecdd71cf2e584190854c2ebf53d45be2b
Debug writes not restricted to full word writes only
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -489,12 +490,13 @@ module	zipaxi #(
 	else if (!S_DBG_RVALID || S_DBG_RREADY)
 	begin
 		// {{{
-		if (dbg_read_valid)
+		if (OPT_DBGPORT && dbg_read_valid)
 			S_DBG_RDATA <= dbg_read_data;
 		else
 			S_DBG_RDATA <= cpu_status;
 
-		if (OPT_LOWPOWER && !dbg_read_valid && !dbg_read_ready)
+		if (OPT_LOWPOWER && (!OPT_DBGPORT || !dbg_read_valid)
+						&& !dbg_read_ready)
 			S_DBG_RDATA <= 0;
 		// }}}
 	end

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@OPT_DBGPORT to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlValueId@@OPT_LOWPOWER to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS HdlOp@@NEG_LOG to ops
                UPD HdlOp@@NEG_LOG to NEG_LOG
                    INS list@@ops to NEG_LOG

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to OR_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: OPT_LOWPOWER
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: dbg_read_valid
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@OPT_LOWPOWER to OPT_DBGPORT
            MOV HdlValueId@@OPT_LOWPOWER to ops
            HdlValueId: OPT_LOWPOWER


CommitId: c63bc58ecdd71cf2e584190854c2ebf53d45be2b
Debug writes not restricted to full word writes only
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -511,7 +513,7 @@ module	zipaxi #(
 	////////////////////////////////////////////////////////////////////////
 	//
 	//
-	assign	dbg_cpu_write = dbg_write_ready && awskd_addr[5] == DBG_ADDR_CPU;
+	assign	dbg_cpu_write = OPT_DBGPORT && dbg_write_ready && awskd_addr[5] == DBG_ADDR_CPU;
 	assign	dbg_cmd_write = dbg_write_ready && awskd_addr[5] == DBG_ADDR_CTRL;
 	assign	dbg_cmd_data = wskd_data;
 	assign	dbg_cmd_strb = wskd_strb;

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlValueId@@OPT_DBGPORT to ops


CommitId: 3157d16c3da2386e2ed00c4915a24141831cb7a8
AXILFETCH: Fixed (broken) s/input reg/input wire/
--- a/rtl/core/axilfetch.v
+++ b/rtl/core/axilfetch.v
@@ -72,10 +72,10 @@ module	axilfetch #(
 		output	reg [C_AXI_ADDR_WIDTH-1:0]	M_AXI_ARADDR,
 		output	wire	[2:0]			M_AXI_ARPROT,
 		//
-		input	reg				M_AXI_RVALID,
+		input	wire				M_AXI_RVALID,
 		output	wire				M_AXI_RREADY,
-		input	reg [C_AXI_DATA_WIDTH-1:0]	M_AXI_RDATA,
-		input	reg [1:0]			M_AXI_RRESP
+		input	wire [C_AXI_DATA_WIDTH-1:0]	M_AXI_RDATA,
+		input	wire [1:0]			M_AXI_RRESP
 		// }}}
 		// }}}
 	);
ParseResult:
UPD HdlIdDef@@M_AXI_RDATA to M_AXI_RDATA
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@reg to wire

UPD HdlIdDef@@M_AXI_RRESP to M_AXI_RRESP
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@reg to wire

UPD HdlIdDef@@M_AXI_RVALID to M_AXI_RVALID
    DEL HdlOp@@PARAMETRIZATION from M_AXI_RVALID
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg


CommitId: 3f5a7b46813d37389a4072b143956008104e6a6b
Updated for AXI exclusive writes
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -44,8 +44,8 @@
 // }}}
 module	zipcore #(
 		// {{{
-		parameter [ADDRESS_WIDTH+1:0] RESET_ADDRESS=32'h010_0000,
 		parameter	ADDRESS_WIDTH=30,	// 32-b word addr width
+		parameter [ADDRESS_WIDTH+1:0] RESET_ADDRESS=32'h010_0000,
 		parameter	IMPLEMENT_MPY = 0,
 		parameter [0:0]	IMPLEMENT_SHIFTS = 1,
 		parameter [0:0]	IMPLEMENT_DIVIDE = 1,

ParseResult:
MOV HdlIdDef@@RESET_ADDRESS to params
HdlIdDef: RESET_ADDRESS
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: ADDRESS_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 0100000
    HdlDirection: INTERNAL


CommitId: 3f5a7b46813d37389a4072b143956008104e6a6b
Updated for AXI exclusive writes
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -61,6 +61,8 @@ module	zipcore #(
 		parameter	[0:0]	IMPLEMENT_LOCK=1,
 		parameter		OPT_LGDCACHE = 10,
 		parameter	[0:0]	OPT_NO_USERMODE = 1'b0,
+		parameter	[0:0]	OPT_LOWPOWER = 1'b0,
+		parameter	[0:0]	OPT_GATE_CLOCK = 1'b1,
 
 		localparam	AW=ADDRESS_WIDTH
 `ifdef	FORMAL

ParseResult:
INS HdlIdDef@@OPT_LOWPOWER to params
HdlIdDef: OPT_LOWPOWER
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@OPT_GATE_CLOCK to params
HdlIdDef: OPT_GATE_CLOCK
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL


CommitId: 3f5a7b46813d37389a4072b143956008104e6a6b
Updated for AXI exclusive writes
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -70,6 +72,7 @@ module	zipcore #(
 	) (
 		// {{{
 		input	wire		i_clk, i_reset, i_interrupt,
+		output	wire		o_clken,
 		// Debug interface
 		// {{{
 		input	wire		i_halt, i_clear_cache,

ParseResult:
INS HdlIdDef@@o_clken to ports
HdlIdDef: o_clken
    HdlDirection: OUT


CommitId: 3f5a7b46813d37389a4072b143956008104e6a6b
Updated for AXI exclusive writes
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -101,6 +104,7 @@ module	zipcore #(
 		output	wire [2:0]	o_mem_op,
 		output	wire [31:0]	o_mem_addr,
 		output	wire [31:0]	o_mem_data,
+		output	wire [(AW+1):0]	o_mem_lock_pc,
 		output	wire [4:0]	o_mem_reg,
 		input	wire 		i_mem_busy, i_mem_rdbusy,
 					i_mem_pipe_stalled, i_mem_valid,

ParseResult:
INS HdlIdDef@@o_mem_lock_pc to ports
HdlIdDef: o_mem_lock_pc
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT


CommitId: 3f5a7b46813d37389a4072b143956008104e6a6b
Updated for AXI exclusive writes
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -209,11 +213,8 @@ module	zipcore #(
 	//
 	//
 	// {{{
-	reg		op_valid /* verilator public_flat */,
-			op_valid_mem, op_valid_alu;
-	reg		op_valid_div, op_valid_fpu;
-	wire		op_stall, dcd_ce, dcd_phase;
 	wire	[3:0]	dcd_opn;
+	wire		dcd_ce, dcd_phase;
 	wire	[4:0]	dcd_A, dcd_B, dcd_R, dcd_preA, dcd_preB;
 	wire		dcd_Acc, dcd_Bcc, dcd_Apc, dcd_Bpc, dcd_Rcc, dcd_Rpc;
 	wire	[3:0]	dcd_F;

ParseResult:
MOV HdlIdDef@@dcd_opn to objs
HdlIdDef: dcd_opn
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 3
                    HdlValueInt: 0
    HdlDirection: INTERNAL

MOV HdlIdDef@@op_valid_fpu to objs
HdlIdDef: op_valid_fpu
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

MOV HdlIdDef@@op_stall to objs
HdlIdDef: op_stall
    HdlDirection: INTERNAL


CommitId: 3f5a7b46813d37389a4072b143956008104e6a6b
Updated for AXI exclusive writes
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -680,11 +685,13 @@ module	zipcore #(
 	////////////////////////////////////////////////////////////////////////
 	//
 	//
+
+	// op_pipe
+	// {{{
 	generate if (OPT_PIPELINED_BUS_ACCESS)
 	begin : GEN_OP_PIPE
 		reg		r_op_pipe;
 
-		initial	r_op_pipe = 1'b0;
 		// To be a pipeable operation, there must be
 		//	two valid adjacent instructions
 		//	Both must be memory instructions

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: OPT_LOWPOWER
                    HdlValueId: i_reset

UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlValueId@@clear_pipeline to ops
        HdlValueId: clear_pipeline


CommitId: 3f5a7b46813d37389a4072b143956008104e6a6b
Updated for AXI exclusive writes
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -695,8 +702,9 @@ module	zipcore #(
 		//
 		// However ... we need to know this before this clock, hence
 		// this is calculated in the instruction decoder.
+		initial	r_op_pipe = 1'b0;
 		always @(posedge i_clk)
-		if ((clear_pipeline)||(i_halt))
+		if ((OPT_LOWPOWER && i_reset)||(clear_pipeline)||(i_halt))
 			r_op_pipe <= 1'b0;
 		else if (op_ce)
 			r_op_pipe <= (dcd_pipe)&&(op_valid_mem);

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: OPT_LOWPOWER
                    HdlValueId: i_reset

UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlValueId@@clear_pipeline to ops
        HdlValueId: clear_pipeline


CommitId: 3f5a7b46813d37389a4072b143956008104e6a6b
Updated for AXI exclusive writes
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -828,6 +845,9 @@ module	zipcore #(
 	// r_op_Av -- The registered value of the op A register
 	// {{{
 	reg [2:0]	avsrc;
+	reg	[2:0]	bvsrc;
+	reg	[1:0]	bisrc;
+
 	always @(*)
 	begin
 		avsrc = 3'b000;

ParseResult:
MOV HdlIdDef@@bvsrc to objs
HdlIdDef: bvsrc
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlDirection: INTERNAL

MOV HdlIdDef@@bisrc to objs
HdlIdDef: bisrc
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 3f5a7b46813d37389a4072b143956008104e6a6b
Updated for AXI exclusive writes
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1380,7 +1399,7 @@ module	zipcore #(
 			div_flags);
 
 	end else begin
-
+		// {{{
 		assign	div_error = 1'b0; // Can't be high unless div_valid
 		assign	div_busy  = 1'b0;
 		assign	div_valid = 1'b0;

ParseResult:
UPD HdlStmProcess@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ


CommitId: 3f5a7b46813d37389a4072b143956008104e6a6b
Updated for AXI exclusive writes
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2490,12 +2605,13 @@ module	zipcore #(
 			r_clear_dcache <=  wr_spreg_vl[CPU_CLRDCACHE_BIT];
 		else
 			r_clear_dcache <= 1'b0;
+
+		assign	o_clear_dcache = r_clear_dcache;
 	end else begin : NOCLEAR_DCACHE
-		always @(*)
-			r_clear_dcache = 1'b0;
-	end endgenerate
 
-	assign	o_clear_dcache = r_clear_dcache;
+		assign	o_clear_dcache = 1'b0;
+
+	end endgenerate
 	// }}}
 
 	// new_pc : does the Prefetch need to clear the pipeline and start over?

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlValueId@@o_clear_dcache to 


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/bench/formal/fmem.v
+++ b/bench/formal/fmem.v
@@ -474,11 +474,22 @@ module	fmem #(
 	// track the last register that will be returned to the CPU.
 	always @(posedge i_clk)
 	if (i_stb && !i_pipe_stalled)
+	begin
 		f_last_reg <= i_oreg;
+		if (IMPLEMENT_LOCK && f_check_axi_lock && i_op[0] && i_lock)
+			f_last_reg[3:0] <= 4'hf;
+	end
 
 	always @(*)
 	if (f_outstanding == 1 && i_valid && !f_axi_write_cycle)
 		`CPU_ASSUME(f_last_reg == i_wreg);
+
+	always @(*)
+	if (f_axi_write_cycle)
+	begin
+		`CPU_ASSUME(f_last_reg[3:0] == 4'hf);
+		assert(f_outstanding == 1);
+	end
 	// }}}
 
 	//

ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlAll
    HdlStmIf: body
        HdlValueId: f_axi_write_cycle
        HdlStmBlock: SEQ
            list: body
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: f_last_reg
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueInt: 0
                                HdlValueInt: f
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: EQ
                            list: ops
                                HdlValueId: f_outstanding
                                HdlValueInt: 1
        list: elifs

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueId: i_oreg
                HdlValueId: f_last_reg
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: IMPLEMENT_LOCK
                                        HdlValueId: f_check_axi_lock
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 0
                        HdlValueId: i_lock
                HdlStmAssign: if_true
                    HdlValueInt: f
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: f_last_reg
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 3
                                    HdlValueInt: 0
                list: elifs
    INS list@@elifs to body


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/bench/formal/fmem.v
+++ b/bench/formal/fmem.v
@@ -530,9 +541,14 @@ module	fmem #(
 	// registers (either CC, or PC), it will not issue another read request
 	// until this request has completed.
 	always @(*)
-	if (f_pc)
+	if (f_pc && f_read_cycle)
 		`CPU_ASSERT(!i_stb);
 
+	always @(*)
+	if (f_pc && !f_read_cycle && f_axi_write_cycle
+			&& f_outstanding > ((i_done || i_err) ? 1:0))
+		`CPU_ASSUME(i_pipe_stalled);
+
 	always @(*)
 	if (f_last_reg[3:1] != 3'h7)
 	begin

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlAll
    HdlStmIf: body
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: f_pc
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: f_read_cycle
                        HdlValueId: f_axi_write_cycle
                HdlOp: GT
                    list: ops
                        HdlValueId: f_outstanding
                        HdlOp: TERNARY
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlValueId: i_done
                                        HdlValueId: i_err
                                HdlValueInt: 1
                                HdlValueInt: 0
        HdlOp: CALL
            list: ops
                HdlValueId: assert
                HdlValueId: i_pipe_stalled
        list: elifs

UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to body
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@f_read_cycle to ops

UPD HdlStmIf@@body to body
    MOV HdlValueId@@f_pc to body
    HdlValueId: f_pc


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/bench/formal/fmem.v
+++ b/bench/formal/fmem.v
@@ -587,7 +604,7 @@ module	fmem #(
 	//
 
 	always @(*)
-	if (!OPT_AXI_LOCK || !IMPLEMENT_LOCK)
+	if (OPT_AXI_LOCK == 0 || !IMPLEMENT_LOCK)
 	begin
 		assume(f_check_axi_lock == 1'b0);
 	end else if (OPT_AXI_LOCK == 1)
ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@NEG_LOG to EQ


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -981,11 +983,13 @@ module	axidcache #(
 	always @(*)
 	begin
 		rev_addr = i_addr;
+		/*
 		if (SWAP_WSTRB && C_AXI_DATA_WIDTH != 32)
 		begin
 			rev_addr[AXILSB-1:0] = ~i_addr[AXILSB-1:0];
 			rev_addr[1:0] = i_addr[1:0];
 		end
+		*/
 	end
 
 	always @(posedge S_AXI_ACLK)
ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: rev_addr
                HdlValueId: i_addr
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

UPD HdlStmProcess@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

DEL HdlStmIf@@ from body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlValueId: SWAP_WSTRB
            HdlOp: NE
                list: ops
                    HdlValueId: C_AXI_DATA_WIDTH
                    HdlValueInt: 32
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: rev_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AXILSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0
                    HdlOp: NEG
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_addr
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: AXILSB
                                                    HdlValueInt: 1
                                            HdlValueInt: 0
            HdlOp: ASSIGN
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: rev_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 1
                                    HdlValueInt: 0
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 1
                                    HdlValueInt: 0
    list: elifs

DEL HdlStmProcess@@ from objs


CommitId: 294c989b2fa5acddd6a35d76ffd7bba760b1e7e1
memops now creates a memory fault (bus err) on an unaligned access
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -55,7 +55,7 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	parameter	ADDRESS_WIDTH=30;
 	parameter [0:0]	IMPLEMENT_LOCK=1'b1,
 			WITH_LOCAL_BUS=1'b1,
-			OPT_ALIGNMENT_ERR=1'b0,
+			OPT_ALIGNMENT_ERR=1'b1,
 			OPT_ZERO_ON_IDLE=1'b0;
 	parameter [0:0]	F_OPT_CLK2FFLOGIC = 1'b0;
 	localparam	AW=ADDRESS_WIDTH;

ParseResult:
UPD HdlIdDef@@OPT_ALIGNMENT_ERR to OPT_ALIGNMENT_ERR
    UPD HdlValueInt@@0 to 1


CommitId: 294c989b2fa5acddd6a35d76ffd7bba760b1e7e1
memops now creates a memory fault (bus err) on an unaligned access
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -213,24 +224,33 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 
 	initial	o_valid = 1'b0;
 	always @(posedge i_clk)
-		o_valid <= (!i_reset)&&((o_wb_cyc_gbl)||(o_wb_cyc_lcl))
-				&&(i_wb_ack)&&(!o_wb_we);
+	if (i_reset)
+		o_valid <= 1'b0;
+	else
+		o_valid <= (((o_wb_cyc_gbl)||(o_wb_cyc_lcl))
+				&&(i_wb_ack)&&(!o_wb_we));
 	initial	o_err = 1'b0;
 	always @(posedge i_clk)
-		if (i_reset)
-			o_err <= 1'b0;
-		else if ((o_wb_cyc_gbl)||(o_wb_cyc_lcl))
-			o_err <= i_wb_err;
-		else
-			o_err <= ((i_stb)&&(misaligned));
+	if (i_reset)
+		o_err <= 1'b0;
+	else if (i_stb)
+		o_err <= misaligned;
+	else if ((o_wb_cyc_gbl)||(o_wb_cyc_lcl))
+		o_err <= i_wb_err;
+	else
+		o_err <= 1'b0;
 
 	assign	o_busy = (r_wb_cyc_gbl)||(r_wb_cyc_lcl);
 
 	always @(posedge i_clk)
-		if (i_stb)
+	if (i_reset)
+		o_wreg <= 0;
+	else if (i_stb)
 			o_wreg    <= i_oreg;
 	always @(posedge i_clk)
-	if ((OPT_ZERO_ON_IDLE)&&(!i_wb_ack))
+	if (i_reset)
+		o_result <= 0;
+	else if ((OPT_ZERO_ON_IDLE)&&(!i_wb_ack))
 		o_result <= 32'h0;
 	else begin
 		casez(r_op)

ParseResult:
UPD HdlStmProcess@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: OR_LOG
                    list: ops
                        HdlValueId: i_reset
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: i_wb_err
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlValueId: r_wb_cyc_gbl
                                        HdlValueId: r_wb_cyc_lcl
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: lock_gbl
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: lock_lcl
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_lock
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlValueId: r_wb_cyc_gbl
                                            HdlValueId: lock_gbl
                            HdlValueId: lock_gbl
                        HdlStmAssign
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_lock
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlValueId: r_wb_cyc_lcl
                                            HdlValueId: lock_lcl
                            HdlValueId: lock_lcl

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS tuple@@ to elifs

UPD HdlStmIf@@body to body
    INS tuple@@ to elifs
    tuple
        HdlValueId: i_stb
        HdlStmAssign
            HdlValueId: misaligned
            HdlValueId: o_err

UPD HdlStmAssign@@if_false to if_false
    INS HdlValueInt@@0 to if_false

UPD HdlStmAssign@@if_true to if_true
    INS HdlValueInt@@0 to if_true

UPD HdlStmIf@@body to body
    INS tuple@@ to elifs
    tuple
        HdlValueId: i_stb
        HdlStmAssign
            HdlValueId: i_oreg
            HdlValueId: o_wreg

MOV HdlIdDef@@lock_gbl to body
HdlIdDef: lock_gbl
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

MOV HdlIdDef@@lock_lcl to body
HdlIdDef: lock_lcl
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

MOV HdlStmProcess@@ to body
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: lock_gbl
                    HdlValueInt: 0
            HdlStmWait:
                list: val

MOV HdlStmProcess@@ to body
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: lock_lcl
                    HdlValueInt: 0
            HdlStmWait:
                list: val

MOV HdlStmProcess@@ to body
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: OR_LOG
                    list: ops
                        HdlValueId: i_reset
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: i_wb_err
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlValueId: r_wb_cyc_gbl
                                        HdlValueId: r_wb_cyc_lcl
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: lock_gbl
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: lock_lcl
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_lock
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlValueId: r_wb_cyc_gbl
                                            HdlValueId: lock_gbl
                            HdlValueId: lock_gbl
                        HdlStmAssign
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_lock
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlValueId: r_wb_cyc_lcl
                                            HdlValueId: lock_lcl
                            HdlValueId: lock_lcl

UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_ZERO_ON_IDLE
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: i_wb_ack
    DEL list@@elifs from body

INS HdlStmAssign@@ to 
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: o_result

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 


CommitId: 294c989b2fa5acddd6a35d76ffd7bba760b1e7e1
memops now creates a memory fault (bus err) on an unaligned access
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -254,16 +274,18 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 		initial	lock_lcl = 1'b0;
 
 		always @(posedge i_clk)
+		if (i_reset)
 		begin
-			if ((i_reset)||((i_wb_err)&&
-					((r_wb_cyc_gbl)||(r_wb_cyc_lcl))))
-			begin
-				lock_gbl <= 1'b0;
-				lock_lcl <= 1'b0;
-			end else begin
-				lock_gbl <= (i_lock)&&((r_wb_cyc_gbl)||(lock_gbl));
-				lock_lcl <= (i_lock)&&((r_wb_cyc_lcl)||(lock_lcl));
-			end
+			lock_gbl <= 1'b0;
+			lock_lcl <= 1'b0;
+		end else if (((i_wb_err)&&((r_wb_cyc_gbl)||(r_wb_cyc_lcl)))
+				||((i_stb)&&(misaligned)))
+		begin
+			lock_gbl <= 1'b0;
+			lock_lcl <= 1'b0;
+		end else begin
+			lock_gbl <= (i_lock)&&((r_wb_cyc_gbl)||(lock_gbl));
+			lock_lcl <= (i_lock)&&((r_wb_cyc_lcl)||(lock_lcl));
 		end
 
 		assign	o_wb_cyc_gbl = (r_wb_cyc_gbl)||(lock_gbl);

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS tuple@@ to elifs
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: lock_gbl
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: lock_lcl

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -193,7 +193,7 @@ module	axilops #(
 	reg	[DW/8-1:0]		axi_wstrb;
 	reg	[AXILSB-1:0]		swapaddr;
 	wire	[DW-1:0]		endian_swapped_rdata;
-	reg	[2*DW-1:0]		pre_result;
+	reg	[2*DW-1:0]		pre_result, wide_return;
 
 	// }}}
 

ParseResult:
INS HdlIdDef@@wide_return to objs
HdlIdDef: wide_return
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: MUL
                                list: ops
                                    HdlValueInt: 2
                                    HdlValueId: DW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -304,11 +304,16 @@ module	axilops #(
 			M_AXI_AWADDR <= 0;
 
 		if (SWAP_ENDIANNESS || SWAP_WSTRB)
+		begin
 			// When adjusting endianness, reads (or writes) are
 			// always full words.  This is important since the
 			// the bytes at issues may (or may not) be in their
 			// expected locations
-			M_AXI_AWADDR[AXILSB-1:0] <= 0;
+			if (OPT_ALIGNMENT_ERR)
+				M_AXI_AWADDR[AXILSB-1:0] <= 0;
+			else
+				M_AXI_AWADDR[1:0] <= 0;
+		end
 		// }}}
 	end else if ((M_AXI_AWVALID && M_AXI_AWREADY)
 			||(M_AXI_ARVALID && M_AXI_ARREADY))

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_ALIGNMENT_ERR to 

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: M_AXI_AWADDR
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AXILSB
                            HdlValueInt: 1
                    HdlValueInt: 0

UPD HdlStmIf@@ to 
    MOV list@@elifs to 
    list: elifs

INS HdlStmAssign@@if_false to 
HdlStmAssign: if_false
    HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: M_AXI_AWADDR
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -48,13 +48,15 @@
 module	memops #(
 		// {{{
 		parameter	ADDRESS_WIDTH=30,
-		parameter [0:0]	IMPLEMENT_LOCK=1'b1,
+		parameter [0:0]	OPT_LOCK=1'b1,
 				WITH_LOCAL_BUS=1'b1,
 				OPT_ALIGNMENT_ERR=1'b1,
 				OPT_LOWPOWER=1'b0,
 				OPT_LITTLE_ENDIAN = 1'b0,
-		localparam	AW=ADDRESS_WIDTH,
-		parameter	F_LGDEPTH = 2
+		localparam	AW=ADDRESS_WIDTH
+`ifdef	FORMAL
+		, parameter	F_LGDEPTH = 2
+`endif
 		// }}}
 	) (
 		// {{{

ParseResult:
UPD HdlIdDef@@IMPLEMENT_LOCK to OPT_LOCK

DEL HdlIdDef@@F_LGDEPTH from params
HdlIdDef: F_LGDEPTH
    HdlValueInt: 2
    HdlDirection: INTERNAL


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -321,7 +323,7 @@ module	memops #(
 	// lock_gbl and lock_lcl
 	// {{{
 	generate
-	if (IMPLEMENT_LOCK != 0)
+	if (OPT_LOCK)
 	begin
 		// {{{
 		initial	lock_gbl = 1'b0;

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@NE to NE
        UPD HdlValueId@@IMPLEMENT_LOCK to OPT_LOCK
        MOV HdlValueId@@IMPLEMENT_LOCK to ops
        HdlValueId: IMPLEMENT_LOCK
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from NE
    DEL HdlOp@@NE from 


CommitId: 8f422d3cfc5d211f6da5b2b3ccea4ec56bf83ed1
PFCACHE: Fixed unused parameter, CACHELEN
--- a/rtl/core/pfcache.v
+++ b/rtl/core/pfcache.v
@@ -128,7 +127,7 @@ module	pfcache #(
 
 
 	wire			r_v;
-	reg	[(BUSW-1):0]	cache	[0:((1<<CW)-1)];
+	reg	[(BUSW-1):0]	cache	[0:CACHELEN-1];
 	reg	[(AW-CW-1):0]	cache_tags	[0:((1<<(LGLINES))-1)];
 	reg	[((1<<(LGLINES))-1):0]	valid_mask;
 
ParseResult:
UPD HdlIdDef@@cache to cache
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlOp@@SLL to SLL
                    UPD HdlValueId@@CW to CACHELEN
                    MOV HdlValueId@@CW to ops
                    HdlValueId: CW
                    DEL HdlValueInt@@1 from ops
                    DEL list@@ops from SLL
                DEL HdlOp@@SLL from ops


CommitId: c63bc58ecdd71cf2e584190854c2ebf53d45be2b
Debug writes not restricted to full word writes only
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -418,7 +419,7 @@ module	zipaxil #(
 	// {{{
 	initial	dbg_read_valid = 0;
 	always @(posedge S_AXI_ACLK)
-	if (!S_AXI_ARESETN)
+	if (!S_AXI_ARESETN || !OPT_DBGPORT)
 		dbg_read_valid <= 0;
 	else
 		dbg_read_valid <= dbg_read_ready

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: OPT_DBGPORT

UPD HdlStmIf@@body to body
    MOV HdlOp@@NEG_LOG to body
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: S_AXI_ARESETN


CommitId: c63bc58ecdd71cf2e584190854c2ebf53d45be2b
Debug writes not restricted to full word writes only
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -446,12 +447,13 @@ module	zipaxil #(
 	else if (!S_DBG_RVALID || S_DBG_RREADY)
 	begin
 		// {{{
-		if (dbg_read_valid)
+		if (OPT_DBGPORT && dbg_read_valid)
 			S_DBG_RDATA <= dbg_read_data;
 		else
 			S_DBG_RDATA <= cpu_status;
 
-		if (OPT_LOWPOWER && !dbg_read_valid && !dbg_read_ready)
+		if (OPT_LOWPOWER && (!OPT_DBGPORT || !dbg_read_valid)
+						&& !dbg_read_ready)
 			S_DBG_RDATA <= 0;
 		// }}}
 	end

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@OPT_DBGPORT to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlValueId@@OPT_LOWPOWER to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS HdlOp@@NEG_LOG to ops
                UPD HdlOp@@NEG_LOG to NEG_LOG
                    INS list@@ops to NEG_LOG

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to OR_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: OPT_LOWPOWER
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: dbg_read_valid
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@OPT_LOWPOWER to OPT_DBGPORT
            MOV HdlValueId@@OPT_LOWPOWER to ops
            HdlValueId: OPT_LOWPOWER


CommitId: c63bc58ecdd71cf2e584190854c2ebf53d45be2b
Debug writes not restricted to full word writes only
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -468,7 +470,7 @@ module	zipaxil #(
 	////////////////////////////////////////////////////////////////////////
 	//
 	//
-	assign	dbg_cpu_write = dbg_write_ready && awskd_addr[5] == DBG_ADDR_CPU;
+	assign	dbg_cpu_write = OPT_DBGPORT && dbg_write_ready && awskd_addr[5] == DBG_ADDR_CPU;
 	assign	dbg_cmd_write = dbg_write_ready && awskd_addr[5] == DBG_ADDR_CTRL;
 	assign	dbg_cmd_data = wskd_data;
 	assign	dbg_cmd_strb = wskd_strb;

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlValueId@@OPT_DBGPORT to ops


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -215,6 +215,7 @@ module	axidcache #(
 	reg	[AW-1:0]	axi_awaddr;
 	reg	[DW-1:0]	axi_wdata;
 	reg	[DW/8-1:0]	axi_wstrb;
+	wire	[DW-1:0]	axi_rdata;
 
 	reg			axi_arvalid;
 	reg	[AW-1:0]	axi_araddr;

ParseResult:
INS HdlIdDef@@axi_rdata to objs
HdlIdDef: axi_rdata
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -256,16 +257,6 @@ module	axidcache #(
 	always @(*)
 	begin
 		misaligned = checklsb(i_op[2:1], i_addr[AXILSB-1:0]);
-		/*
-		mislsb = { 1'b0, i_addr[AXILSB-1:0] };
-		case(i_op[2:1])
-		2'b10:		mislsb = mislsb + 1;
-		2'b11:		mislsb = mislsb + 0;
-		default:	mislsb = mislsb + 3;
-		endcase
-
-		misaligned = mislsb[AXILSB];
-		*/
 	end
 
 	function checklsb;

ParseResult:
UPD HdlFunctionDef@@checklsb to checklsb
    INS HdlOp@@ASSIGN to body
    HdlOp: ASSIGN
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: mislsbfn
                    HdlValueInt: 2
            HdlValueInt: 0
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@INDEX to INDEX
            INS HdlValueInt@@2 to ops

UPD HdlFunctionDef@@checklsb to checklsb
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@INDEX to INDEX
            DEL HdlValueId@@AXILSB from ops


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -275,13 +266,15 @@ module	axidcache #(
 		reg [AXILSB:0]	mislsbfn;
 
 		mislsbfn = { 1'b0, addr };
+		mislsbfn[2] = 0;
 		case(op[1:0])
 		2'b10:		mislsbfn = mislsbfn + 1;
 		2'b11:		mislsbfn = mislsbfn + 0;
 		default:	mislsbfn = mislsbfn + 3;
 		endcase
 
-		checklsb = mislsbfn[AXILSB];
+		// checklsb = mislsbfn[AXILSB];
+		checklsb = mislsbfn[2];
 	endfunction
 	// }}}
 

ParseResult:
UPD HdlFunctionDef@@checklsb to checklsb
    INS HdlOp@@ASSIGN to body
    HdlOp: ASSIGN
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: mislsbfn
                    HdlValueInt: 2
            HdlValueInt: 0
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@INDEX to INDEX
            INS HdlValueInt@@2 to ops

UPD HdlFunctionDef@@checklsb to checklsb
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@INDEX to INDEX
            DEL HdlValueId@@AXILSB from ops


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -593,6 +586,7 @@ module	axidcache #(
 
 			if (SWAP_WSTRB)
 			begin
+				axi_araddr[AXILSB-1:0] <= ~i_addr[AXILSB-1:0];
 				axi_araddr[1:0] <= 0;
 				axi_arsize <= 3'b010;
 			end

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: NEG
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlOp: DOWNTO
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: AXILSB
                                    HdlValueInt: 1
                            HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: axi_araddr
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AXILSB
                            HdlValueInt: 1
                    HdlValueInt: 0


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -648,9 +642,12 @@ module	axidcache #(
 		axi_awaddr <= i_addr;
 
 		if (SWAP_WSTRB)
+		begin
+			// axi_awaddr[AXILSB-1:0] <= ~i_addr[AXILSB-1:0];
 			axi_awaddr[1:0] <= 0;
+		end
 
-		if (!i_pipe_stb || !i_op[0] || misaligned)
+		if (OPT_LOWPOWER && (!i_pipe_stb || !i_op[0] || misaligned))
 			axi_awaddr <= 0;
 	end
 

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@OPT_LOWPOWER to ops

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlOp: INDEX
        list: ops
            HdlValueId: axi_awaddr
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0

UPD HdlStmIf@@ to 
    MOV HdlOp@@OR_LOG to 
    HdlOp: OR_LOG
        list: ops
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: i_pipe_stb
                    HdlOp: NEG_LOG
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
            HdlValueId: misaligned


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -791,7 +811,7 @@ module	axidcache #(
 					<= read_addr[LS-1:0] + 1;
 			read_addr[CS-1:LS] <= r_cline;
 			wcache_addr <= read_addr;
-			wcache_data <= M_AXI_RDATA;
+			wcache_data <= axi_rdata;
 			wcache_strb <= -1;
 			if (!M_AXI_RVALID || flushing || i_cpu_reset
 				|| M_AXI_RRESP[1])

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlOp@@NEG_LOG to 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: SWAP_WSTRB
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlAll
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: rev_addr
                HdlValueId: i_addr

UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: SWAP_WSTRB
            HdlOp: NE
                list: ops
                    HdlValueId: C_AXI_DATA_WIDTH
                    HdlValueInt: 32
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: rev_addr
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_addr
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN
            INS HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: rev_addr
                    HdlOp: DOWNTO
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: AXILSB
                                    HdlValueInt: 1
                            HdlValueInt: 0

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@M_AXI_RDATA to axi_rdata


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -959,7 +979,7 @@ module	axidcache #(
 	// {{{
 	always @(posedge S_AXI_ACLK)
 	if (i_pipe_stb)
-		req_data <= { i_op[2:1], i_addr[AXILSB-1:0] };
+		req_data <= { i_op[2:1], rev_addr[AXILSB-1:0] };
 
 	assign	req_lsb = req_data[AXILSB-1:0];
 	assign	req_op  = req_data[AXILSB +: 2];

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: S_AXI_ACLK

INS HdlStmIf@@body to 

INS HdlStmAssign@@if_true to body

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@CONCAT to CONCAT
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: i_op
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 2
                        HdlValueInt: 1
    UPD HdlOp@@CONCAT to NEG
    MOV HdlOp@@CONCAT to if_true
    HdlOp: CONCAT
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_op
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 2
                            HdlValueInt: 1
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlOp: DOWNTO
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: AXILSB
                                    HdlValueInt: 1
                            HdlValueInt: 0
    DEL HdlValueId@@req_data from if_true

UPD HdlStmIf@@body to body
    DEL HdlValueId@@i_pipe_stb from body
    DEL list@@elifs from body

DEL HdlStmAssign@@if_true from body

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -1009,7 +1029,7 @@ module	axidcache #(
 	if (r_svalid)
 		pre_data = cached_iword;
 	else if (state == DC_READS)
-		pre_data = M_AXI_RDATA;
+		pre_data = axi_rdata;
 	else
 		pre_data = cached_rword;
 

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@M_AXI_RDATA to axi_rdata


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -1064,7 +1084,8 @@ module	axidcache #(
 	// Verilator lint_off UNUSED
 	wire	unused;
 	assign	unused = &{ 1'b0, M_AXI_BID, M_AXI_RID, r_addr, M_AXI_RRESP[0],
-				M_AXI_BRESP[0], i_lock, shifted_data };
+				M_AXI_BRESP[0], i_lock, shifted_data,
+				rev_addr[C_AXI_ADDR_WIDTH-1:AXILSB] };
 	// Verilator lint_on UNUSED
 	// }}}
 ////////////////////////////////////////////////////////////////////////////////

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_UNARY to CONCAT
    MOV HdlOp@@AND_UNARY to 
    HdlOp: AND_UNARY
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlOp: CONCAT
                                                                list: ops
                                                                    HdlValueInt: 0
                                                                    HdlValueId: M_AXI_BID
                                                            HdlValueId: M_AXI_RID
                                                    HdlValueId: r_addr
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: M_AXI_RRESP
                                                    HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: M_AXI_BRESP
                                            HdlValueInt: 0
                            HdlValueId: i_lock
                    HdlValueId: shifted_data


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -93,7 +93,7 @@ module	zipdma_mm2s #(
 				SZ_32B  = 2'b01,
 				SZ_BUS  = 2'b00;
 	localparam	WBLSB = $clog2(DW/8);
-	reg	[WBLSB:0]	nxtstb_size, rdstb_size, rdack_size;
+	reg	[WBLSB:0]	nxtstb_size, rdstb_size, rdack_size, first_size;
 	reg	[ADDRESS_WIDTH-1:0]	next_addr, last_request_addr;
 	reg	[WBLSB-1:0]	subaddr, rdack_subaddr;
 	reg	[DW/8-1:0]	nxtstb_sel, first_sel;

ParseResult:
INS HdlIdDef@@first_size to objs
HdlIdDef: first_size
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueId: WBLSB
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -134,6 +134,21 @@ module	zipdma_mm2s #(
 	generate if (BUS_WIDTH > 32)
 	begin : GEN_NXTSTB_SIZE
 		// {{{
+		always @(*)
+		begin
+			first_size = 0;
+			case(i_size)
+			SZ_BYTE: first_size = 1;
+			SZ_16B:  first_size = (i_addr[0]) ? 1:2;
+			// Verilator lint_off WIDTH
+			SZ_32B:  first_size = 4 - i_addr[1:0];
+			SZ_BUS:  first_size = (DW/8)-i_addr[WBLSB-1:0];
+			endcase
+
+			if (first_size > i_transferlen)
+				first_size = i_transferlen;
+		end
+
 		always @(*)
 		begin
 			nxtstb_size = rdstb_size;

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@ to 
    MOV HdlOp@@GT to 
    HdlOp: GT
        list: ops
            HdlValueId: BUS_WIDTH
            HdlValueInt: 32
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmProcess
                list: sensitivity
                    HdlAll
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: nxtstb_size
                                HdlValueId: rdstb_size
                        HdlStmCase: r_size
                            HdlStmCaseType: CASE
                            HdlValueId: r_size
                            list: cases
                                tuple
                                    HdlValueId: SZ_BYTE
                                    HdlOp: ASSIGN
                                        list: ops
                                            HdlValueId: nxtstb_size
                                            HdlValueInt: 1
                                tuple
                                    HdlValueId: SZ_16B
                                    HdlOp: ASSIGN
                                        list: ops
                                            HdlValueId: nxtstb_size
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlOp: EQ
                                                        list: ops
                                                            HdlValueId: rdstb_len
                                                            HdlValueInt: 3
                                                    HdlValueInt: 1
                                                    HdlValueInt: 2
                                tuple
                                    HdlValueId: SZ_32B
                                    HdlOp: ASSIGN
                                        list: ops
                                            HdlValueId: nxtstb_size
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlOp: GE
                                                                list: ops
                                                                    HdlValueId: rdstb_len
                                                                    HdlValueInt: 4
                                                            HdlOp: LT
                                                                list: ops
                                                                    HdlValueId: rdstb_len
                                                                    HdlValueInt: 8
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlValueId: rdstb_len
                                                            HdlValueInt: 4
                                                    HdlValueInt: 4
                                tuple
                                    HdlValueId: SZ_BUS
                                    HdlOp: ASSIGN
                                        list: ops
                                            HdlValueId: nxtstb_size
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlOp: GT
                                                        list: ops
                                                            HdlValueId: rdstb_len
                                                            HdlOp: DIV
                                                                list: ops
                                                                    HdlValueId: DW
                                                                    HdlValueInt: 8
                                                    HdlOp: DIV
                                                        list: ops
                                                            HdlValueId: DW
                                                            HdlValueInt: 8
                                                    HdlValueId: rdstb_len
    DEL list@@elifs from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmProcess@@ to body

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlAll
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: first_size
                HdlValueInt: 0

INS HdlStmCase@@i_size to body

INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: GT
        list: ops
            HdlValueId: first_size
            HdlValueId: i_transferlen
    HdlOp: ASSIGN
        list: ops
            HdlValueId: first_size
            HdlValueId: i_transferlen
    list: elifs

DEL HdlStmIf@@ from objs


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -158,9 +197,15 @@ module	zipdma_mm2s #(
 			casez(r_size)
 			SZ_BYTE: nxtstb_size = 1;
 			SZ_16B: nxtstb_size = (rdstb_len == 3) ? 1 : 2;
-			// Verilator lint_off WIDTH
-			default:nxtstb_size= (rdstb_len > 4) ? 4:rdstb_len[1:0];
-			// Verilator lint_on  WIDTH
+			default: begin
+				// Verilator lint_off WIDTH
+				nxtstb_size = (DW/8);
+				if (DW/8 > rdstb_len - rdstb_size)
+					nxtstb_size =
+						{ 1'b0, rdstb_len[WBLSB:0] }
+						-{ 1'b0, rdstb_size[WBLSB:0]};
+				end
+				// Verilator lint_on  WIDTH
 			endcase
 		end
 		// }}}

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@ to 
    MOV HdlOp@@GT to 
    HdlOp: GT
        list: ops
            HdlValueId: BUS_WIDTH
            HdlValueInt: 32
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmProcess
                list: sensitivity
                    HdlAll
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: nxtstb_size
                                HdlValueId: rdstb_size
                        HdlStmCase: r_size
                            HdlStmCaseType: CASE
                            HdlValueId: r_size
                            list: cases
                                tuple
                                    HdlValueId: SZ_BYTE
                                    HdlOp: ASSIGN
                                        list: ops
                                            HdlValueId: nxtstb_size
                                            HdlValueInt: 1
                                tuple
                                    HdlValueId: SZ_16B
                                    HdlOp: ASSIGN
                                        list: ops
                                            HdlValueId: nxtstb_size
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlOp: EQ
                                                        list: ops
                                                            HdlValueId: rdstb_len
                                                            HdlValueInt: 3
                                                    HdlValueInt: 1
                                                    HdlValueInt: 2
                                tuple
                                    HdlValueId: SZ_32B
                                    HdlOp: ASSIGN
                                        list: ops
                                            HdlValueId: nxtstb_size
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlOp: GE
                                                                list: ops
                                                                    HdlValueId: rdstb_len
                                                                    HdlValueInt: 4
                                                            HdlOp: LT
                                                                list: ops
                                                                    HdlValueId: rdstb_len
                                                                    HdlValueInt: 8
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlValueId: rdstb_len
                                                            HdlValueInt: 4
                                                    HdlValueInt: 4
                                tuple
                                    HdlValueId: SZ_BUS
                                    HdlOp: ASSIGN
                                        list: ops
                                            HdlValueId: nxtstb_size
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlOp: GT
                                                        list: ops
                                                            HdlValueId: rdstb_len
                                                            HdlOp: DIV
                                                                list: ops
                                                                    HdlValueId: DW
                                                                    HdlValueInt: 8
                                                    HdlOp: DIV
                                                        list: ops
                                                            HdlValueId: DW
                                                            HdlValueInt: 8
                                                    HdlValueId: rdstb_len
    DEL list@@elifs from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmProcess@@ to body

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: nxtstb_size
                HdlValueId: rdstb_size
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

INS HdlStmCase@@r_size to body

UPD HdlStmCase@@r_size to r_size
    MOV list@@cases to r_size
    list: cases
        tuple
            HdlValueId: SZ_BYTE
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: nxtstb_size
                    HdlValueInt: 1
        tuple
            HdlValueId: SZ_16B
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: nxtstb_size
                    HdlOp: TERNARY
                        list: ops
                            HdlOp: EQ
                                list: ops
                                    HdlValueId: rdstb_len
                                    HdlValueInt: 3
                            HdlValueInt: 1
                            HdlValueInt: 2
    DEL HdlStmCaseType@@CASEZ from r_size
    DEL HdlValueId@@r_size from r_size
    DEL HdlOp@@ASSIGN from r_size
    HdlOp: ASSIGN
        list: ops
            HdlValueId: nxtstb_size
            HdlOp: TERNARY
                list: ops
                    HdlOp: GT
                        list: ops
                            HdlValueId: rdstb_len
                            HdlValueInt: 4
                    HdlValueInt: 4
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: rdstb_len
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 1
                                    HdlValueInt: 0

UPD HdlStmCase@@r_size to r_size
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN
            INS HdlValueId@@nxtstb_size to ops

INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: GT
        list: ops
            HdlOp: DIV
                list: ops
                    HdlValueId: DW
                    HdlValueInt: 8
            HdlOp: SUB
                list: ops
                    HdlValueId: rdstb_len
                    HdlValueId: rdstb_size
    HdlOp: ASSIGN
        list: ops
            HdlValueId: nxtstb_size
            HdlOp: SUB
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: rdstb_len
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueId: WBLSB
                                            HdlValueInt: 0
                    HdlOp: CONCAT
                        list: ops
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: rdstb_size
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueId: WBLSB
                                            HdlValueInt: 0
    list: elifs

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    UPD HdlOp@@GT to GT
        INS HdlOp@@SUB to ops
        HdlOp: SUB
            list: ops
                HdlValueId: rdstb_len
                HdlValueId: rdstb_size
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@SUB to SUB
            INS HdlOp@@CONCAT to ops
            INS HdlOp@@CONCAT to ops
            HdlOp: CONCAT
                list: ops
                    HdlValueInt: 0
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: rdstb_size
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueId: WBLSB
                                    HdlValueInt: 0
            UPD HdlOp@@CONCAT to CONCAT
                INS list@@ops to CONCAT
                INS HdlValueInt@@0 to ops
                INS HdlOp@@INDEX to ops
                UPD HdlOp@@INDEX to INDEX
                    INS list@@ops to INDEX
                    INS HdlOp@@DOWNTO to ops
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueId: WBLSB
                            HdlValueInt: 0

DEL HdlStmCase@@r_size from body

DEL HdlStmProcess@@ from body

DEL HdlStmIf@@ from objs


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -175,7 +220,7 @@ module	zipdma_mm2s #(
 
 		if (o_rd_stb && !i_rd_stall)
 			next_addr = next_addr
-			+ { {(ADDRESS_WIDTH-WBLSB-1){1'b0}}, nxtstb_size };
+			+ { {(ADDRESS_WIDTH-WBLSB-1){1'b0}}, rdstb_size };
 	end
 	// }}}
 

ParseResult:
UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmCase@@r_size to r_size
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN
            INS HdlValueId@@nxtstb_size to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@ADD to ADD
            UPD HdlOp@@CONCAT to CONCAT
                UPD HdlValueId@@nxtstb_size to rdstb_size


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -224,16 +269,7 @@ module	zipdma_mm2s #(
 			{ o_rd_addr, subaddr } <= i_addr;
 
 			// rdstb_size
-			// {{{
-			case(i_size)
-			SZ_BYTE: rdstb_size <= 1;
-			SZ_16B: rdstb_size <= (i_addr[0]) ? 1:2;
-			// Verilator lint_off WIDTH
-			SZ_32B: rdstb_size <= 4 - i_addr[1:0];
-			SZ_BUS: rdstb_size <= (DW/8)-i_addr[WBLSB-1:0];
-			endcase
-			// Verilator lint_on  WIDTH
-			// }}}
+			rdstb_size <= first_size;
 
 			// rdstb_len
 			rdstb_len <= i_transferlen;

ParseResult:
UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlOp: SUB
        list: ops
            HdlValueInt: 4
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 1
                            HdlValueInt: 0
    HdlValueId: rdstb_size

UPD HdlStmAssign@@ to 
    UPD HdlOp@@SUB to SUB
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                MOV HdlValueInt@@0 to ops
                HdlValueInt: 0
                DEL HdlValueInt@@1 from ops
                DEL list@@ops from DOWNTO
            DEL HdlValueId@@i_addr from ops
            DEL HdlOp@@DOWNTO from ops
            DEL list@@ops from INDEX
        DEL HdlValueInt@@4 from ops
        DEL HdlOp@@INDEX from ops
        DEL list@@ops from SUB
    UPD HdlValueId@@rdstb_size to o_rd_stb
    DEL HdlOp@@SUB from 

UPD HdlStmCase@@i_size to i_size
    MOV tuple@@ to cases
    tuple
        HdlValueId: SZ_BUS
        HdlStmAssign
            HdlOp: SUB
                list: ops
                    HdlOp: DIV
                        list: ops
                            HdlValueId: DW
                            HdlValueInt: 8
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: WBLSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0
            HdlValueId: rdstb_size
    MOV tuple@@ to cases
    tuple
        HdlValueId: SZ_16B
        HdlStmAssign
            HdlOp: TERNARY
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlValueInt: 0
                    HdlValueInt: 1
                    HdlValueInt: 2
            HdlValueId: rdstb_size
    UPD HdlValueId@@i_size to first_size
    MOV HdlValueId@@i_size to i_size
    HdlValueId: i_size
    DEL HdlStmCaseType@@CASE from i_size
    DEL tuple@@ from cases
    tuple
        HdlValueId: SZ_BYTE
        HdlStmAssign
            HdlValueInt: 1
            HdlValueId: rdstb_size
    DEL HdlValueId@@SZ_32B from 
    DEL tuple@@ from cases
    DEL list@@cases from i_size

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlValueInt: 0
            HdlValueInt: 1
            HdlValueInt: 2
    HdlValueId: rdstb_size

UPD HdlStmAssign@@ to 
    MOV HdlOp@@SUB to 
    HdlOp: SUB
        list: ops
            HdlOp: DIV
                list: ops
                    HdlValueId: DW
                    HdlValueInt: 8
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlOp: DOWNTO
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: WBLSB
                                    HdlValueInt: 1
                            HdlValueInt: 0
    DEL HdlValueId@@rdstb_size from 

UPD HdlStmAssign@@ to 
    MOV HdlOp@@TERNARY to 
    HdlOp: TERNARY
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlValueInt: 0
            HdlValueInt: 1
            HdlValueInt: 2

DEL HdlStmAssign@@ from 

DEL HdlStmCase@@i_size from body


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -276,7 +334,7 @@ module	zipdma_mm2s #(
 		nxtstb_sel = ((1<<nxtstb_size)-1) << next_addr[WBLSB-1:0];
 	end else begin
 		// Verilator lint_off WIDTH
-		nxtstb_sel = ( {(DW/8){1'b1}} - (1<<(DW/8-1-nxtstb_size)) )
+		nxtstb_sel = (((1<<nxtstb_size)-1) << (DW/8 - nxtstb_size))
 					>> next_addr[WBLSB-1:0];
 		// Verilator lint_on  WIDTH
 	end

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@SRL to SRL
                UPD HdlOp@@SUB to SUB
                    UPD HdlOp@@SLL to SLL
                        UPD HdlOp@@SUB to SLL
                        MOV HdlOp@@SUB to ops
                        HdlOp: SUB
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlOp: DIV
                                            list: ops
                                                HdlValueId: DW
                                                HdlValueInt: 8
                                        HdlValueInt: 1
                                HdlValueId: nxtstb_size
                        UPD HdlOp@@SUB to SUB
                            MOV HdlValueId@@nxtstb_size to ops
                            HdlValueId: nxtstb_size
                            UPD HdlOp@@SUB to SUB
                                DEL HdlValueInt@@1 from ops
                        DEL HdlValueInt@@1 from ops
                        DEL list@@ops from SLL
                    UPD HdlOp@@REPL_CONCAT to ASSIGN
                    MOV HdlOp@@REPL_CONCAT to ops
                    HdlOp: REPL_CONCAT
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
                        MOV HdlValueInt@@1 to ops
                        HdlValueInt: 1
                    DEL HdlOp@@SLL from ops
                    DEL list@@ops from SUB
                DEL HdlOp@@SUB from ops


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -377,23 +435,15 @@ module	zipdma_mm2s #(
 		if (!OPT_LOWPOWER || i_request)
 			o_rd_sel <= first_sel;
 		// }}}
-	end else if (!i_rd_stall)
-	begin
-			// {{{
-			o_rd_sel <= nxtstb_sel;
-			if (rdstb_len <= { {(LGLENGTH-WBLSB){1'b0}}, rdstb_size })
-			begin
-				o_rd_sel  <= 0;
-			end
-		// }}}
-	end
+	end else if (o_rd_stb && !i_rd_stall)
+		o_rd_sel <= nxtstb_sel;
 	// }}}
 
 	// wb_outstanding
 	// {{{
 	initial	wb_outstanding = 0;
 	always @(posedge i_clk)
-	if (i_reset || !o_rd_cyc || !i_rd_err)
+	if (i_reset || !o_rd_cyc || i_rd_err)
 		wb_outstanding <= 0;
 		// wb_pipeline_full <= 1'b0;
 	else case({ (o_rd_stb && !i_rd_stall), i_rd_ack })

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@LE to AND_LOG
    MOV HdlOp@@LE to 
    HdlOp: LE
        list: ops
            HdlValueId: rdstb_len
            HdlOp: CONCAT
                list: ops
                    HdlOp: REPL_CONCAT
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: LGLENGTH
                                    HdlValueId: WBLSB
                            HdlValueInt: 0
                    HdlValueId: rdstb_size
    UPD HdlOp@@LE to LE
        UPD HdlValueId@@rdstb_len to o_rd_stb
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
                UPD HdlOp@@SUB to NEG_LOG
                MOV HdlOp@@SUB to ops
                HdlOp: SUB
                    list: ops
                        HdlValueId: LGLENGTH
                        HdlValueId: WBLSB
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@LGLENGTH to i_rd_stall
                    DEL HdlValueId@@WBLSB from ops
                DEL HdlValueInt@@0 from ops
                DEL list@@ops from REPL_CONCAT
            DEL HdlOp@@REPL_CONCAT from ops
            DEL HdlValueId@@rdstb_size from ops
            DEL list@@ops from CONCAT
        DEL HdlOp@@CONCAT from ops
    DEL HdlStmBlock@@SEQ from 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_rd_sel
    DEL list@@elifs from 

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: nxtstb_sel
    HdlValueId: o_rd_sel

UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            MOV HdlValueId@@i_rd_err to ops
            HdlValueId: i_rd_err
            DEL list@@ops from NEG_LOG
        DEL HdlOp@@NEG_LOG from ops

UPD HdlStmIf@@body to body
    DEL HdlOp@@NEG_LOG from 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: i_rd_stall
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

DEL HdlStmIf@@ from body


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -442,27 +492,25 @@ module	zipdma_mm2s #(
 
 	// rdack_size
 	// {{{
-	// Verilator lint_off WIDTH
 	always @(posedge i_clk)
 	if (!o_busy)
 	begin
 		if (!OPT_LOWPOWER || i_request)
-		case(i_size)
-		SZ_BYTE:rdack_size <= 1;
-		SZ_16B: rdack_size <= 2 - i_addr[0];
-		SZ_32B: rdack_size <= 4 - i_addr[1:0];
-		SZ_BUS: rdack_size <= (1<<WBLSB) - i_addr[WBLSB-1:0];
-		endcase
+			rdack_size <= first_size;
 	end else if (i_rd_ack)
 	begin
 		case(r_size)
 		SZ_BYTE:rdack_size <= 1;
 		SZ_16B: rdack_size <= 2;
 		SZ_32B: rdack_size <= 4;
-		SZ_BUS: rdack_size <= (rdack_len > DW/8) ? DW/8 : rdack_len;
+		// Verilator lint_off WIDTH
+		SZ_BUS: if (rdack_len > DW/8 + rdack_size)
+				rdack_size <= DW/8;
+			else
+				rdack_size <= rdack_len - rdack_size;
+		// Verilator lint_on  WIDTH
 		endcase
 	end
-	// Verilator lint_on  WIDTH
 	// }}}
 
 	// fill, next_fill (depends on rdack_size)

ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmIf@@ to body
HdlStmIf
    HdlValueId: M_VALID
    HdlOp: ASSIGN
        list: ops
            HdlValueId: next_fill
            HdlOp: SUB
                list: ops
                    HdlValueId: next_fill
                    HdlValueId: M_BYTES
    list: elifs

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlOp: SUB
        list: ops
            HdlValueInt: 2
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlValueInt: 0
    HdlValueId: rdack_size

UPD HdlStmAssign@@ to 
    UPD HdlOp@@SUB to SUB
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@i_addr to first_size
            MOV HdlValueId@@i_addr to ops
            HdlValueId: i_addr
            DEL HdlValueInt@@0 from ops
            DEL list@@ops from INDEX
        DEL HdlValueInt@@2 from ops
        DEL HdlOp@@INDEX from ops
        DEL list@@ops from SUB
    DEL HdlOp@@SUB from 

UPD HdlStmCase@@i_size to i_size
    MOV tuple@@ to cases
    tuple
        HdlValueId: SZ_32B
        HdlStmAssign
            HdlOp: SUB
                list: ops
                    HdlValueInt: 4
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 1
                                    HdlValueInt: 0
            HdlValueId: rdack_size
    DEL HdlStmCaseType@@CASE from i_size
    DEL HdlValueId@@i_size from i_size
    DEL tuple@@ from cases
    tuple
        HdlValueId: SZ_BYTE
        HdlStmAssign
            HdlValueInt: 1
            HdlValueId: rdack_size
    DEL HdlValueId@@SZ_16B from 
    DEL tuple@@ from cases
    DEL tuple@@ from cases
    tuple
        HdlValueId: SZ_BUS
        HdlStmAssign
            HdlOp: SUB
                list: ops
                    HdlOp: SLL
                        list: ops
                            HdlValueInt: 1
                            HdlValueId: WBLSB
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: WBLSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0
            HdlValueId: rdack_size
    DEL list@@cases from i_size

INS HdlStmIf@@ to 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to GT
    MOV HdlOp@@TERNARY to 
    HdlOp: TERNARY
        list: ops
            HdlOp: GT
                list: ops
                    HdlValueId: rdack_len
                    HdlOp: DIV
                        list: ops
                            HdlValueId: DW
                            HdlValueInt: 8
            HdlOp: DIV
                list: ops
                    HdlValueId: DW
                    HdlValueInt: 8
            HdlValueId: rdack_len
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlOp@@DIV to ops
        HdlOp: DIV
            list: ops
                HdlValueId: DW
                HdlValueInt: 8
        UPD HdlOp@@GT to GT
            MOV HdlValueId@@rdack_len to ops
            HdlValueId: rdack_len
        UPD HdlOp@@GT to ADD
        UPD HdlValueId@@rdack_len to rdack_size
        MOV HdlValueId@@rdack_len to ops
        HdlValueId: rdack_len
    MOV HdlValueId@@rdack_size to 
    HdlValueId: rdack_size

INS HdlStmAssign@@if_true to 

INS HdlStmAssign@@if_false to 

UPD HdlStmAssign@@ to 
    MOV HdlOp@@SUB to 
    HdlOp: SUB
        list: ops
            HdlValueInt: 4
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 1
                            HdlValueInt: 0
    DEL HdlValueId@@rdack_size from 

DEL HdlStmAssign@@ from 

DEL HdlStmCase@@i_size from 

DEL HdlStmAssign@@ from 


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -471,9 +519,7 @@ module	zipdma_mm2s #(
 	begin
 		next_fill = fill;
 		if (M_VALID)
-			// next_fill = next_fill - (DW/8);
-			next_fill[WBLSB+1:WBLSB]
-					= next_fill[WBLSB+1:WBLSB] - 1;
+			next_fill = next_fill - M_BYTES;
 		if (i_rd_ack)
 			next_fill = next_fill + { 1'b0, rdack_size };
 	end

ParseResult:
UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: next_fill
                HdlValueId: fill
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: i_rd_ack
    HdlOp: ASSIGN
        list: ops
            HdlValueId: next_fill
            HdlOp: ADD
                list: ops
                    HdlValueId: next_fill
                    HdlOp: CONCAT
                        list: ops
                            HdlValueInt: 0
                            HdlValueId: rdack_size
    list: elifs

DEL HdlStmIf@@ from body
HdlStmIf
    HdlValueId: M_VALID
    HdlOp: ASSIGN
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: next_fill
                    HdlOp: DOWNTO
                        list: ops
                            HdlOp: ADD
                                list: ops
                                    HdlValueId: WBLSB
                                    HdlValueInt: 1
                            HdlValueId: WBLSB
            HdlOp: SUB
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: next_fill
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlValueId: WBLSB
                                            HdlValueInt: 1
                                    HdlValueId: WBLSB
                    HdlValueInt: 1
    list: elifs

DEL HdlStmProcess@@ from objs


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_mm2s.v
+++ b/rtl/zipdma/zipdma_mm2s.v
@@ -491,11 +537,16 @@ module	zipdma_mm2s #(
 	always @(posedge i_clk)
 	if (!o_busy)
 		m_valid <= 1'b0;
-	else
+	else begin
 		// Verilator lint_off WIDTH
-		m_valid <= o_rd_cyc && i_rd_ack && ((next_fill >= DW/8)
+		m_valid <= 0;
+		if ((!m_valid || !m_last) && rdack_len == 0 && fill > 0)
+			m_valid <= 1;
+		else if (o_rd_cyc && i_rd_ack)
+			m_valid <= ((next_fill >= DW/8)
 			|| (rdack_len <= { {(LGLENGTH-1){1'b0}}, rdack_size }));
 		// Verilator lint_on  WIDTH
+	end
 	// }}}
 
 	// sreg

ParseResult:
INS HdlStmIf@@ to body

UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD list@@ops to elifs
        MOV list@@ops to AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: o_rd_cyc
                    HdlValueId: i_rd_ack
            HdlOp: OR_LOG
                list: ops
                    HdlOp: GE
                        list: ops
                            HdlValueId: next_fill
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 8
                    HdlOp: LE
                        list: ops
                            HdlValueId: rdack_len
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: LGLENGTH
                                                    HdlValueInt: 1
                                            HdlValueInt: 0
                                    HdlValueId: rdack_size
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: o_rd_cyc
                HdlValueId: i_rd_ack
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: GE
                    list: ops
                        HdlValueId: next_fill
                        HdlOp: DIV
                            list: ops
                                HdlValueId: DW
                                HdlValueInt: 8
                HdlOp: LE
                    list: ops
                        HdlValueId: rdack_len
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueId: LGLENGTH
                                                HdlValueInt: 1
                                        HdlValueInt: 0
                                HdlValueId: rdack_size
    DEL HdlOp@@AND_LOG from if_false

UPD HdlStmAssign@@if_false to 

MOV HdlStmAssign@@if_false to body
HdlStmAssign: if_false
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: o_rd_cyc
                    HdlValueId: i_rd_ack
            HdlOp: OR_LOG
                list: ops
                    HdlOp: GE
                        list: ops
                            HdlValueId: next_fill
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 8
                    HdlOp: LE
                        list: ops
                            HdlValueId: rdack_len
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: LGLENGTH
                                                    HdlValueInt: 1
                                            HdlValueInt: 0
                                    HdlValueId: rdack_size
    HdlValueId: m_valid

UPD HdlStmIf@@ to 
    INS list@@elifs to 

UPD HdlStmAssign@@if_true to if_true
    INS HdlValueId@@rdack_size to if_true

UPD HdlStmAssign@@if_false to if_false
    INS HdlOp@@SUB to if_false
    INS HdlValueId@@rdack_size to if_false
    UPD HdlOp@@SUB to SUB
        INS list@@ops to SUB
        INS HdlValueId@@rdack_len to ops


CommitId: a72df114929f44a4f5a1850832d2d500166a6521
Upgrading sfifo to match wb2axip, fixes assert-else-assert
--- a/rtl/ex/sfifo.v
+++ b/rtl/ex/sfifo.v
@@ -45,8 +45,7 @@ module sfifo #(
 		parameter 	LGFLEN=4,
 		parameter [0:0]	OPT_ASYNC_READ = 1'b1,
 		parameter [0:0]	OPT_WRITE_ON_FULL = 1'b0,
-		parameter [0:0]	OPT_READ_ON_EMPTY = 1'b0,
-		localparam	FLEN=(1<<LGFLEN)
+		parameter [0:0]	OPT_READ_ON_EMPTY = 1'b0
 		// }}}
 	) (
 		// {{{

ParseResult:
MOV HdlIdDef@@FLEN to params
HdlIdDef: FLEN
    HdlOp: SLL
        list: ops
            HdlValueInt: 1
            HdlValueId: LGFLEN
    HdlDirection: INTERNAL


CommitId: f62b8c674fa870e50122956d1a57ceaf28383353
Fixed always @(*) sim/synth issues in memops
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -99,10 +99,10 @@ module	memops #(
 	wire	[(F_LGDEPTH-1):0]	f_nreqs, f_nacks, f_outstanding;
 `endif
 
-	reg		misaligned;
+	wire		misaligned;
 	reg		r_wb_cyc_gbl, r_wb_cyc_lcl;
 	reg	[3:0]	r_op;
-	reg		lock_gbl, lock_lcl;
+	wire		lock_gbl, lock_lcl;
 	wire		gbl_stb, lcl_stb;
 	// }}}
 

ParseResult:
INS HdlIdDef@@misaligned to objs
HdlIdDef: misaligned
    HdlDirection: INTERNAL

INS HdlIdDef@@lock_gbl to objs
HdlIdDef: lock_gbl
    HdlDirection: INTERNAL

INS HdlIdDef@@lock_lcl to objs
HdlIdDef: lock_lcl
    HdlDirection: INTERNAL

UPD HdlIdDef@@misaligned to r_misaligned

MOV HdlIdDef@@misaligned to objs
HdlIdDef: misaligned
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

UPD HdlIdDef@@lock_lcl to r_lock_gbl

MOV HdlIdDef@@lock_lcl to objs
HdlIdDef: lock_lcl
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

UPD HdlIdDef@@lock_gbl to r_lock_lcl

MOV HdlIdDef@@lock_gbl to objs
HdlIdDef: lock_gbl
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL


CommitId: f62b8c674fa870e50122956d1a57ceaf28383353
Fixed always @(*) sim/synth issues in memops
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -110,16 +110,20 @@ module	memops #(
 	// {{{
 	generate if (OPT_ALIGNMENT_ERR)
 	begin : GENERATE_ALIGNMENT_ERR
+		reg	r_misaligned;
+
 		always @(*)
 		casez({ i_op[2:1], i_addr[1:0] })
-		4'b01?1: misaligned = i_stb; // Words must be halfword aligned
-		4'b0110: misaligned = i_stb; // Words must be word aligned
-		4'b10?1: misaligned = i_stb; // Halfwords must be aligned
-		// 4'b11??: misaligned <= 1'b0; Byte access are never misaligned
-		default: misaligned = 1'b0;
+		4'b01?1: r_misaligned = i_stb; // Words must be halfword aligned
+		4'b0110: r_misaligned = i_stb; // Words must be word aligned
+		4'b10?1: r_misaligned = i_stb; // Halfwords must be aligned
+		// 4'b11??: r_misaligned <= 1'b0; Byte access are never misaligned
+		default: r_misaligned = 1'b0;
 		endcase
+
+		assign	misaligned = r_misaligned;
 	end else
-		always @(*)	misaligned = 1'b0;
+		assign	misaligned = 1'b0;
 	endgenerate
 	// }}}
 

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_ALIGNMENT_ERR to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmAssign@@if_false to 
HdlStmAssign: if_false
    HdlValueInt: 0
    HdlValueId: misaligned

INS HdlStmProcess@@ to body

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: r_misaligned
    HdlValueId: misaligned

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll

INS HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  to 

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    INS HdlStmCaseType@@CASEZ to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    INS list@@cases to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    list: cases
        tuple
            HdlValueInt: 01?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: r_misaligned
                    HdlValueId: i_stb
        tuple
            HdlValueInt: 0110
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: r_misaligned
                    HdlValueId: i_stb
        tuple
            HdlValueInt: 10?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: r_misaligned
                    HdlValueId: i_stb
    INS HdlOp@@ASSIGN to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: r_misaligned
            HdlValueInt: 0

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    MOV HdlOp@@CONCAT to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    HdlOp: CONCAT
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_op
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 2
                            HdlValueInt: 1
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 1
                            HdlValueInt: 0
    DEL HdlStmCaseType@@CASEZ from {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    DEL list@@cases from {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    list: cases
        tuple
            HdlValueInt: 01?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueId: i_stb
        tuple
            HdlValueInt: 0110
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueId: i_stb
        tuple
            HdlValueInt: 10?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueId: i_stb
    DEL HdlOp@@ASSIGN from {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: misaligned
            HdlValueInt: 0

UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_ALIGNMENT_ERR from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL list@@elifs from 

DEL HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  from 

DEL HdlStmProcess@@ from body

DEL HdlStmProcess@@if_false from 
HdlStmProcess: if_false
    list: sensitivity
        HdlAll
    HdlOp: ASSIGN
        list: ops
            HdlValueId: misaligned
            HdlValueInt: 0

DEL HdlStmIf@@ from objs


CommitId: f62b8c674fa870e50122956d1a57ceaf28383353
Fixed always @(*) sim/synth issues in memops
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -326,33 +330,38 @@ module	memops #(
 	if (OPT_LOCK)
 	begin
 		// {{{
-		initial	lock_gbl = 1'b0;
-		initial	lock_lcl = 1'b0;
+		reg	r_lock_gbl, r_lock_lcl;
+
+		initial	r_lock_gbl = 1'b0;
+		initial	r_lock_lcl = 1'b0;
 
 		always @(posedge i_clk)
 		if (i_reset)
 		begin
-			lock_gbl <= 1'b0;
-			lock_lcl <= 1'b0;
+			r_lock_gbl <= 1'b0;
+			r_lock_lcl <= 1'b0;
 		end else if (((i_wb_err)&&((r_wb_cyc_gbl)||(r_wb_cyc_lcl)))
 				||(misaligned))
 		begin
 			// Kill the lock if
 			//	there's a bus error, or
 			//	User requests a misaligned memory op
-			lock_gbl <= 1'b0;
-			lock_lcl <= 1'b0;
+			r_lock_gbl <= 1'b0;
+			r_lock_lcl <= 1'b0;
 		end else begin
 			// Kill the lock if
 			//	i_lock goes down
 			//	User starts on the global bus, then switches
 			//	  to local or vice versa
-			lock_gbl <= (i_lock)&&((r_wb_cyc_gbl)||(lock_gbl))
+			r_lock_gbl <= (i_lock)&&((r_wb_cyc_gbl)||(lock_gbl))
 					&&(!lcl_stb);
-			lock_lcl <= (i_lock)&&((r_wb_cyc_lcl)||(lock_lcl))
+			r_lock_lcl <= (i_lock)&&((r_wb_cyc_lcl)||(lock_lcl))
 					&&(!gbl_stb);
 		end
 
+		assign	lock_gbl = r_lock_gbl;
+		assign	lock_lcl = r_lock_lcl;
+
 		assign	o_wb_cyc_gbl = (r_wb_cyc_gbl)||(lock_gbl);
 		assign	o_wb_cyc_lcl = (r_wb_cyc_lcl)||(lock_lcl);
 		// }}}

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: r_lock_gbl
    HdlValueId: lock_gbl

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: r_lock_lcl
    HdlValueId: lock_lcl

MOV HdlStmWait@@[] to body
HdlStmWait:
    list: val

MOV HdlStmWait@@[] to body
HdlStmWait:
    list: val

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@lock_gbl to r_lock_gbl

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@lock_lcl to r_lock_lcl

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@lock_gbl to r_lock_gbl

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@lock_lcl to r_lock_lcl

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@lock_gbl to r_lock_gbl

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@lock_lcl to r_lock_lcl

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@lock_gbl to r_lock_gbl

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@lock_lcl to r_lock_lcl


CommitId: f62b8c674fa870e50122956d1a57ceaf28383353
Fixed always @(*) sim/synth issues in memops
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -361,8 +370,7 @@ module	memops #(
 		assign	o_wb_cyc_gbl = (r_wb_cyc_gbl);
 		assign	o_wb_cyc_lcl = (r_wb_cyc_lcl);
 
-		always @(*)
-			{ lock_gbl, lock_lcl } = 2'b00;
+		assign	{ lock_gbl, lock_lcl } = 2'b00;
 
 		// Make verilator happy
 		// verilator lint_off UNUSED
ParseResult:
INS HdlStmAssign@@ to body

UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        MOV HdlOp@@CONCAT to ops
        HdlOp: CONCAT
            list: ops
                HdlValueId: lock_gbl
                HdlValueId: lock_lcl
        DEL HdlValueInt@@00 from ops
        DEL list@@ops from ASSIGN
    DEL list@@sensitivity from 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 

DEL HdlStmProcess@@ from body


CommitId: 149c5914fd804a0b6fee08f5bc3cd4af717fcb9c
Fixed a wrong # of bits bug
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -436,7 +433,10 @@ module wbdmac(i_clk, i_reset,
 	end else
 		last_read_request <= 1'b0;
 
-	wire	[LGMEMLEN:0]	next_nread = nread + 1'b1;
+
+	wire	[(LGMEMLEN):0]	next_nread;
+	assign	next_nread = nread + 1'b1;
+
 	initial	last_read_ack = 1'b0;
 	always @(posedge i_clk)
 	if (i_reset)

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@EQ to EQ
        UPD HdlOp@@INDEX to INDEX
            MOV list@@ops to INDEX
            list: ops
                HdlValueId: nread
                HdlOp: DOWNTO
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlValueId: LGMEMLEN
                                HdlValueInt: 1
                        HdlValueInt: 0
            UPD HdlOp@@DOWNTO to CONCAT
            UPD HdlOp@@DOWNTO to DOWNTO
                DEL HdlOp@@SUB from ops
                HdlOp: SUB
                    list: ops
                        HdlValueId: LGMEMLEN
                        HdlValueInt: 1
        DEL HdlOp@@INDEX from ops
        DEL HdlValueId@@cfg_blocklen_sub_one from ops
        DEL list@@ops from EQ

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@EQ to EQ
        UPD HdlOp@@CONCAT to CONCAT
            INS HdlValueId@@cfg_blocklen_sub_one to ops

UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@EQ to EQ
        UPD HdlOp@@CONCAT to CONCAT
            INS HdlValueId@@cfg_blocklen_sub_one to ops


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/zipwb.v
+++ b/rtl/core/zipwb.v
@@ -176,6 +177,7 @@ module	zipwb #(
 	localparam	[0:0]	OPT_MEMPIPE = OPT_PIPELINED_BUS_ACCESS;
 	localparam		INSN_WIDTH = 32;
 
+	wire		cpu_clken, cpu_clock, clk_gate;
 	wire	[31:0]	cpu_debug;
 
 	// Fetch

ParseResult:
INS HdlIdDef@@cpu_clken to objs
HdlIdDef: cpu_clken
    HdlDirection: INTERNAL

INS HdlIdDef@@cpu_clock to objs
HdlIdDef: cpu_clock
    HdlDirection: INTERNAL

INS HdlIdDef@@clk_gate to objs
HdlIdDef: clk_gate
    HdlDirection: INTERNAL


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/zipwb.v
+++ b/rtl/core/zipwb.v
@@ -217,6 +219,7 @@ module	zipwb #(
 	////////////////////////////////////////////////////////////////////////
 	//
 	//
+	wire	w_dbg_stall;
 
 	zipcore #(
 		// {{{

ParseResult:
INS HdlIdDef@@w_dbg_stall to objs
HdlIdDef: w_dbg_stall
    HdlDirection: INTERNAL


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/zipwb.v
+++ b/rtl/core/zipwb.v
@@ -292,6 +295,8 @@ module	zipwb #(
 		.o_prof_ticks(o_prof_ticks)
 		// }}}
 	);
+
+	assign	o_dbg_stall = w_dbg_stall || !clk_gate;
 	// }}}
 	// o_debug -- the debugging bus input
 	// {{{

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: OR_LOG
        list: ops
            HdlValueId: w_dbg_stall
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: clk_gate
    HdlValueId: o_dbg_stall


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/zipwb.v
+++ b/rtl/core/zipwb.v
@@ -529,11 +539,14 @@ module	zipwb #(
 			// }}}
 		) pformem(
 			// {{{
-			i_clk, i_reset,
+			.i_clk(i_clk), .i_reset(i_reset),
 			// Memory access to the arbiter, priority position
-			mem_cyc_gbl, mem_cyc_lcl, mem_stb_gbl, mem_stb_lcl,
-				mem_we, mem_bus_addr, mem_data, mem_sel,
-				mem_stall, mem_ack, mem_err,
+			.i_a_cyc_a(mem_cyc_gbl), .i_a_cyc_b(mem_cyc_lcl),
+				.i_a_stb_a(mem_stb_gbl), .i_a_stb_b(mem_stb_lcl),
+				.i_a_we(mem_we), .i_a_adr(mem_bus_addr),
+				.i_a_dat(mem_data), .i_a_sel(mem_sel),
+				.o_a_stall(mem_stall), .o_a_ack(mem_ack),
+				.o_a_err(mem_err),
 			// Prefetch access to the arbiter
 			//
 			// At a first glance, we might want something like:

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_PIPELINED to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_PIPELINED from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL list@@elifs from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

DEL HdlStmIf@@ from objs


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/slowmpy.v
+++ b/rtl/core/slowmpy.v
@@ -97,14 +97,14 @@ module	slowmpy #(
 		o_done <= 0;
 		o_busy <= 0;
 		// }}}
-	end else if (!o_busy)
+	end else if ((!o_busy)&&(i_stb))
 	begin
 		// {{{
 		o_done <= 0;
-		o_busy <= i_stb;
-		aux    <= (!OPT_LOWPOWER || i_stb) ? i_aux : 0;
+		o_busy <= 1;
+		aux    <= i_aux;
 		// }}}
-	end else if (almost_done)
+	end else if ((o_busy)&&(almost_done))
 	begin
 		// {{{
 		o_done <= 1;
ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@i_stb to ops
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@o_busy to ops

UPD HdlStmIf@@body to body
    MOV HdlOp@@NEG_LOG to 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: o_busy
    MOV HdlValueId@@almost_done to 
    HdlValueId: almost_done

UPD HdlStmAssign@@ to 
    INS HdlValueInt@@1 to 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlValueId@@i_aux to ops
        HdlValueId: i_aux
        DEL HdlOp@@OR_LOG from ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: OPT_LOWPOWER
                HdlValueId: i_stb
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from 

UPD HdlStmAssign@@ to 
    DEL HdlValueId@@i_stb from 


CommitId: e7dc0b6b4e95e7c41c6c6e22e6bf462be540150d
Fixed dblfetch to assert o_valid whenever o_illegal
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -188,7 +188,7 @@ module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
 		else begin
 			if ((o_valid)&&(i_stall_n))
 				cache_valid[cache_read_addr] <= 1'b0;
-			if ((o_wb_cyc)&&(i_wb_ack))
+			if ((o_wb_cyc)&&((i_wb_ack)||(i_wb_err)))
 				cache_valid[cache_write_addr] <= 1'b1;
 		end
 

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlValueId@@i_wb_err to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@i_wb_ack to ops
        HdlValueId: i_wb_ack


CommitId: e7dc0b6b4e95e7c41c6c6e22e6bf462be540150d
Fixed dblfetch to assert o_valid whenever o_illegal
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -212,10 +212,10 @@ module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
 
 	initial	o_illegal = 1'b0;
 	always @(posedge i_clk)
-		if ((o_wb_cyc)&&(i_wb_err))
-			o_illegal <= 1'b1;
-		else if ((!o_wb_cyc)&&((i_new_pc)||(invalid_bus_cycle)))
+		if ((invalid_bus_cycle)||(i_new_pc))
 			o_illegal <= 1'b0;
+		else if ((o_wb_cyc)&&(i_wb_err))
+			o_illegal <= 1'b1;
 
 `ifdef	FORMAL
 //

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    HdlOp: OR_LOG
        list: ops
            HdlValueId: invalid_bus_cycle
            HdlValueId: i_new_pc

UPD HdlStmAssign@@if_true to if_true
    UPD HdlValueInt@@1 to 0

UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: o_wb_cyc
            HdlValueId: i_wb_err
    DEL HdlOp@@AND_LOG from 
    HdlOp: AND_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_wb_cyc
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: i_new_pc
                    HdlValueId: invalid_bus_cycle

UPD HdlStmAssign@@ to 
    UPD HdlValueInt@@0 to 1


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/aux/busdelay.v
+++ b/rtl/aux/busdelay.v
@@ -118,17 +118,22 @@ module	busdelay(i_clk,
 					o_dly_data <= r_data;
 					o_dly_sel  <= r_sel;
 					o_dly_stb  <= 1'b1;
-					r_rtn_stall <= 1'b0;
-					r_stb <= 1'b0;
 				end else begin
 					o_dly_we   <= i_wb_we;
 					o_dly_addr <= i_wb_addr;
 					o_dly_data <= i_wb_data;
 					o_dly_sel  <= i_wb_sel;
 					o_dly_stb  <= i_wb_stb;
-					r_stb <= 1'b0;
-					r_rtn_stall <= 1'b0;
 				end
+
+				r_stb <= 1'b0;
+			end else if (!o_dly_stb)
+			begin
+				o_dly_we   <= i_wb_we;
+				o_dly_addr <= i_wb_addr;
+				o_dly_data <= i_wb_data;
+				o_dly_sel  <= i_wb_sel;
+				o_dly_stb  <= i_wb_stb;
 			end else if ((!r_stb)&&(!o_wb_stall))
 			begin
 				r_we   <= i_wb_we;

ParseResult:
UPD HdlStmIf@@ to 
    INS tuple@@ to elifs
    tuple
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: o_dly_stb
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlValueId: i_wb_we
                    HdlValueId: o_dly_we
                HdlStmAssign
                    HdlValueId: i_wb_addr
                    HdlValueId: o_dly_addr
                HdlStmAssign
                    HdlValueId: i_wb_data
                    HdlValueId: o_dly_data
                HdlStmAssign
                    HdlValueId: i_wb_sel
                    HdlValueId: o_dly_sel
                HdlStmAssign
                    HdlValueId: i_wb_stb
                    HdlValueId: o_dly_stb

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: r_stb

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: r_rtn_stall

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: r_stb

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: r_rtn_stall


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/aux/busdelay.v
+++ b/rtl/aux/busdelay.v
@@ -136,15 +141,12 @@ module	busdelay(i_clk,
 				r_data <= i_wb_data;
 				r_sel  <= i_wb_sel;
 				r_stb  <= i_wb_stb;
-
-				r_rtn_stall <= i_wb_stb;
 			end
 
 			if (!i_wb_cyc)
 			begin
 				o_dly_stb <= 1'b0;
 				r_stb <= 1'b0;
-				r_rtn_stall <= 1'b0;
 			end
 
 			o_wb_ack  <= (i_dly_ack)&&(i_wb_cyc)&&(o_dly_cyc);

ParseResult:
UPD HdlStmIf@@ to 
    INS tuple@@ to elifs
    tuple
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: o_dly_stb
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlValueId: i_wb_we
                    HdlValueId: o_dly_we
                HdlStmAssign
                    HdlValueId: i_wb_addr
                    HdlValueId: o_dly_addr
                HdlStmAssign
                    HdlValueId: i_wb_data
                    HdlValueId: o_dly_data
                HdlStmAssign
                    HdlValueId: i_wb_sel
                    HdlValueId: o_dly_sel
                HdlStmAssign
                    HdlValueId: i_wb_stb
                    HdlValueId: o_dly_stb

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueId: i_wb_stb
    HdlValueId: r_rtn_stall

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: r_rtn_stall


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/aux/busdelay.v
+++ b/rtl/aux/busdelay.v
@@ -152,7 +154,7 @@ module	busdelay(i_clk,
 			r_rtn_err <= (i_dly_err)&&(i_wb_cyc)&&(o_dly_cyc);
 		end
 
-		assign	o_wb_stall = r_rtn_stall;
+		assign	o_wb_stall = r_stb;
 		assign	o_wb_err   = r_rtn_err;
 
 	end else begin
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlValueId@@r_rtn_stall to r_stb


CommitId: 9de400242ee3c54e620c4a9743ffa95ac84aa0e1
ZipCORE BUGFIX: w/ block RAM regs and pipelined
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -767,24 +767,29 @@ module	zipcore #(
 			pre_rewrite_flag_A <= (wr_reg_ce)&&(dcd_preA == wr_reg_id);
 			pre_rewrite_flag_B <= (wr_reg_ce)&&(dcd_preB == wr_reg_id);
 			pre_rewrite_value  <= wr_gpreg_vl;
+		end else if (OPT_PIPELINED && dcd_valid)
+		begin
+			pre_rewrite_flag_A <= (wr_reg_ce)&&(dcd_A == wr_reg_id);
+			pre_rewrite_flag_B <= (wr_reg_ce)&&(dcd_B == wr_reg_id);
+			pre_rewrite_value  <= wr_gpreg_vl;
 		end
 
 		if (OPT_USERMODE)
 		begin : GEN_FULL_REGSET
 
 			always @(posedge i_clk)
-			if (dcd_ce)
+			if (dcd_ce || (OPT_PIPELINED && dcd_valid))
 			begin
-				pre_op_Av <= regset[dcd_preA];
-				pre_op_Bv <= regset[dcd_preB];
+				pre_op_Av <= regset[dcd_ce ? dcd_preA : dcd_A];
+				pre_op_Bv <= regset[dcd_ce ? dcd_preB : dcd_B];
 			end
 
 		end else begin : GEN_NO_USERREGS
 			always @(posedge i_clk)
-			if (dcd_ce)
+			if (dcd_ce || (OPT_PIPELINED && dcd_valid))
 			begin
-				pre_op_Av <= regset[dcd_preA[3:0]];
-				pre_op_Bv <= regset[dcd_preB[3:0]];
+				pre_op_Av <= regset[dcd_ce ? dcd_preA[3:0] : dcd_A[3:0]];
+				pre_op_Bv <= regset[dcd_ce ? dcd_preB[3:0] : dcd_B[3:0]];
 			end
 		end
 

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: OPT_PIPELINED
                HdlValueId: dcd_valid

UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: OPT_PIPELINED
                HdlValueId: dcd_valid

UPD HdlStmIf@@body to body
    MOV HdlValueId@@dcd_ce to body
    HdlValueId: dcd_ce

UPD HdlStmAssign@@ to 
    INS HdlOp@@INDEX to 
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlValueId@@regset to ops
        UPD HdlOp@@TERNARY to TERNARY
            INS HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dcd_A
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 3
                            HdlValueInt: 0

UPD HdlStmAssign@@ to 
    INS HdlOp@@INDEX to 
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlValueId@@regset to ops
        UPD HdlOp@@TERNARY to TERNARY
            INS HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dcd_B
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 3
                            HdlValueInt: 0

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        INS HdlOp@@TERNARY to ops
        UPD HdlOp@@TERNARY to TERNARY
            INS list@@ops to TERNARY
            INS HdlValueId@@dcd_ce to ops
            INS HdlValueId@@dcd_A to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        INS HdlOp@@TERNARY to ops
        UPD HdlOp@@TERNARY to TERNARY
            INS list@@ops to TERNARY
            INS HdlValueId@@dcd_ce to ops
            INS HdlValueId@@dcd_B to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to TERNARY
    MOV HdlOp@@INDEX to 
    HdlOp: INDEX
        list: ops
            HdlValueId: regset
            HdlOp: INDEX
                list: ops
                    HdlValueId: dcd_preA
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 3
                            HdlValueInt: 0
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@regset to dcd_ce

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to TERNARY
    MOV HdlOp@@INDEX to 
    HdlOp: INDEX
        list: ops
            HdlValueId: regset
            HdlOp: INDEX
                list: ops
                    HdlValueId: dcd_preB
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 3
                            HdlValueInt: 0
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@regset to dcd_ce


CommitId: 9de400242ee3c54e620c4a9743ffa95ac84aa0e1
ZipCORE BUGFIX: w/ block RAM regs and pipelined
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1919,7 +1924,9 @@ module	zipcore #(
 				if ((op_sim_immv[19:10] == 10'h0)&&(op_sim_immv[8]))
 				begin // [N/S]EXIT
 					// {{{
-					// $finish;
+`ifndef	VERILATOR
+					$finish;
+`endif
 
 					// if (op_sim_immv[19:4] == 16'h0031)
 						// Exit(User reg), code cpu_wr_gpreg

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_SIM to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_USERMODE to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_SIM from 
    DEL list@@elifs from 

UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_USERMODE from 
    DEL list@@elifs from 


CommitId: 9de400242ee3c54e620c4a9743ffa95ac84aa0e1
ZipCORE BUGFIX: w/ block RAM regs and pipelined
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2067,7 +2074,9 @@ module	zipcore #(
 				if ((op_sim_immv[19:10] == 10'h0)&&(op_sim_immv[8]))
 				begin // [N/S]EXIT
 					// {{{
-					// $finish;
+`ifndef	VERILATOR
+					$finish;
+`endif
 
 					// if (op_sim_immv[19:4] == 16'h0031)
 						// Exit(User reg), code cpu_wr_gpreg
ParseResult:
UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_SIM to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_USERMODE to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_SIM from 
    DEL list@@elifs from 

UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_USERMODE from 
    DEL list@@elifs from 


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -49,6 +49,7 @@ module	idecode #(
 		// {{{
 		parameter		ADDRESS_WIDTH=24,
 		parameter	[0:0]	OPT_MPY = 1'b1,
+		parameter	[0:0]	OPT_SHIFTS = 1'b1,
 		parameter	[0:0]	OPT_EARLY_BRANCHING = 1'b1,
 		parameter	[0:0]	OPT_PIPELINED = 1'b1,
 		parameter	[0:0]	OPT_DIVIDE = (OPT_PIPELINED),

ParseResult:
INS HdlIdDef@@OPT_SHIFTS to params
HdlIdDef: OPT_SHIFTS
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -58,7 +59,7 @@ module	idecode #(
 		parameter	[0:0]	OPT_OPIPE  = (OPT_PIPELINED),
 		parameter	[0:0]	OPT_SIM    = 1'b0,
 		parameter	[0:0]	OPT_SUPPRESS_NULL_BRANCHES = 1'b0,
-		parameter	[0:0]	OPT_NO_USERMODE = 1'b0,
+		parameter	[0:0]	OPT_USERMODE = 1'b1,
 		parameter	[0:0]	OPT_LOWPOWER = 1'b0,
 		localparam		AW = ADDRESS_WIDTH
 		// }}}

ParseResult:
UPD HdlIdDef@@OPT_NO_USERMODE to OPT_USERMODE

UPD HdlIdDef@@OPT_NO_USERMODE to OPT_NO_USERMODE
    UPD HdlValueInt@@0 to 1


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -127,7 +128,8 @@ module	idecode #(
 	wire		w_Iz;
 
 	reg	[1:0]	w_immsrc;
-	reg		r_valid, insn_is_pipeable;
+	reg		r_valid;
+	wire		insn_is_pipeable, illegal_shift;
 	// }}}
 
 	assign	pf_valid = (i_pf_valid)&&(!o_early_branch_stb);

ParseResult:
INS HdlIdDef@@insn_is_pipeable to objs
HdlIdDef: insn_is_pipeable
    HdlDirection: INTERNAL

INS HdlIdDef@@illegal_shift to objs
HdlIdDef: illegal_shift
    HdlDirection: INTERNAL


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -255,7 +257,7 @@ module	idecode #(
 
 	// dcdB - What register is used in the opB?
 	// {{{
-	assign w_dcdB[4] = ((!iword[CISBIT])&&(w_mov)&&(!OPT_NO_USERMODE)&&(!i_gie))?iword[13]:i_gie;
+	assign w_dcdB[4] = ((!iword[CISBIT])&&(w_mov)&&(OPT_USERMODE)&&(!i_gie))?iword[13]:i_gie;
 	assign w_dcdB[3:0]= (iword[CISBIT])
 				? (((!iword[CISIMMSEL])&&(iword[26:25]==2'b10))
 					? CPU_SP_REG : iword[22:19])

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@NEG_LOG to NEG_LOG
                    UPD HdlValueId@@OPT_NO_USERMODE to OPT_USERMODE
                    MOV HdlValueId@@OPT_NO_USERMODE to ops
                    HdlValueId: OPT_NO_USERMODE
                    DEL list@@ops from NEG_LOG
                DEL HdlOp@@NEG_LOG from ops


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -451,6 +479,9 @@ module	idecode #(
 		// {{{
 		o_illegal <= 1'b0;
 
+		if (illegal_shift)
+			o_illegal <= 1'b1;
+
 		if ((!OPT_CIS)&&(i_instruction[CISBIT]))
 			o_illegal <= 1'b1;
 		if ((!OPT_MPY)&&(w_mpy))

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_SHIFTS to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: illegal_shift
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmIf@@ to body
HdlStmIf
    HdlValueId: illegal_shift
    HdlStmAssign: if_true
        HdlValueInt: 1
        HdlValueId: o_illegal
    list: elifs


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -603,6 +634,8 @@ module	idecode #(
 			// Support the SIM instruction(s)
 			o_sim <= (w_sim)||(w_noop);
 			o_sim_immv <= iword[22:0];
+			if (OPT_LOWPOWER && !w_sim && !w_noop)
+				o_sim_immv <= 0;
 		end else begin
 			o_sim <= 1'b0;
 			o_sim_immv <= 0;

ParseResult:
INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: OPT_LOWPOWER
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: w_sim
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: w_noop
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: o_sim_immv
    list: elifs


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -867,14 +900,14 @@ module	idecode #(
 	assign	o_valid = r_valid;
 	// }}}
 
-
 	assign	o_I = { {(32-22){r_I[22]}}, r_I[21:0] };
 
 	// Make Verilator happy across all our various options
 	// {{{
 	// verilator lint_off  UNUSED
-	wire	[5:0] possibly_unused;
-	assign	possibly_unused = { w_lock, w_ljmp, w_ljmp_dly, w_cis_ljmp, i_pc[1:0] };
+	wire	possibly_unused;
+	assign	possibly_unused = &{ 1'b0, w_lock, w_ljmp, w_ljmp_dly,
+			insn_is_pipeable, w_cis_ljmp, i_pc[1:0] };
 	// verilator lint_on  UNUSED
 	// }}}
 ////////////////////////////////////////////////////////////////////////////////

ParseResult:
INS HdlIdDef@@possibly_unused to objs
HdlIdDef: possibly_unused
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to objs

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: i_pc
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 1
                        HdlValueInt: 0
        DEL HdlOp@@CONCAT from ops
        HdlOp: CONCAT
            list: ops
                HdlOp: CONCAT
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlValueId: w_lock
                                HdlValueId: w_ljmp
                        HdlValueId: w_ljmp_dly
                HdlValueId: w_cis_ljmp
        DEL list@@ops from CONCAT
    DEL HdlOp@@CONCAT from 
    DEL HdlValueId@@possibly_unused from 

DEL HdlIdDef@@possibly_unused from objs
HdlIdDef: possibly_unused
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 5
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlStmAssign@@ from objs


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -255,9 +255,7 @@ module	axidcache #(
 	// Misalignment detection
 	// {{{
 	always @(*)
-	begin
 		misaligned = checklsb(i_op[2:1], i_addr[AXILSB-1:0]);
-	end
 
 	function checklsb;
 		input [1:0]	 op;

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: misaligned
                HdlOp: CALL
                    list: ops
                        HdlValueId: checklsb
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 2
                                        HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_addr
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueId: AXILSB
                                                HdlValueInt: 1
                                        HdlValueInt: 0
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -593,11 +591,13 @@ module	axidcache #(
 			// }}}
 		end
 
-		if (OPT_LOWPOWER && (!r_cache_miss
-			&& (!i_pipe_stb || misaligned)))
+		if (OPT_LOWPOWER && (i_cpu_reset || (!w_cache_miss
+			&& (!i_pipe_stb || i_op[0] || misaligned
+						|| address_is_cachable))))
 		begin
 			// {{{
 			axi_araddr <= 0;
+			axi_arlen  <= 0;
 			axi_arsize <= 3'd2;
 			// }}}
 		end

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: axi_arlen

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            INS HdlValueId@@i_cpu_reset to ops
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    INS HdlValueId@@address_is_cachable to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: r_cache_miss
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: i_pipe_stb
                        HdlValueId: misaligned
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@NEG_LOG to NEG_LOG
                UPD HdlValueId@@r_cache_miss to w_cache_miss
            DEL HdlOp@@OR_LOG from ops
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: i_pipe_stb
                    HdlValueId: misaligned


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -647,7 +647,9 @@ module	axidcache #(
 			axi_awaddr[1:0] <= 0;
 		end
 
-		if (OPT_LOWPOWER && (!i_pipe_stb || !i_op[0] || misaligned))
+		if (OPT_LOWPOWER && (!i_pipe_stb || !i_op[0] || misaligned
+				|| i_cpu_reset || flushing
+				|| (M_AXI_BVALID && M_AXI_BRESP[1])))
 			axi_awaddr <= 0;
 	end
 

ParseResult:
INS HdlStmIf@@ to body

MOV HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_pipe_stb
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_op
                                            HdlValueInt: 0
                    HdlValueId: misaligned
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: axi_awaddr
    list: elifs

UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: OR_LOG
                                list: ops
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlOp: OR_LOG
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: i_pipe_stb
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_op
                                                                    HdlValueInt: 0
                                            HdlValueId: misaligned
                                    HdlValueId: i_cpu_reset
                            HdlValueId: flushing
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: M_AXI_BVALID
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: M_AXI_BRESP
                                    HdlValueInt: 1
    INS list@@elifs to 

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: axi_awaddr

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@OPT_LOWPOWER to ops
        HdlValueId: OPT_LOWPOWER
    UPD HdlOp@@AND_LOG to OR_LOG
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_pipe_stb
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_op
                                            HdlValueInt: 0
                    HdlValueId: misaligned


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -756,7 +758,7 @@ module	axidcache #(
 
 		// OPT_LOWPOWER: Clear if nothing is being used
 		// {{{
-		if (OPT_LOWPOWER && ((!i_pipe_stb || i_op[0] || misaligned)
+		if (OPT_LOWPOWER && ((!i_pipe_stb || !i_op[0] || misaligned)
 			|| (M_AXI_BVALID && M_AXI_BRESP[1])
 			|| (i_cpu_reset || flushing)))
 		begin

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: OR_LOG
                                list: ops
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlOp: NEG_LOG
                                                list: ops
                                                    HdlValueId: i_pipe_stb
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_op
                                                    HdlValueInt: 0
                                    HdlValueId: misaligned
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: M_AXI_BVALID
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: M_AXI_BRESP
                                            HdlValueInt: 1
                    HdlOp: OR_LOG
                        list: ops
                            HdlValueId: i_cpu_reset
                            HdlValueId: flushing
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: axi_wdata
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: axi_wstrb
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: i_pipe_stb
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                                HdlValueId: misaligned
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: M_AXI_BVALID
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: M_AXI_BRESP
                                        HdlValueInt: 1
                HdlOp: OR_LOG
                    list: ops
                        HdlValueId: i_cpu_reset
                        HdlValueId: flushing
        UPD HdlOp@@OR_LOG to OR_LOG
            MOV HdlOp@@OR_LOG to ops
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: i_cpu_reset
                    HdlValueId: flushing
            MOV HdlOp@@OR_LOG to ops
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: OR_LOG
                                list: ops
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_pipe_stb
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_op
                                            HdlValueInt: 0
                            HdlValueId: misaligned
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: M_AXI_BVALID
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: M_AXI_BRESP
                                    HdlValueInt: 1
            UPD HdlOp@@OR_LOG to OR_LOG
                MOV HdlOp@@AND_LOG to ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: M_AXI_BVALID
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: M_AXI_BRESP
                                HdlValueInt: 1
        DEL HdlValueId@@OPT_LOWPOWER from ops
    DEL list@@elifs from 

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG

DEL HdlStmIf@@ from body


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -1009,9 +1011,11 @@ module	axidcache #(
 	generate if (OPT_DUAL_READ_PORT)
 	begin
 		always @(posedge S_AXI_ACLK)
+		if (!OPT_LOWPOWER || (i_pipe_stb && !i_op[0]))
 			cached_iword <= cache_mem[i_caddr];
 
 		always @(posedge S_AXI_ACLK)
+		if (!OPT_LOWPOWER || o_rdbusy)
 			cached_rword <= cache_mem[r_caddr];
 	end else begin
 

ParseResult:
INS HdlStmIf@@body to 

INS HdlStmIf@@body to 

UPD HdlStmAssign@@body to if_true

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: INDEX
        list: ops
            HdlValueId: cache_mem
            HdlValueId: i_caddr
    HdlValueId: cached_iword

UPD HdlStmAssign@@body to if_true

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: INDEX
        list: ops
            HdlValueId: cache_mem
            HdlValueId: r_caddr
    HdlValueId: cached_rword


CommitId: aa94bb47309b46426d6ac64ea82acf5d9910195a
AXILPIPE FIX: Fixes LB/SB instruction
--- a/sim/rtl/iscachable.v
+++ b/sim/rtl/iscachable.v
@@ -40,8 +40,8 @@ module	iscachable #(
 		// {{{
 		parameter	ADDRESS_WIDTH=28,
 		localparam	AW = ADDRESS_WIDTH, // Just for ease of notation below
-		parameter [AW-1:0] 	MEM_ADDR  = {1'b1, {(ADDRESS_WIDTH-1){1'b0}} },
-		parameter [AW-1:0] 	MEM_MASK  = {1'b1, {(ADDRESS_WIDTH-1){1'b0}} }
+		parameter [AW-1:0] 	MEM_ADDR  = {2'b01, {(ADDRESS_WIDTH-2){1'b0}} },
+		parameter [AW-1:0] 	MEM_MASK  = {2'b11, {(ADDRESS_WIDTH-2){1'b0}} }
 		// }}}
 	) (
 		// {{{
ParseResult:
UPD HdlIdDef@@MEM_ADDR to MEM_ADDR
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlValueInt@@1 to 01
        UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
            UPD HdlOp@@SUB to SUB
                UPD HdlValueInt@@1 to 2

UPD HdlIdDef@@MEM_MASK to MEM_MASK
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlValueInt@@1 to 11
        UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
            UPD HdlOp@@SUB to SUB
                UPD HdlValueInt@@1 to 2


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -119,17 +119,25 @@ module	pipemem #(
 
 	// misaligned
 	// {{{
-	always	@(*)
-	if (OPT_ALIGNMENT_ERR)
-	begin
+	generate if (OPT_ALIGNMENT_ERR)
+	begin : GEN_ALIGNMENT_ERR
+		reg	r_mis;
+
+		always	@(*)
 		casez({ i_op[2:1], i_addr[1:0] })
-		4'b01?1: misaligned = i_pipe_stb;
-		4'b0110: misaligned = i_pipe_stb;
-		4'b10?1: misaligned = i_pipe_stb;
-		default: misaligned = i_pipe_stb;
+		4'b01?1: r_mis = i_pipe_stb;
+		4'b0110: r_mis = i_pipe_stb;
+		4'b10?1: r_mis = i_pipe_stb;
+		default: r_mis = i_pipe_stb;
 		endcase
-	end else
-		misaligned = 1'b0;
+
+		assign	misaligned = r_mis;
+
+	end else begin : NO_MISALIGNMENT_ERRS
+
+		assign	misaligned = 1'b0;
+
+	end endgenerate
 	// }}}
 
 	// fifo_mem
ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_ALIGNMENT_ERR to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: misaligned
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmProcess@@ to body

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: r_mis
    HdlValueId: misaligned

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll

INS HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  to 

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    INS HdlStmCaseType@@CASEZ to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    INS list@@cases to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    list: cases
        tuple
            HdlValueInt: 01?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: r_mis
                    HdlValueId: i_pipe_stb
        tuple
            HdlValueInt: 0110
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: r_mis
                    HdlValueId: i_pipe_stb
        tuple
            HdlValueInt: 10?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: r_mis
                    HdlValueId: i_pipe_stb
    INS HdlOp@@ASSIGN to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: r_mis
            HdlValueId: i_pipe_stb

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    MOV HdlOp@@CONCAT to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    HdlOp: CONCAT
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_op
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 2
                            HdlValueInt: 1
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 1
                            HdlValueInt: 0
    DEL HdlStmCaseType@@CASEZ from {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    DEL list@@cases from {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    list: cases
        tuple
            HdlValueInt: 01?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueId: i_pipe_stb
        tuple
            HdlValueInt: 0110
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueId: i_pipe_stb
        tuple
            HdlValueInt: 10?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueId: i_pipe_stb
    DEL HdlOp@@ASSIGN from {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: misaligned
            HdlValueId: i_pipe_stb

UPD HdlStmIf@@body to body
    DEL HdlValueId@@OPT_ALIGNMENT_ERR from body
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from body
    DEL list@@elifs from body
    DEL HdlOp@@ASSIGN from body
    HdlOp: ASSIGN
        list: ops
            HdlValueId: misaligned
            HdlValueInt: 0

DEL HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  from body

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs


CommitId: af29287d84eeff5eb2ac63b48be6fc5461b4a59b
Fixed some remaining 8-bit byte bugs in wbdmac
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -197,7 +197,8 @@ module wbdmac(i_clk, i_rst,
 		begin
 			case(i_swb_addr)
 			2'b00: begin
-				if ((i_swb_data[31:16] == 16'h0fed)
+				if ((i_swb_data[27:16] == 12'hfed)
+					&&(i_swb_data[31:30] == 2'b00)
 						&&(cfg_len_nonzero))
 					dma_state <= `DMA_WAIT;
 				cfg_blocklen_sub_one

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@NEG to NEG_LOG

UPD HdlStmAssign@@ to 
    UPD HdlOp@@NEG to NEG_LOG


CommitId: af29287d84eeff5eb2ac63b48be6fc5461b4a59b
Fixed some remaining 8-bit byte bugs in wbdmac
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -206,15 +207,15 @@ module wbdmac(i_clk, i_rst,
 					// i.e. -1;
 				cfg_dev_trigger    <= i_swb_data[14:10];
 				cfg_on_dev_trigger <= i_swb_data[15];
-				cfg_incs  <= ~i_swb_data[29];
-				cfg_incd  <= ~i_swb_data[28];
+				cfg_incs  <= !i_swb_data[29];
+				cfg_incd  <= !i_swb_data[28];
 				end
 			2'b01: begin
 				cfg_len   <=  i_swb_data[(AW-1):0];
 				cfg_len_nonzero <= (|i_swb_data[(AW-1):0]);
 				end
-			2'b10: cfg_raddr <=  i_swb_data[(AW-1):0];
-			2'b11: cfg_waddr <=  i_swb_data[(AW-1):0];
+			2'b10: cfg_raddr <=  i_swb_data[(AW+2-1):2];
+			2'b11: cfg_waddr <=  i_swb_data[(AW+2-1):2];
 			endcase
 		end end
 	`DMA_WAIT: begin

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@0 to 2
            UPD HdlOp@@SUB to SUB
                MOV HdlValueId@@AW to ops
                HdlValueId: AW

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@0 to 2
            UPD HdlOp@@SUB to SUB
                MOV HdlValueId@@AW to ops
                HdlValueId: AW

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                INS HdlOp@@ADD to ops
                UPD HdlOp@@ADD to ADD
                    INS list@@ops to ADD
                    INS HdlValueInt@@2 to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                INS HdlOp@@ADD to ops
                UPD HdlOp@@ADD to ADD
                    INS list@@ops to ADD
                    INS HdlValueInt@@2 to ops


CommitId: af29287d84eeff5eb2ac63b48be6fc5461b4a59b
Fixed some remaining 8-bit byte bugs in wbdmac
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -453,8 +454,8 @@ module wbdmac(i_clk, i_rst,
 					cfg_blocklen_sub_one
 					};
 		2'b01: o_swb_data <= { {(DW-AW){1'b0}}, cfg_len  };
-		2'b10: o_swb_data <= { {(DW-AW){1'b0}}, cfg_raddr};
-		2'b11: o_swb_data <= { {(DW-AW){1'b0}}, cfg_waddr};
+		2'b10: o_swb_data <= { {(DW-2-AW){1'b0}}, cfg_raddr, 2'b00 };
+		2'b11: o_swb_data <= { {(DW-2-AW){1'b0}}, cfg_waddr, 2'b00 };
 		endcase
 
 	// This causes us to wait a minimum of two clocks before starting: One
ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@CONCAT to 
    UPD HdlOp@@CONCAT to CONCAT
        INS list@@ops to CONCAT
        INS HdlValueInt@@00 to ops
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
                UPD HdlOp@@SUB to SUB
                    INS HdlOp@@SUB to ops
                    UPD HdlOp@@SUB to SUB
                        INS list@@ops to SUB
                        INS HdlValueInt@@2 to ops


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/sim/rtl/memdev.v
+++ b/sim/rtl/memdev.v
@@ -95,14 +94,18 @@ module	memdev #(
 		assign	w_data = i_wb_data;
 		assign	w_sel  = i_wb_sel;
 		// }}}
-	end else begin : NO_EXTRA_CLK
+	end else begin : EXTRA_MEM_CLOCK_CYCLE
 		// {{{
-		reg		last_wstb, last_stb;
+		reg			last_wstb, last_stb;
 		reg	[(AW-1):0]	last_addr;
 		reg	[(DW-1):0]	last_data;
 		reg	[(DW/8-1):0]	last_sel;
 
+		initial	last_wstb = 0;
 		always @(posedge i_clk)
+		if (i_reset)
+			last_wstb <= 0;
+		else
 			last_wstb <= (i_wb_stb)&&(i_wb_we);
 
 		initial	last_stb = 1'b0;

ParseResult:
INS HdlStmProcess@@ to body
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: last_wstb
                    HdlValueInt: 0
            HdlStmWait:
                list: val

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: last_wstb

UPD HdlStmAssign@@body to if_false

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_wb_stb
            HdlValueId: i_wb_we
    HdlValueId: last_wstb


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/sim/rtl/memdev.v
+++ b/sim/rtl/memdev.v
@@ -128,31 +131,38 @@ module	memdev #(
 	end endgenerate
 	// }}}
 
+	// Read from memory
+	// {{{
 	always @(posedge i_clk)
 		o_wb_data <= mem[w_addr];
+	// }}}
 
-	// Write to memory
+	// Write to memory (if not a ROM)
 	// {{{
 	generate if (!OPT_ROM)
 	begin : WRITE_TO_MEMORY
+		// {{{
 		integer	ik;
 
 		always @(posedge i_clk)
 		if (w_wstb)
-		for(ik=0; ik < DW/8; ik=ik+1)
-		if (w_sel[ik])
-			mem[w_addr][ik * 8 +: 8] <= w_data[ik*8 +: 8];
+		begin
+			for(ik=0; ik<DW/8; ik=ik+1)
+			if (w_sel[ik])
+				mem[w_addr][ik*8 +: 8] <= w_data[ik*8 +: 8];
+		end
 `ifdef	VERILATOR
 	end else begin : VERILATOR_ROM
 
 		// Make Verilator happy
 		// Verilator coverage_off
 		// Verilator lint_off UNUSED
-		wire	[DW+DW/8:0]	rom_unused;
-		assign	rom_unused = { w_wstb, w_data, w_sel };
+		wire	rom_unused;
+		assign	rom_unused = &{ 1'b0, w_wstb, w_data, w_sel };
 		// Verilator lint_on  UNUSED
 		// Verilator coverage_on
 `endif
+		// }}}
 	end endgenerate
 	// }}}
 

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlStmBlock@@SEQ to body
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmFor@@if_true to 

MOV HdlStmFor@@if_true to body
HdlStmFor: if_true
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: ik
    HdlOp: LT
        list: ops
            HdlValueId: ik
            HdlOp: DIV
                list: ops
                    HdlValueId: DW
                    HdlValueInt: 8
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: ik
                    HdlOp: ADD
                        list: ops
                            HdlValueId: ik
                            HdlValueInt: 1
    HdlStmIf: body
        HdlOp: INDEX
            list: ops
                HdlValueId: w_sel
                HdlValueId: ik
        HdlStmAssign: if_true
            HdlOp: INDEX
                list: ops
                    HdlValueId: w_data
                    HdlOp: PART_SELECT_POST
                        list: ops
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: ik
                                    HdlValueInt: 8
                            HdlValueInt: 8
            HdlOp: INDEX
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: mem
                            HdlValueId: w_addr
                    HdlOp: PART_SELECT_POST
                        list: ops
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: ik
                                    HdlValueInt: 8
                            HdlValueInt: 8
        list: elifs


CommitId: 097c79344952c2caef83f057348d1d18ab2dd445
Default to use OPT_DCACHE in ZipSystem
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -178,7 +178,7 @@ module	zipsystem(i_clk, i_reset,
 		);
 	parameter	RESET_ADDRESS=32'h1000_0000, ADDRESS_WIDTH=30,
 			LGICACHE=10,
-			LGDCACHE=0;	// Set to zero for no data cache
+			LGDCACHE=12;	// Set to zero for no data cache
 	parameter [0:0]	START_HALTED=1;
 	parameter	EXTERNAL_INTERRUPTS=1,
 `ifdef	OPT_MULTIPLY
ParseResult:
UPD HdlIdDef@@LGDCACHE to LGDCACHE
    UPD HdlValueInt@@0 to 12


CommitId: adced841689d59b0d797edb131dcadfde7b22bc0
Fixed issue building rtl/ without OPT_CIS
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -132,6 +132,11 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 			: i_instruction;
 	end else begin : CLR_IWORD
 		assign	iword = { 1'b0, i_instruction[30:0] };
+
+		// verilator lint_off UNUSED
+		wire	[15:0]	unused_nxt_half;
+		assign		unused_nxt_half = r_nxt_half;
+		// verilator lint_on  UNUSED
 	end endgenerate
 
 	generate
ParseResult:
INS HdlIdDef@@unused_nxt_half to body
HdlIdDef: unused_nxt_half
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 15
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: r_nxt_half
    HdlValueId: unused_nxt_half


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -448,21 +464,37 @@ module	zipaxi #(
 		// }}}
 	);
 
-	assign	dbg_read_ready = arskd_valid && !dbg_read_valid
+	assign	dbg_read_ready = arskd_valid && !dbg_blkram_stall
 				&& (!S_DBG_RVALID || S_DBG_RREADY);
 
 	assign	dbg_read_reg = (OPT_LOWPOWER && !dbg_read_ready)
 					? 5'h0 : arskd_addr[4:0];
 
 	// dbg_read_valid
+	reg	[1:0]	r_blkram_stall;
+
+	initial	r_blkram_stall = 0;
+	always @(posedge S_AXI_ACLK)
+	if (!S_AXI_ARESETN || !OPT_DBGPORT)
+		r_blkram_stall <= 0;
+	else if (dbg_read_ready && arskd_addr[5] == DBG_ADDR_CPU)
+		r_blkram_stall <= 2 + (OPT_DISTRIBUTED_REGS ? 0:1);
+	else if (r_blkram_stall > 0)
+		r_blkram_stall <= r_blkram_stall - 1;
 	// {{{
 	initial	dbg_read_valid = 0;
 	always @(posedge S_AXI_ACLK)
 	if (!S_AXI_ARESETN || !OPT_DBGPORT)
 		dbg_read_valid <= 0;
 	else
-		dbg_read_valid <= dbg_read_ready
-					&& arskd_addr[5] == DBG_ADDR_CPU;
+		dbg_read_valid <= (r_blkram_stall == 1);
+
+	assign	dbg_blkram_stall = (r_blkram_stall != 0);
+`ifdef	FORMAL
+	always @(*)
+	if (S_AXI_ARESETN && (dbg_read_valid || dbg_blkram_stall))
+		assert(!S_DBG_RVALID);
+`endif
 	// }}}
 
 	// S_DBG_RVALID

ParseResult:
MOV HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: dbg_read_valid
                    HdlValueInt: 0
            HdlStmWait:
                list: val

INS HdlIdDef@@r_blkram_stall to objs
HdlIdDef: r_blkram_stall
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: r_blkram_stall
                    HdlValueInt: 0
            HdlStmWait:
                list: val

INS HdlStmProcess@@ to objs

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: NE
        list: ops
            HdlValueId: r_blkram_stall
            HdlValueInt: 0
    HdlValueId: dbg_blkram_stall

INS HdlStmIf@@body to 

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_blkram_stall

MOV HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: dbg_read_valid

INS HdlStmAssign@@if_false to body
HdlStmAssign: if_false
    HdlOp: EQ
        list: ops
            HdlValueId: r_blkram_stall
            HdlValueInt: 1
    HdlValueId: dbg_read_valid

UPD HdlStmAssign@@if_false to if_false
    MOV HdlOp@@AND_LOG to if_false
    HdlOp: AND_LOG
        list: ops
            HdlValueId: dbg_read_ready
            HdlOp: EQ
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: arskd_addr
                            HdlValueInt: 5
                    HdlValueId: DBG_ADDR_CPU
    UPD HdlValueId@@dbg_read_valid to OPT_DISTRIBUTED_REGS
    MOV HdlValueId@@dbg_read_valid to if_false
    HdlValueId: dbg_read_valid

INS HdlStmAssign@@ to 

UPD HdlStmIf@@body to body
    DEL list@@elifs from body

DEL HdlStmAssign@@if_false from body


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axipipe.v
+++ b/rtl/core/axipipe.v
@@ -180,7 +180,7 @@ module	axipipe #(
 	wire	[1:0]			fifo_op;
 	wire	[3:0]			fifo_return_reg;
 	wire	[AXILSB-1:0]		fifo_lsb;
-	reg [2*C_AXI_DATA_WIDTH-1:0]	wide_return, wide_wdata;
+	reg [2*C_AXI_DATA_WIDTH-1:0]	wide_return, wide_wdata, pre_result;
 	reg [2*C_AXI_DATA_WIDTH/8-1:0]	wide_wstrb;
 	reg	[C_AXI_DATA_WIDTH-1:0]	misdata;
 

ParseResult:
INS HdlIdDef@@pre_result to objs
HdlIdDef: pre_result
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: MUL
                                list: ops
                                    HdlValueInt: 2
                                    HdlValueId: C_AXI_DATA_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: adbe0cd6935d9555be6c75fbe9646df2b479805a
Fixed LOCK instruction, based on the ZBasic LOCKCHECK simulation
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1717,11 +1717,9 @@ module	zipcore #(
 
 	// Bus lock logic
 	// {{{
-	generate
-	if (OPT_LOCK)
+	generate if (OPT_LOCK)
 	begin : BUSLOCK
 		reg		r_prelock_stall;
-		reg		r_prelock_primed;
 		reg	[1:0]	r_bus_lock;
 		reg [AW+1:0]	r_lock_pc;
 

ParseResult:
UPD HdlStmIf@@ to body

MOV HdlStmIf@@ to body
HdlStmIf
    HdlOp: NE
        list: ops
            HdlValueId: r_bus_lock
            HdlValueInt: 00
    HdlStmAssign: if_true
        HdlOp: SUB
            list: ops
                HdlValueId: r_bus_lock
                HdlValueInt: 1
        HdlValueId: r_bus_lock
    list: elifs
        tuple
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: OPT_PIPELINED
            HdlStmBlock: SEQ
                list: body
                    HdlStmIf
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: op_valid
                                        HdlValueId: op_lock
                                HdlValueId: op_ce
                        HdlStmAssign: if_true
                            HdlValueInt: 10
                            HdlValueId: r_bus_lock
                        list: elifs
        tuple
            HdlValueId: r_prelock_primed
            HdlStmAssign
                HdlValueInt: 10
                HdlValueId: r_bus_lock

UPD HdlStmIf@@body to body
    MOV HdlValueId@@clear_pipeline to body
    HdlValueId: clear_pipeline
    UPD HdlStmBlock@@SEQ to SEQ
        UPD list@@body to elifs
        MOV list@@body to SEQ
        list: body
            HdlStmIf
                HdlOp: NE
                    list: ops
                        HdlValueId: r_bus_lock
                        HdlValueInt: 00
                HdlStmAssign: if_true
                    HdlOp: SUB
                        list: ops
                            HdlValueId: r_bus_lock
                            HdlValueInt: 1
                    HdlValueId: r_bus_lock
                list: elifs
                    tuple
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_PIPELINED
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmIf
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlValueId: op_valid
                                                    HdlValueId: op_lock
                                            HdlValueId: op_ce
                                    HdlStmAssign: if_true
                                        HdlValueInt: 10
                                        HdlValueId: r_bus_lock
                                    list: elifs
                    tuple
                        HdlValueId: r_prelock_primed
                        HdlStmAssign
                            HdlValueInt: 10
                            HdlValueId: r_bus_lock
    MOV tuple@@ to elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlValueId: op_valid
                HdlOp: OR_LOG
                    list: ops
                        HdlValueId: adf_ce_unconditional
                        HdlValueId: mem_ce
        HdlStmBlock: SEQ
            list: body
                HdlStmIf
                    HdlOp: NE
                        list: ops
                            HdlValueId: r_bus_lock
                            HdlValueInt: 00
                    HdlStmAssign: if_true
                        HdlOp: SUB
                            list: ops
                                HdlValueId: r_bus_lock
                                HdlValueInt: 1
                        HdlValueId: r_bus_lock
                    list: elifs
                        tuple
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: OPT_PIPELINED
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlValueId: op_valid
                                                        HdlValueId: op_lock
                                                HdlValueId: op_ce
                                        HdlStmAssign: if_true
                                            HdlValueInt: 10
                                            HdlValueId: r_bus_lock
                                        list: elifs
                        tuple
                            HdlValueId: r_prelock_primed
                            HdlStmAssign
                                HdlValueInt: 10
                                HdlValueId: r_bus_lock
    DEL HdlStmBlock@@SEQ from 
    DEL list@@elifs from body

MOV HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 00
    HdlValueId: r_bus_lock

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: op_valid
                                HdlValueId: op_lock
                        HdlValueId: op_ce
                HdlStmAssign: if_true
                    HdlValueInt: 10
                    HdlValueId: r_bus_lock
                list: elifs
    UPD list@@elifs to body
    MOV list@@elifs to 
    list: elifs
        tuple
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: OPT_PIPELINED
            HdlStmBlock: SEQ
                list: body
                    HdlStmIf
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: op_valid
                                        HdlValueId: op_lock
                                HdlValueId: op_ce
                        HdlStmAssign: if_true
                            HdlValueInt: 10
                            HdlValueId: r_bus_lock
                        list: elifs
        tuple
            HdlValueId: r_prelock_primed
            HdlStmAssign
                HdlValueInt: 10
                HdlValueId: r_bus_lock
    MOV HdlOp@@NE to 
    HdlOp: NE
        list: ops
            HdlValueId: r_bus_lock
            HdlValueInt: 00
    UPD HdlStmBlock@@SEQ to SEQ
        UPD list@@body to elifs
        MOV list@@body to SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: op_valid
                                HdlValueId: op_lock
                        HdlValueId: op_ce
                HdlStmAssign: if_true
                    HdlValueInt: 10
                    HdlValueId: r_bus_lock
                list: elifs
    MOV tuple@@ to elifs
    tuple
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: OPT_PIPELINED
        HdlStmBlock: SEQ
            list: body
                HdlStmIf
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: op_valid
                                    HdlValueId: op_lock
                            HdlValueId: op_ce
                    HdlStmAssign: if_true
                        HdlValueInt: 10
                        HdlValueId: r_bus_lock
                    list: elifs
    DEL HdlOp@@NEG_LOG from 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: OPT_PIPELINED
    DEL tuple@@ from elifs
    tuple
        HdlValueId: r_prelock_primed
        HdlStmAssign
            HdlValueInt: 10
            HdlValueId: r_bus_lock

MOV HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: op_valid
                    HdlValueId: op_lock
            HdlValueId: op_ce
    HdlStmAssign: if_true
        HdlValueInt: 10
        HdlValueId: r_bus_lock
    list: elifs

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlOp: SUB
        list: ops
            HdlValueId: r_bus_lock
            HdlValueInt: 1
    HdlValueId: r_bus_lock

UPD HdlStmIf@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: op_valid
                    HdlValueId: op_lock
            HdlValueId: op_ce
    DEL list@@elifs from 

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueInt: 10
    HdlValueId: r_bus_lock

UPD HdlStmAssign@@if_true to if_true
    UPD HdlValueInt@@10 to 11

DEL HdlStmIf@@body from 


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/core/cpuops.v
+++ b/rtl/core/cpuops.v
@@ -40,7 +40,7 @@
 // }}}
 module	cpuops #(
 		// {{{
-		parameter		OPT_MPY = 0,
+		parameter		OPT_MPY = 3,	// == 0 (no mpy),1-4,36
 		parameter	[0:0]	OPT_SHIFTS = 1'b1,
 		parameter	[0:0]	OPT_LOWPOWER = 1'b1
 		// }}}

ParseResult:
UPD HdlIdDef@@OPT_MPY to OPT_MPY
    UPD HdlValueInt@@0 to 3


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/abs_mpy.v
+++ b/bench/formal/abs_mpy.v
@@ -87,11 +96,11 @@ module	abs_mpy(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result,
 			||(next_delay_to_valid < MAXDELAY));
 
 		// always @(*)
-		// if (IMPLEMENT_MPY == 1)
+		// if (OPT_MPY == 1)
 			// assume(next_delay_to_valid == 0);
 		always @(*)
-		if (IMPLEMENT_MPY>0)
-			assume(next_delay_to_valid == IMPLEMENT_MPY-1);
+		if (OPT_MPY>0)
+			assume(next_delay_to_valid == OPT_MPY-1);
 
 		initial	delay_to_valid = 3'h0;
 		always @(posedge i_clk)

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@body to body
    UPD HdlOp@@GT to GT
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY
    UPD HdlOp@@CALL to CALL
        UPD HdlOp@@EQ to EQ
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/abs_mpy.v
+++ b/bench/formal/abs_mpy.v
@@ -125,11 +134,14 @@ module	abs_mpy(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result,
 			o_hi <= i_op[1];
 
 		assign	o_busy = r_busy;
-	end
-	endgenerate // All possible multiply results have been determined
+		// }}}
+	end endgenerate // All possible multiply results have been determined
 
+	// Keep Verilator happy
+	// {{{
 	// Verilator lint_off UNUSED
 	wire	unused;
 	assign	unused = &{ 1'b0, i_op, i_a, i_b };
 	// Verilator lint_on  UNUSED
+	// }}}
 endmodule
ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY


CommitId: 14d863f0e8cac704de229ba5557fe4ffaf39ea65
[WIP]: ZipCore clock work.  MemPipe fixed again.
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -59,6 +59,7 @@ module	idecode #(
 		parameter	[0:0]	OPT_SIM    = 1'b0,
 		parameter	[0:0]	OPT_SUPPRESS_NULL_BRANCHES = 1'b0,
 		parameter	[0:0]	OPT_NO_USERMODE = 1'b0,
+		parameter	[0:0]	OPT_LOWPOWER = 1'b0,
 		localparam		AW = ADDRESS_WIDTH
 		// }}}
 	) (

ParseResult:
INS HdlIdDef@@OPT_LOWPOWER to params
HdlIdDef: OPT_LOWPOWER
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 14d863f0e8cac704de229ba5557fe4ffaf39ea65
[WIP]: ZipCore clock work.  MemPipe fixed again.
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -125,8 +127,7 @@ module	idecode #(
 	wire		w_Iz;
 
 	reg	[1:0]	w_immsrc;
-	reg	r_valid, r_insn_is_pipeable;
-
+	reg		r_valid, insn_is_pipeable;
 	// }}}
 
 	assign	pf_valid = (i_pf_valid)&&(!o_early_branch_stb);

ParseResult:
MOV HdlIdDef@@r_insn_is_pipeable to objs
HdlIdDef: r_insn_is_pipeable
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL


CommitId: 14d863f0e8cac704de229ba5557fe4ffaf39ea65
[WIP]: ZipCore clock work.  MemPipe fixed again.
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -685,24 +686,38 @@ module	idecode #(
 
 		initial	r_branch_pc = 0;
 		always @(posedge i_clk)
-		if (i_ce)
+		if (OPT_LOWPOWER && i_reset)
+			r_branch_pc <= 0;
+		else if (i_ce)
 		begin
 			if (r_ljmp)
 				r_branch_pc <= { iword[(AW+1):2],
 						2'b00 };
-			else begin
-			// Add x,PC
-			r_branch_pc[AW+1:2] <= i_pc[AW+1:2]
-				+ {{(AW-15){iword[17]}},iword[16:2]}
-				+ {{(AW-1){1'b0}},1'b1};
-			r_branch_pc[1:0] <= 2'b00;
-			end
+			else if (!OPT_LOWPOWER
+				|| (!iword[CISBIT]&&(iword[30:27]==CPU_PC_REG)
+					&&w_cond[3]&& w_add && !iword[IMMSEL]))
+			begin
+				// Add x,PC
+				r_branch_pc[AW+1:2] <= i_pc[AW+1:2]
+					+ {{(AW-15){iword[17]}},iword[16:2]}
+					+ {{(AW-1){1'b0}},1'b1};
+				r_branch_pc[1:0] <= 2'b00;
+			end else if (OPT_LOWPOWER)
+				r_branch_pc <= 0;
+
+			if (OPT_LOWPOWER && !pf_valid)
+				r_branch_pc <= 0;
 		end
 
 		assign	w_ljmp_dly         = r_ljmp;
 		assign	o_early_branch     = r_early_branch;
 		assign	o_early_branch_stb = r_early_branch_stb;
 		assign	o_branch_pc        = r_branch_pc;
+`ifdef	FORMAL
+		always @(*)
+		if (OPT_LOWPOWER && !r_early_branch)
+			assert(r_branch_pc == 0);
+`endif
 		// }}}
 	end else begin : NO_EARLY_BRANCHING
 		// {{{

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlValueId: i_reset
    INS list@@elifs to body
    INS tuple@@ to elifs

UPD HdlStmIf@@body to body
    MOV HdlValueId@@i_ce to body
    HdlValueId: i_ce
    MOV HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlValueId: r_ljmp
                HdlStmAssign: if_true
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: iword
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlOp: ADD
                                                list: ops
                                                    HdlValueId: AW
                                                    HdlValueInt: 1
                                            HdlValueInt: 2
                            HdlValueInt: 00
                    HdlValueId: r_branch_pc
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_pc
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlOp: ADD
                                                                list: ops
                                                                    HdlValueId: AW
                                                                    HdlValueInt: 1
                                                            HdlValueInt: 2
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlOp: REPL_CONCAT
                                                        list: ops
                                                            HdlOp: SUB
                                                                list: ops
                                                                    HdlValueId: AW
                                                                    HdlValueInt: 15
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: iword
                                                                    HdlValueInt: 17
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: iword
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 16
                                                                    HdlValueInt: 2
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlValueId: AW
                                                            HdlValueInt: 1
                                                    HdlValueInt: 0
                                            HdlValueInt: 1
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_branch_pc
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlOp: ADD
                                                list: ops
                                                    HdlValueId: AW
                                                    HdlValueInt: 1
                                            HdlValueInt: 2
                        HdlStmAssign
                            HdlValueInt: 00
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_branch_pc
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 1
                                            HdlValueInt: 0
    DEL list@@elifs from body

INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: pf_valid
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: r_branch_pc
    list: elifs

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS tuple@@ to elifs
    INS tuple@@ to elifs
    tuple
        HdlValueId: OPT_LOWPOWER
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: r_branch_pc
    INS HdlOp@@OR_LOG to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@NEG_LOG to ops
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: iword
                                                        HdlValueId: CISBIT
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: iword
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 30
                                                                HdlValueInt: 27
                                                HdlValueId: CPU_PC_REG
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_cond
                                        HdlValueInt: 3
                        HdlValueId: w_add
                HdlOp: NEG_LOG
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: iword
                                HdlValueId: IMMSEL
        UPD HdlOp@@NEG_LOG to NEG_LOG
            INS HdlValueId@@OPT_LOWPOWER to ops

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: ADD
                    list: ops
                        HdlOp: ADD
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_pc
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlOp: ADD
                                                    list: ops
                                                        HdlValueId: AW
                                                        HdlValueInt: 1
                                                HdlValueInt: 2
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: REPL_CONCAT
                                            list: ops
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlValueId: AW
                                                        HdlValueInt: 15
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: iword
                                                        HdlValueInt: 17
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: iword
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 16
                                                        HdlValueInt: 2
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueId: AW
                                                HdlValueInt: 1
                                        HdlValueInt: 0
                                HdlValueInt: 1
                HdlOp: INDEX
                    list: ops
                        HdlValueId: r_branch_pc
                        HdlOp: DOWNTO
                            list: ops
                                HdlOp: ADD
                                    list: ops
                                        HdlValueId: AW
                                        HdlValueInt: 1
                                HdlValueInt: 2
            HdlStmAssign
                HdlValueInt: 00
                HdlOp: INDEX
                    list: ops
                        HdlValueId: r_branch_pc
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
    UPD list@@elifs to ops
    MOV list@@elifs to 
    list: elifs


CommitId: 14d863f0e8cac704de229ba5557fe4ffaf39ea65
[WIP]: ZipCore clock work.  MemPipe fixed again.
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -811,13 +827,12 @@ module	idecode #(
 		// }}}
 	end else begin
 		// {{{
-		assign o_pipe = 1'b0;
-		always @(*)
-			r_insn_is_pipeable = 1'b0;
+		assign	o_pipe = 1'b0;
+		assign	insn_is_pipeable = 1'b0;
 
 		// verilator lint_off UNUSED
 		wire	unused_pipable;
-		assign	unused_pipable = r_insn_is_pipeable;
+		assign	unused_pipable = insn_is_pipeable;
 		// verilator lint_on  UNUSED
 		// }}}
 	end endgenerate

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        MOV HdlValueInt@@0 to ops
        HdlValueInt: 0
        DEL HdlValueId@@r_insn_is_pipeable from ops
        DEL list@@ops from ASSIGN
    DEL list@@sensitivity from 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@r_insn_is_pipeable to insn_is_pipeable

DEL HdlStmProcess@@ from body


CommitId: 092c90604600f8ff11305c14f234f2b74b32fc5c
Verilator lint fixes
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -53,7 +53,7 @@ module	memops #(
 		parameter [0:0]	IMPLEMENT_LOCK=1'b1,
 				WITH_LOCAL_BUS=1'b1,
 				OPT_ALIGNMENT_ERR=1'b1,
-				OPT_ZERO_ON_IDLE=1'b0,
+				OPT_LOWPOWER=1'b0,
 				OPT_LITTLE_ENDIAN = 1'b0,
 		localparam	AW=ADDRESS_WIDTH,
 		parameter	F_LGDEPTH = 2

ParseResult:
UPD HdlIdDef@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER


CommitId: 092c90604600f8ff11305c14f234f2b74b32fc5c
Verilator lint fixes
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -191,7 +191,7 @@ module	memops #(
 	if (i_stb)
 	begin
 		o_wb_we   <= i_op[0];
-		if (OPT_ZERO_ON_IDLE)
+		if (OPT_LOWPOWER)
 		begin
 			casez({ OPT_LITTLE_ENDIAN, i_op[2:1], i_addr[1:0] })
 			5'b0100?: o_wb_data <= { i_data[15:0], 16'h00 };

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER


CommitId: 092c90604600f8ff11305c14f234f2b74b32fc5c
Verilator lint fixes
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -238,7 +238,7 @@ module	memops #(
 		default: o_wb_sel <= 4'b1111;
 		endcase
 		r_op <= { i_op[2:1] , i_addr[1:0] };
-	end else if ((OPT_ZERO_ON_IDLE)&&(!o_wb_cyc_gbl)&&(!o_wb_cyc_lcl))
+	end else if ((OPT_LOWPOWER)&&(!o_wb_cyc_gbl)&&(!o_wb_cyc_lcl))
 	begin
 		o_wb_we   <= 1'b0;
 		o_wb_addr <= 0;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER


CommitId: 092c90604600f8ff11305c14f234f2b74b32fc5c
Verilator lint fixes
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -293,12 +293,13 @@ module	memops #(
 	// o_result
 	// {{{
 	always @(posedge i_clk)
-	if ((OPT_ZERO_ON_IDLE)&&(!i_wb_ack))
+	if ((OPT_LOWPOWER)&&(!i_wb_ack))
 		o_result <= 32'h0;
 	else begin
 		casez({ OPT_LITTLE_ENDIAN, r_op })
 		5'b?01??: o_result <= i_wb_data;
 		//
+		// Big endian
 		5'b0100?: o_result <= { 16'h00, i_wb_data[31:16] };
 		5'b0101?: o_result <= { 16'h00, i_wb_data[15: 0] };
 		5'b01100: o_result <= { 24'h00, i_wb_data[31:24] };

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER


CommitId: 092c90604600f8ff11305c14f234f2b74b32fc5c
Verilator lint fixes
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -306,6 +307,8 @@ module	memops #(
 		5'b01110: o_result <= { 24'h00, i_wb_data[15: 8] };
 		5'b01111: o_result <= { 24'h00, i_wb_data[ 7: 0] };
 		//
+		// Little endian : Same bus result, just grab a different bits
+		//   from the bus return to send back to the CPU.
 		5'b1100?: o_result <= { 16'h00, i_wb_data[15: 0] };
 		5'b1101?: o_result <= { 16'h00, i_wb_data[31:16] };
 		5'b11100: o_result <= { 24'h00, i_wb_data[ 7: 0] };

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/core/zipwb.v
+++ b/rtl/core/zipwb.v
@@ -143,6 +143,7 @@ module	zipwb #(
 		input	wire	[4:0]		i_dbg_rreg,
 		// Debug interface -- outputs
 		output	wire			o_dbg_stall,
+		output	wire			o_halted,
 		output	wire [DATA_WIDTH-1:0]	o_dbg_reg,
 		output	wire	[2:0]		o_dbg_cc,
 		output	wire			o_break,

ParseResult:
INS HdlIdDef@@o_halted to ports
HdlIdDef: o_halted
    HdlDirection: OUT


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/core/zipwb.v
+++ b/rtl/core/zipwb.v
@@ -301,6 +302,7 @@ module	zipwb #(
 	);
 
 	assign	o_dbg_stall = w_dbg_stall || !clk_gate;
+	assign	o_halted    = !w_dbg_stall;
 	// }}}
 	// o_debug -- the debugging bus input
 	// {{{
ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: w_dbg_stall
    HdlValueId: o_halted


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1916,8 +1916,10 @@ module	zipcore #(
 			always @(posedge i_clk)
 			begin
 				if (!i_reset && !clear_pipeline
-						&& adf_ce_unconditional
-						&& op_sim && op_valid_alu)
+					&& adf_ce_unconditional && set_cond
+					&& op_sim && op_valid_alu
+					&&(!wr_reg_ce || !wr_write_pc
+						|| wr_reg_id[4] != alu_gie))
 				begin
 				// Execute simulation only instructions
 				// {{{

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_SIM to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_USERMODE to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: wr_reg_ce
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: wr_write_pc
                HdlOp: NE
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: wr_reg_id
                                HdlValueInt: 4
                        HdlValueId: alu_gie
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlValueId@@op_valid_alu to ops

UPD HdlStmIf@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_reset
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: clear_pipeline
                            HdlValueId: adf_ce_unconditional
                    HdlValueId: op_sim
            HdlValueId: op_valid_alu
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@op_valid_alu to op_sim
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@op_sim to set_cond

UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_SIM from 
    DEL list@@elifs from 

UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_USERMODE from 
    DEL list@@elifs from 


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2066,8 +2068,10 @@ module	zipcore #(
 			always @(posedge i_clk)
 			begin
 				if (!i_reset && !clear_pipeline
-						&& adf_ce_unconditional
-						&& op_sim && op_valid_alu)
+					&& adf_ce_unconditional && set_cond
+					&& op_sim && op_valid_alu
+					&&(!wr_reg_ce || !wr_write_pc
+						|| wr_reg_id[4] != alu_gie))
 				begin
 				// Execute simulation only instructions
 				// {{{

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_SIM to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_USERMODE to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: wr_reg_ce
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: wr_write_pc
                HdlOp: NE
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: wr_reg_id
                                HdlValueInt: 4
                        HdlValueId: alu_gie
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlValueId@@op_valid_alu to ops

UPD HdlStmIf@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_reset
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: clear_pipeline
                            HdlValueId: adf_ce_unconditional
                    HdlValueId: op_sim
            HdlValueId: op_valid_alu
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@op_valid_alu to op_sim
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@op_sim to set_cond

UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_SIM from 
    DEL list@@elifs from 

UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_USERMODE from 
    DEL list@@elifs from 


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axilpipe.v
+++ b/rtl/core/axilpipe.v
@@ -120,6 +120,7 @@ module	axilpipe #(
 	// Declarations
 	// {{{
 	localparam	AXILLSB = $clog2(C_AXI_DATA_WIDTH/8);
+	localparam	AXILSB = $clog2(C_AXI_DATA_WIDTH/8);
 	localparam	LGPIPE = 4;
 	localparam	FIFO_WIDTH = AXILLSB+1+2+5 + 1;
 

ParseResult:
INS HdlIdDef@@AXILSB to objs
HdlIdDef: AXILSB
    HdlOp: CALL
        list: ops
            HdlValueId: $clog2
            HdlOp: DIV
                list: ops
                    HdlValueId: C_AXI_DATA_WIDTH
                    HdlValueInt: 8
    HdlDirection: INTERNAL


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axilpipe.v
+++ b/rtl/core/axilpipe.v
@@ -141,14 +142,14 @@ module	axilpipe #(
 	reg	[LGPIPE:0]		wraddr, rdaddr;
 	reg	[4:0]			ar_oreg;
 	reg	[1:0]			ar_op;
-	reg	[AXILLSB-1:0]		adr_lsb;
+	reg	[AXILSB-1:0]		adr_lsb;
 	reg	[FIFO_WIDTH-1:0]	fifo_data	[0:((1<<LGPIPE)-1)];
 	reg	[FIFO_WIDTH-1:0]	fifo_read_data;
 	wire				fifo_read_op, fifo_misaligned;
 	wire	[1:0]			fifo_op;
 	wire	[4:0]			fifo_return_reg;
-	wire	[AXILLSB-1:0]		fifo_lsb;
-	reg [2*C_AXI_DATA_WIDTH-1:0]	wide_return, wide_wdata;
+	wire	[AXILSB-1:0]		fifo_lsb;
+	reg [2*C_AXI_DATA_WIDTH-1:0]	wide_return, wide_wdata, pre_result;
 	reg [2*C_AXI_DATA_WIDTH/8-1:0]	wide_wstrb;
 	reg	[C_AXI_DATA_WIDTH-1:0]	misdata;
 

ParseResult:
INS HdlIdDef@@adr_lsb to objs
HdlIdDef: adr_lsb
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AXILSB
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@fifo_lsb to objs
HdlIdDef: fifo_lsb
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AXILSB
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@pre_result to objs
HdlIdDef: pre_result
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: MUL
                                list: ops
                                    HdlValueInt: 2
                                    HdlValueId: C_AXI_DATA_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@adr_lsb from objs
HdlIdDef: adr_lsb
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AXILLSB
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@fifo_lsb from objs
HdlIdDef: fifo_lsb
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AXILLSB
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axilpipe.v
+++ b/rtl/core/axilpipe.v
@@ -781,7 +782,7 @@ module	axilpipe #(
 	// {{{
 	always @(posedge S_AXI_ACLK)
 	if (i_stb)
-		{ ar_oreg, ar_op, adr_lsb } <= { i_oreg, i_op[2:1], i_addr[AXILLSB-1:0] };
+		{ ar_oreg, ar_op, adr_lsb } <= { i_oreg, i_op[2:1], i_addr[AXILSB-1:0] };
 	else if ((M_AXI_ARVALID && M_AXI_ARREADY)||(M_AXI_WVALID && M_AXI_WREADY))
 		adr_lsb <= 0;
 	// }}}

ParseResult:
UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlAll

UPD HdlStmIf@@ to 
    INS HdlOp@@ASSIGN to 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: pre_result
            HdlValueId: wide_return


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axilpipe.v
+++ b/rtl/core/axilpipe.v
@@ -797,7 +798,7 @@ module	axilpipe #(
 		fifo_read_data = fifo_data[rdaddr[LGPIPE-1:0]];
 
 	assign	{ fifo_read_op, fifo_return_reg, fifo_op,
-		fifo_misaligned, fifo_lsb } = fifo_read_data;
+			fifo_misaligned, fifo_lsb } = fifo_read_data;
 	// }}}
 	// }}}
 	////////////////////////////////////////////////////////////////////////

ParseResult:
INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: S_AXI_ARESETN
                            HdlValueId: r_flushing
                    HdlValueId: i_cpu_reset
    INS HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_result
    INS list@@elifs to body
    INS tuple@@ to elifs
    INS HdlOp@@OR_LOG to 
    HdlOp: OR_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: OPT_LOWPOWER
            HdlValueId: M_AXI_RVALID

UPD HdlStmProcess@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: wide_return
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlValueId: o_result
            HdlStmIf
                HdlValueId: OPT_SIGN_EXTEND
                HdlStmBlock: SEQ
                    list: body
                        HdlStmCase: fifo_op
                            HdlStmCaseType: CASE
                            HdlValueId: fifo_op
                            list: cases
                                tuple
                                    HdlValueInt: 10
                                    HdlStmAssign
                                        HdlOp: REPL_CONCAT
                                            list: ops
                                                HdlValueInt: 16
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: wide_return
                                                        HdlValueInt: 15
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: o_result
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 16
                                tuple
                                    HdlValueInt: 11
                                    HdlStmAssign
                                        HdlOp: REPL_CONCAT
                                            list: ops
                                                HdlValueInt: 24
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: wide_return
                                                        HdlValueInt: 7
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: o_result
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 8
                list: elifs
                    tuple
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: fifo_op
                                HdlValueInt: 1
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmIf
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: fifo_op
                                            HdlValueInt: 0
                                    HdlStmAssign: if_true
                                        HdlValueInt: 0
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: o_result
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 8
                                    list: elifs
                                    HdlStmAssign: if_false
                                        HdlValueInt: 0
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: o_result
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 16
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: OPT_LOWPOWER
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlValueId: i_cpu_reset
                                        HdlOp: OR_UNARY
                                            list: ops
                                                HdlValueId: r_flushing
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: M_AXI_RVALID
                HdlStmAssign: if_true
                    HdlValueInt: 0
                    HdlValueId: o_result
                list: elifs

UPD HdlStmAssign@@ to 
    UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@wide_return to pre_result

UPD HdlStmAssign@@ to 
    UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@wide_return to pre_result


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/core/axilpipe.v
+++ b/rtl/core/axilpipe.v
@@ -843,17 +844,6 @@ module	axilpipe #(
 				wide_return = { M_AXI_RDATA, {(DW){1'b0}} }
 							<< (8*fifo_lsb);
 
-			casez(fifo_op[1:0])
-			2'b10: wide_return = { {(16){1'b0}},
-					wide_return[(2*DW)-1:(2*DW)-16],
-					{(2*DW-32){1'b0}} };
-			2'b11: wide_return = { {(24){1'b0}},
-						wide_return[(2*DW)-1:(2*DW)-8],
-					{(2*DW-32){1'b0}} };
-			default: begin end
-			endcase
-
-			wide_return[31:0] = wide_return[(2*DW-1):(2*DW-32)];
 		end else begin
 			if (fifo_misaligned && !OPT_ALIGNMENT_ERR)
 				wide_return = { M_AXI_RDATA, misdata } >> (8*fifo_lsb);

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_UNARY to AND_UNARY
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlOp@@CONCAT to CONCAT
                UPD HdlOp@@CONCAT to CONCAT
                    UPD HdlOp@@CONCAT to CONCAT
                        UPD HdlOp@@CONCAT to CONCAT
                            UPD HdlOp@@INDEX to INDEX
                                UPD HdlValueId@@wide_return to pre_result


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/core/zipwb.v
+++ b/rtl/core/zipwb.v
@@ -121,6 +121,7 @@ module	zipwb #(
 		parameter	[0:0]	WITH_LOCAL_BUS = 1'b1,
 		parameter	[0:0]	OPT_DBGPORT = 1'b1,
 		parameter	[0:0]	OPT_TRACE_PORT = 1'b0,
+		parameter	[0:0]	OPT_PROFILER = 1'b0,
 		parameter	[0:0]	OPT_USERMODE = 1'b1,
 		localparam	AW=ADDRESS_WIDTH,
 		localparam	DW=32

ParseResult:
INS HdlIdDef@@OPT_PROFILER to params
HdlIdDef: OPT_PROFILER
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/core/zipwb.v
+++ b/rtl/core/zipwb.v
@@ -159,7 +160,10 @@ module	zipwb #(
 		output	wire		o_pf_stall,
 		output	wire		o_i_count,
 		//
-		output	wire	[31:0]	o_debug
+		output	wire	[31:0]	o_debug,
+		output	wire		o_prof_stb,
+		output	wire [AW+1:0]	o_prof_addr,
+		output	wire [31:0]	o_prof_ticks
 	// }}}
 	);
 

ParseResult:
INS HdlIdDef@@o_prof_stb to ports
HdlIdDef: o_prof_stb
    HdlDirection: OUT

INS HdlIdDef@@o_prof_addr to ports
HdlIdDef: o_prof_addr
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

INS HdlIdDef@@o_prof_ticks to ports
HdlIdDef: o_prof_ticks
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: OUT


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -312,7 +314,7 @@ module	zipsystem #(
 	wire		actr_ack, actr_stall;
 
 	//
-	wire	cpu_clken;
+	wire	cpu_clken, cpu_clock, clk_gate;
 	//
 	//
 	wire	sys_cyc, sys_stb, sys_we;

ParseResult:
INS HdlIdDef@@cpu_clock to objs
HdlIdDef: cpu_clock
    HdlDirection: INTERNAL

INS HdlIdDef@@clk_gate to objs
HdlIdDef: clk_gate
    HdlDirection: INTERNAL


CommitId: 2414f9b93038046da588ea193d143e123d56c6c0
ZIPDMA: Speed fixes, to bring it to 200MHz on a Kintex-7
--- a/rtl/zipdma/zipdma_s2mm.v
+++ b/rtl/zipdma/zipdma_s2mm.v
@@ -262,7 +262,7 @@ module	zipdma_s2mm #(
 `endif
 	// }}}
 
-	// crc, stb, o_wr_addr, o_wr_data, o_wr_sel, o_busy, o_err, subaddr
+	// crc, stb, o_wr_addr, o_wr_sel, o_busy, o_err, subaddr
 	// {{{
 	initial	o_wr_cyc = 1'b0;
 	initial	o_wr_stb = 1'b0;

ParseResult:
MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: REPL_CONCAT
        list: ops
            HdlOp: MUL
                list: ops
                    HdlValueInt: 2
                    HdlValueId: DW
            HdlValueInt: 0
    HdlOp: CONCAT
        list: ops
            HdlValueId: r_data
            HdlValueId: o_wr_data

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: REPL_CONCAT
        list: ops
            HdlOp: DIV
                list: ops
                    HdlOp: MUL
                        list: ops
                            HdlValueInt: 2
                            HdlValueId: DW
                    HdlValueInt: 8
            HdlValueInt: 0
    HdlOp: CONCAT
        list: ops
            HdlValueId: r_sel
            HdlValueId: o_wr_sel


CommitId: 2414f9b93038046da588ea193d143e123d56c6c0
ZIPDMA: Speed fixes, to bring it to 200MHz on a Kintex-7
--- a/rtl/zipdma/zipdma_s2mm.v
+++ b/rtl/zipdma/zipdma_s2mm.v
@@ -275,14 +275,10 @@ module	zipdma_s2mm #(
 		o_wr_cyc  <= 0;
 		o_wr_stb  <= 0;
 		o_wr_addr <= 0;
-		o_wr_data <= 0;
-		o_wr_sel  <= 0;
 
 		o_busy <= 1'b0;
 		o_err  <= 1'b0;
 		{ o_wr_addr, subaddr } <= {(ADDRESS_WIDTH){1'b0}};
-		{ r_data, o_wr_data  } <= {(2*DW  ){1'b0}};
-		{ r_sel,  o_wr_sel   } <= {(2*DW/8){1'b0}};
 		r_last <= 1'b0;
 		// }}}
 	end else if (!o_busy || o_err || (o_wr_cyc && i_wr_err))

ParseResult:
DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: o_wr_data

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: o_wr_sel

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlOp: REPL_CONCAT
        list: ops
            HdlOp: MUL
                list: ops
                    HdlValueInt: 2
                    HdlValueId: DW
            HdlValueInt: 0
    HdlOp: CONCAT
        list: ops
            HdlValueId: r_data
            HdlValueId: o_wr_data

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlOp: REPL_CONCAT
        list: ops
            HdlOp: DIV
                list: ops
                    HdlOp: MUL
                        list: ops
                            HdlValueInt: 2
                            HdlValueId: DW
                    HdlValueInt: 8
            HdlValueInt: 0
    HdlOp: CONCAT
        list: ops
            HdlValueId: r_sel
            HdlValueId: o_wr_sel


CommitId: 2414f9b93038046da588ea193d143e123d56c6c0
ZIPDMA: Speed fixes, to bring it to 200MHz on a Kintex-7
--- a/rtl/zipdma/zipdma_s2mm.v
+++ b/rtl/zipdma/zipdma_s2mm.v
@@ -291,8 +287,6 @@ module	zipdma_s2mm #(
 		o_wr_cyc  <= 0;
 		o_wr_stb  <= 0;
 		o_wr_addr <= 0;
-		o_wr_data <= 0;
-		o_wr_sel  <= 0;
 
 		o_busy <= i_request && !o_busy;
 

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ


CommitId: 2414f9b93038046da588ea193d143e123d56c6c0
ZIPDMA: Speed fixes, to bring it to 200MHz on a Kintex-7
--- a/rtl/zipdma/zipdma_s2mm.v
+++ b/rtl/zipdma/zipdma_s2mm.v
@@ -302,8 +296,6 @@ module	zipdma_s2mm #(
 
 		o_wr_addr <= i_addr[ADDRESS_WIDTH-1:WBLSB];
 		subaddr   <= i_addr[WBLSB-1:0];
-		{ r_data, o_wr_data } <= {(2*DW  ){1'b0}};
-		{ r_sel,  o_wr_sel  } <= {(2*DW/8){1'b0}};
 		r_last <= 1'b0;
 		// }}}
 	end else if (!o_wr_stb || !i_wr_stall)

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 11
                HdlOp: CONCAT
                    list: ops
                        HdlValueId: o_wr_cyc
                        HdlValueId: o_wr_stb
            HdlStmIf
                HdlValueId: OPT_LITTLE_ENDIAN
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueId: next_data
                            HdlOp: CONCAT
                                list: ops
                                    HdlValueId: r_data
                                    HdlValueId: o_wr_data
                        HdlStmAssign
                            HdlValueId: next_sel
                            HdlOp: CONCAT
                                list: ops
                                    HdlValueId: r_sel
                                    HdlValueId: o_wr_sel
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueId: next_data
                            HdlOp: CONCAT
                                list: ops
                                    HdlValueId: o_wr_data
                                    HdlValueId: r_data
                        HdlStmAssign
                            HdlValueId: next_sel
                            HdlOp: CONCAT
                                list: ops
                                    HdlValueId: o_wr_sel
                                    HdlValueId: r_sel

UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 11
    HdlOp: CONCAT
        list: ops
            HdlValueId: o_wr_cyc
            HdlValueId: o_wr_stb


CommitId: 2414f9b93038046da588ea193d143e123d56c6c0
ZIPDMA: Speed fixes, to bring it to 200MHz on a Kintex-7
--- a/rtl/zipdma/zipdma_s2mm.v
+++ b/rtl/zipdma/zipdma_s2mm.v
@@ -323,15 +315,6 @@ module	zipdma_s2mm #(
 				// Need to flush our last result out
 				{ o_wr_cyc, o_wr_stb } <= 2'b11;
 
-				if (OPT_LITTLE_ENDIAN)
-				begin
-					{ r_data, o_wr_data } <= next_data;
-					{ r_sel,  o_wr_sel  } <= next_sel;
-				end else begin
-					{ o_wr_data, r_data } <= next_data;
-					{ o_wr_sel,  r_sel  } <= next_sel;
-				end
-
 			end else if (wb_outstanding + (o_wr_stb ? 1:0)
 							== (i_wr_ack ? 1:0))
 			begin

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlOp@@NEG_LOG to body
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: o_busy
    INS HdlStmBlock@@SEQ to body
    INS list@@elifs to body
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    INS tuple@@ to elifs
    INS HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: o_wr_stb
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_wr_stall
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: wb_pipeline_full
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: r_last
                    HdlValueId: S_VALID


CommitId: 136697cb2922a1f0b42d0071064a18c8ab4df451
FIX: Named generate blocks
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -976,18 +976,19 @@ module	axidcache #(
 
 	genvar	gk;
 	generate if (!SWAP_WSTRB)
-	begin
+	begin : NO_SWAP_WSTRB
 		assign	M_AXI_WDATA = axi_wdata;
 		assign	M_AXI_WSTRB = axi_wstrb;
 
 		assign	axi_rdata   = M_AXI_RDATA;
-	end else for(gk=0; gk<C_AXI_DATA_WIDTH/32; gk=gk+1)
-	begin
+	end else begin : J
+	for(gk=0; gk<C_AXI_DATA_WIDTH/32; gk=gk+1)
+	begin : GEN_SWAP_WSTRB
 		assign	M_AXI_WDATA[32*gk +: 32] = axi_wdata[C_AXI_DATA_WIDTH - (gk+1)*32 +: 32];
 		assign	M_AXI_WSTRB[ 4*gk +:  4] = axi_wstrb[C_AXI_DATA_WIDTH/8 - (gk+1)*4 +: 4];
 
 		assign	axi_rdata[32*gk +: 32] = M_AXI_RDATA[C_AXI_DATA_WIDTH - (gk+1)*32 +: 32];
-	end endgenerate
+	end end endgenerate
 	// }}}
 	// }}}
 

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmFor@@if_false to 

MOV HdlStmFor@@if_false to 
HdlStmFor: if_false
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: gk
    HdlOp: LT
        list: ops
            HdlValueId: gk
            HdlOp: DIV
                list: ops
                    HdlValueId: C_AXI_DATA_WIDTH
                    HdlValueInt: 32
    HdlOp: ASSIGN
        list: ops
            HdlValueId: gk
            HdlOp: ADD
                list: ops
                    HdlValueId: gk
                    HdlValueInt: 1
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: axi_wdata
                        HdlOp: PART_SELECT_POST
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlValueId: C_AXI_DATA_WIDTH
                                        HdlOp: MUL
                                            list: ops
                                                HdlOp: ADD
                                                    list: ops
                                                        HdlValueId: gk
                                                        HdlValueInt: 1
                                                HdlValueInt: 32
                                HdlValueInt: 32
                HdlOp: INDEX
                    list: ops
                        HdlValueId: M_AXI_WDATA
                        HdlOp: PART_SELECT_POST
                            list: ops
                                HdlOp: MUL
                                    list: ops
                                        HdlValueInt: 32
                                        HdlValueId: gk
                                HdlValueInt: 32
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: axi_wstrb
                        HdlOp: PART_SELECT_POST
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlOp: DIV
                                            list: ops
                                                HdlValueId: C_AXI_DATA_WIDTH
                                                HdlValueInt: 8
                                        HdlOp: MUL
                                            list: ops
                                                HdlOp: ADD
                                                    list: ops
                                                        HdlValueId: gk
                                                        HdlValueInt: 1
                                                HdlValueInt: 4
                                HdlValueInt: 4
                HdlOp: INDEX
                    list: ops
                        HdlValueId: M_AXI_WSTRB
                        HdlOp: PART_SELECT_POST
                            list: ops
                                HdlOp: MUL
                                    list: ops
                                        HdlValueInt: 4
                                        HdlValueId: gk
                                HdlValueInt: 4
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: M_AXI_RDATA
                        HdlOp: PART_SELECT_POST
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlValueId: C_AXI_DATA_WIDTH
                                        HdlOp: MUL
                                            list: ops
                                                HdlOp: ADD
                                                    list: ops
                                                        HdlValueId: gk
                                                        HdlValueInt: 1
                                                HdlValueInt: 32
                                HdlValueInt: 32
                HdlOp: INDEX
                    list: ops
                        HdlValueId: axi_rdata
                        HdlOp: PART_SELECT_POST
                            list: ops
                                HdlOp: MUL
                                    list: ops
                                        HdlValueInt: 32
                                        HdlValueId: gk
                                HdlValueInt: 32


CommitId: 5c08358b2bdee804bc6a091bcf1c5fb87fd8f7c2
Fixed AxSIZE in DCACHE to never be more than 32'bits
--- a/rtl/core/axiicache.v
+++ b/rtl/core/axiicache.v
@@ -433,8 +433,18 @@ module	axiicache #(
 	begin : NO_LINE_SHIFT
 
 		always @(*)
-			o_insn = cache_word;
+			o_insn = cache_word[INSN_WIDTH-1:0];
 
+		// Make Verilator happy
+		// {{{
+		// Verilator lint_off UNUSED
+		if (DW > INSN_WIDTH)
+		begin
+			wire	unused_wide;
+			assign	unused_wide = &{ 1'b0, cache_word[DW-1:INSN_WIDTH] };
+		end
+		// Verilator lint_on  UNUSED
+		// }}}
 	end else begin : SHIFT_CACHE_LINE
 
 		reg	[C_AXI_DATA_WIDTH-1:0]	shifted;

ParseResult:
INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS HdlOp@@GT to 
    HdlOp: GT
        list: ops
            HdlValueId: DW
            HdlValueId: INSN_WIDTH
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlIdDef@@unused_wide to body
HdlIdDef: unused_wide
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to body

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_UNARY to 
    INS HdlValueId@@unused_wide to 
    UPD HdlOp@@AND_UNARY to AND_UNARY
        INS list@@ops to AND_UNARY
        UPD HdlOp@@CONCAT to CONCAT
            INS HdlValueInt@@0 to ops
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    INS HdlValueId@@INSN_WIDTH to ops

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            MOV HdlValueId@@o_insn to ops
            HdlValueId: o_insn
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    MOV HdlValueInt@@0 to ops
                    HdlValueInt: 0
                UPD HdlValueId@@shifted to cache_word
        UPD HdlOp@@ASSIGN to CONCAT
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: o_insn
                HdlOp: INDEX
                    list: ops
                        HdlValueId: shifted
                        HdlOp: DOWNTO
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlValueId: DW
                                        HdlValueInt: 1
                                HdlValueInt: 0


CommitId: 5c08358b2bdee804bc6a091bcf1c5fb87fd8f7c2
Fixed AxSIZE in DCACHE to never be more than 32'bits
--- a/rtl/core/axiicache.v
+++ b/rtl/core/axiicache.v
@@ -442,8 +452,19 @@ module	axiicache #(
 		always @(*)
 		begin
 			shifted=cache_word >> (INSN_WIDTH * o_pc[ADDRLSB-1:LGINSN]);
-			o_insn = shifted[DW-1:0];
+			o_insn = shifted[INSN_WIDTH-1:0];
 		end
+
+		// Make Verilator happy
+		// {{{
+		// Verilator lint_off UNUSED
+		if (DW > INSN_WIDTH)
+		begin
+			wire	unused_wide;
+			assign	unused_wide = &{ 1'b0, shifted[DW-1:INSN_WIDTH] };
+		end
+		// Verilator lint_on  UNUSED
+		// }}}
 	end endgenerate
 	// }}}
 
ParseResult:
INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: GT
        list: ops
            HdlValueId: DW
            HdlValueId: INSN_WIDTH
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: unused_wide
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: AND_UNARY
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: shifted
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlValueId: DW
                                                        HdlValueInt: 1
                                                HdlValueId: INSN_WIDTH
                HdlValueId: unused_wide
    list: elifs

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS HdlOp@@ASSIGN to body
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN
            INS HdlOp@@INDEX to ops
            UPD HdlOp@@INDEX to INDEX
                INS list@@ops to INDEX
                INS HdlValueId@@shifted to ops
                INS HdlOp@@DOWNTO to ops
                UPD HdlOp@@DOWNTO to DOWNTO
                    INS list@@ops to DOWNTO
                    INS HdlOp@@SUB to ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: INSN_WIDTH
                            HdlValueInt: 1

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_UNARY to 
    INS HdlValueId@@unused_wide to 
    UPD HdlOp@@AND_UNARY to AND_UNARY
        INS list@@ops to AND_UNARY
        UPD HdlOp@@CONCAT to CONCAT
            INS HdlValueInt@@0 to ops
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    INS HdlValueId@@INSN_WIDTH to ops


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -259,24 +233,24 @@ module	zipaxi #(
 		output	wire		o_gie,
 		output	wire		o_op_stall,
 		output	wire		o_pf_stall,
-		output	wire		o_i_count
+		output	wire		o_i_count,
 		//
-`ifdef	DEBUG_SCOPE
-		, output reg	[31:0]	o_debug
-`endif
+		output wire	[31:0]	o_debug
 	// }}}
 	);
 
 	// Declarations
 	// {{{
-	localparam FETCH_LIMIT = 4;
-	wire	[31:0]	cpu_debug;
+	localparam	[0:0]	OPT_PIPELINED_BUS_ACCESS = (OPT_PIPELINED)&&(OPT_LGDCACHE > 1);
+	localparam	[0:0]	OPT_MEMPIPE = OPT_PIPELINED_BUS_ACCESS;
+	localparam	[0:0]	OPT_DCACHE = (OPT_LGDCACHE > 4);
+
+	localparam FETCH_LIMIT = (OPT_LGICACHE < 4) ? (1 << OPT_LGICACHE) : 16;
 
 	localparam	RESET_BIT = 6,
 			STEP_BIT = 8,
 			HALT_BIT = 10,
 			CLEAR_CACHE_BIT = 11;
-	localparam [0:0]	OPT_LOWPOWER = 1'b0;
 	localparam [0:0]	OPT_ALIGNMENT_ERR = 1'b0;
 	localparam [0:0]	SWAP_ENDIANNESS = 1'b0;
 

ParseResult:
UPD HdlIdDef@@M_DATA_ARADDR to M_DATA_ARADDR
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@C_AXI_ADDR_WIDTH to ADDRESS_WIDTH


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -896,6 +868,10 @@ module	zipaxi #(
 		// PROT
 		assign	M_INSN_ARQOS   = 4'h0;
 
+		// Verilator lint_off UNUSED
+		wire	unused_insn_axi;
+		assign	unused_insn_axi = &{ 1'b0, M_INSN_RID, M_INSN_RLAST };
+		// Verilator lint_on  UNUSED
 	end endgenerate
 `endif
 

ParseResult:
DEL HdlIdDef@@dbg_unused from objs
HdlIdDef: dbg_unused
    HdlDirection: INTERNAL

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: AND_UNARY
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlValueInt: 0
                    HdlValueId: cpu_debug
    HdlValueId: dbg_unused


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -960,7 +936,7 @@ module	zipaxi #(
 
 		axidcache #(
 			// {{{
-			.C_AXI_ADDR_WIDTH(C_AXI_ADDR_WIDTH),
+			.C_AXI_ADDR_WIDTH(ADDRESS_WIDTH),
 			.C_AXI_DATA_WIDTH(C_AXI_DATA_WIDTH),
 			.C_AXI_ID_WIDTH(C_AXI_ID_WIDTH),
 			.AXI_ID(DATA_ID),

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@GT to GT
        UPD HdlValueId@@LGICACHE to OPT_LGICACHE
        UPD HdlValueInt@@0 to 3


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -972,7 +948,7 @@ module	zipaxi #(
 			.OPT_LOWPOWER(OPT_LOWPOWER),
 			// .OPT_LOCAL_BUS(WITH_LOCAL_BUS),
 			.OPT_PIPE(OPT_MEMPIPE)
-			// .OPT_LOCK(IMPLEMENT_LOCK)
+			// .OPT_LOCK(OPT_LOCK)
 // `ifdef	FORMAL
 			// Used with OPT_PIPE, not yet enabled
 			// , .OPT_FIFO_DEPTH(2)

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@GT to GT
        UPD HdlValueId@@LGICACHE to OPT_LGICACHE
        UPD HdlValueInt@@0 to 3


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -163,14 +163,9 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	reg	[3:0]	r_op;
 	initial	o_wb_we   = 1'b0;
 	initial	o_wb_data = 0;
-	initial	o_wb_sel = 0;
+	initial	o_wb_sel  = 0;
 	always @(posedge i_clk)
-	if (i_reset)
-	begin
-		o_wb_we   <= 0;
-		o_wb_data <= 0;
-		o_wb_sel  <= 0;
-	end else if (i_stb)
+	if (i_stb)
 	begin
 		o_wb_we   <= i_op[0];
 		if (OPT_ZERO_ON_IDLE)

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlValueId@@i_stb to 
    HdlValueId: i_stb
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_op
                        HdlValueInt: 0
                HdlValueId: o_wb_we
            HdlStmIf
                HdlValueId: OPT_ZERO_ON_IDLE
                HdlStmBlock: SEQ
                    list: body
                        HdlStmCase: {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops':}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops':}]}]} 
                            HdlStmCaseType: CASEZ
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_op
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 2
                                                    HdlValueInt: 1
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_addr
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 1
                                                    HdlValueInt: 0
                            list: cases
                                tuple
                                    HdlValueInt: 100?
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_data
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 15
                                                                HdlValueInt: 0
                                                HdlValueInt: 00
                                        HdlValueId: o_wb_data
                                tuple
                                    HdlValueInt: 101?
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueInt: 00
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_data
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 15
                                                                HdlValueInt: 0
                                        HdlValueId: o_wb_data
                                tuple
                                    HdlValueInt: 1100
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_data
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                                HdlValueInt: 00
                                        HdlValueId: o_wb_data
                                tuple
                                    HdlValueInt: 1101
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: CONCAT
                                                    list: ops
                                                        HdlValueInt: 00
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_data
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 7
                                                                        HdlValueInt: 0
                                                HdlValueInt: 00
                                        HdlValueId: o_wb_data
                                tuple
                                    HdlValueInt: 1110
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: CONCAT
                                                    list: ops
                                                        HdlValueInt: 00
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_data
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 7
                                                                        HdlValueInt: 0
                                                HdlValueInt: 00
                                        HdlValueId: o_wb_data
                                tuple
                                    HdlValueInt: 1111
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueInt: 00
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_data
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        HdlValueId: o_wb_data
                            HdlStmAssign: default
                                HdlValueId: i_data
                                HdlValueId: o_wb_data
                list: elifs
                HdlStmCase: {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops':}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops':}]}]} 
                    HdlStmCaseType: CASEZ
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueInt: 1
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_addr
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 1
                                            HdlValueInt: 0
                    list: cases
                        tuple
                            HdlValueInt: 10??
                            HdlStmAssign
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 2
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_data
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 15
                                                        HdlValueInt: 0
                                HdlValueId: o_wb_data
                        tuple
                            HdlValueInt: 11??
                            HdlStmAssign
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 4
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_data
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 7
                                                        HdlValueInt: 0
                                HdlValueId: o_wb_data
                    HdlStmAssign: default
                        HdlValueId: i_data
                        HdlValueId: o_wb_data
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_addr
                        HdlOp: DOWNTO
                            list: ops
                                HdlOp: ADD
                                    list: ops
                                        HdlValueId: AW
                                        HdlValueInt: 1
                                HdlValueInt: 2
                HdlValueId: o_wb_addr
            HdlStmCase: {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops':}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops':}]}]} 
                HdlStmCaseType: CASEZ
                HdlOp: CONCAT
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 2
                                        HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_addr
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                list: cases
                    tuple
                        HdlValueInt: 01??
                        HdlStmAssign
                            HdlValueInt: 1111
                            HdlValueId: o_wb_sel
                    tuple
                        HdlValueInt: 100?
                        HdlStmAssign
                            HdlValueInt: 1100
                            HdlValueId: o_wb_sel
                    tuple
                        HdlValueInt: 101?
                        HdlStmAssign
                            HdlValueInt: 0011
                            HdlValueId: o_wb_sel
                    tuple
                        HdlValueInt: 1100
                        HdlStmAssign
                            HdlValueInt: 1000
                            HdlValueId: o_wb_sel
                    tuple
                        HdlValueInt: 1101
                        HdlStmAssign
                            HdlValueInt: 0100
                            HdlValueId: o_wb_sel
                    tuple
                        HdlValueInt: 1110
                        HdlStmAssign
                            HdlValueInt: 0010
                            HdlValueId: o_wb_sel
                    tuple
                        HdlValueInt: 1111
                        HdlStmAssign
                            HdlValueInt: 0001
                            HdlValueId: o_wb_sel
                HdlStmAssign: default
                    HdlValueInt: 1111
                    HdlValueId: o_wb_sel
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 2
                                        HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_addr
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                HdlValueId: r_op
    MOV tuple@@ to elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: OPT_ZERO_ON_IDLE
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: o_wb_cyc_gbl
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: o_wb_cyc_lcl
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: o_wb_we
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: o_wb_addr
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: o_wb_data
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: o_wb_sel
    DEL HdlValueId@@i_reset from body
    DEL HdlStmBlock@@SEQ from body
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_wb_we
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_wb_data
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_wb_sel
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmIf@@body to body
    INS list@@elifs to body


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -232,14 +227,10 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 	assign	o_busy = (r_wb_cyc_gbl)||(r_wb_cyc_lcl);
 
 	always @(posedge i_clk)
-	if (i_reset)
-		o_wreg <= 0;
-	else if (i_stb)
-			o_wreg    <= i_oreg;
+	if (i_stb)
+		o_wreg    <= i_oreg;
 	always @(posedge i_clk)
-	if (i_reset)
-		o_result <= 0;
-	else if ((OPT_ZERO_ON_IDLE)&&(!i_wb_ack))
+	if ((OPT_ZERO_ON_IDLE)&&(!i_wb_ack))
 		o_result <= 32'h0;
 	else begin
 		casez(r_op)

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlValueId@@i_reset to i_stb
    DEL tuple@@ from elifs
    tuple
        HdlValueId: i_stb
        HdlStmAssign
            HdlValueId: i_oreg
            HdlValueId: o_wreg

UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_ZERO_ON_IDLE
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: i_wb_ack
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmIf@@body to body
    INS list@@elifs to body

UPD HdlStmAssign@@if_true to if_true
    INS HdlValueId@@i_oreg to if_true

UPD HdlStmAssign@@if_true to if_true
    DEL HdlValueInt@@0 from if_true

DEL HdlStmAssign@@ from 
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: o_result


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -287,14 +278,24 @@ module	memops(i_clk, i_reset, i_stb, i_lock,
 
 		always @(*)
 			{ lock_gbl, lock_lcl } = 2'b00;
+
+		// Make verilator happy
+		// verilator lint_off UNUSED
+		wire	[2:0]	lock_unused;
+		assign	lock_unused = { i_lock, lock_gbl, lock_lcl };
+		// verilator lint_on  UNUSED
+
 	end endgenerate
 
+`ifdef	VERILATOR
+	always @(posedge i_clk)
+	if ((r_wb_cyc_gbl)||(r_wb_cyc_lcl))
+		assert(!i_stb);
+`endif
+
 
 	// Make verilator happy
 	// verilator lint_off UNUSED
-	wire	unused;
-	assign	unused = i_lock;
-
 	generate if (AW < 22)
 	begin : TOO_MANY_ADDRESS_BITS
 

ParseResult:
UPD HdlIdDef@@unused to lock_unused

MOV HdlIdDef@@unused to objs
HdlIdDef: unused
    HdlDirection: INTERNAL

MOV HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: i_lock
    HdlValueId: unused

UPD HdlStmAssign@@ to 
    INS HdlOp@@CONCAT to 
    UPD HdlOp@@CONCAT to CONCAT
        INS list@@ops to CONCAT
        INS HdlOp@@CONCAT to ops
        INS HdlValueId@@lock_lcl to ops
        UPD HdlOp@@CONCAT to CONCAT
            INS list@@ops to CONCAT
            INS HdlValueId@@lock_gbl to ops

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@unused to lock_unused
    MOV HdlValueId@@i_lock to 
    HdlValueId: i_lock


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -83,9 +83,11 @@
 module	dcache #(
 		// {{{
 		parameter	LGCACHELEN = 8,
-				ADDRESS_WIDTH=30,
+				BUS_WIDTH=32,
+				ADDRESS_WIDTH=32-$clog2(BUS_WIDTH/8),
 				LGNLINES=(LGCACHELEN-3), // Log of the number of separate cache lines
 				NAUX=5,	// # of aux d-wires to keep aligned w/memops
+		parameter	DATA_WIDTH=32, // CPU's register width
 		parameter [0:0]	OPT_LOCAL_BUS=1'b1,
 		parameter [0:0]	OPT_PIPE=1'b1,
 		parameter [0:0]	OPT_LOCK=1'b1,

ParseResult:
INS HdlIdDef@@DATA_WIDTH to params
HdlIdDef: DATA_WIDTH
    HdlValueInt: 32
    HdlDirection: INTERNAL

INS HdlIdDef@@WBLSB to params
HdlIdDef: WBLSB
    HdlOp: CALL
        list: ops
            HdlValueId: $clog2
            HdlOp: DIV
                list: ops
                    HdlValueId: BUS_WIDTH
                    HdlValueInt: 8
    HdlDirection: INTERNAL

DEL HdlIdDef@@DW from params
HdlIdDef: DW
    HdlValueInt: 32
    HdlDirection: INTERNAL


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -99,8 +101,10 @@ module	dcache #(
 						? LS : OPT_FIFO_DEPTH),
 `endif
 		parameter [0:0]	OPT_LOWPOWER = 1'b0,
-		localparam	DW = 32, // Bus data width
+		// localparam	DW = 32, // Bus data width
 		localparam	DP = OPT_FIFO_DEPTH,
+		localparam	WBLSB = $clog2(BUS_WIDTH/8),
+		// localparam	DLSB = $clog2(DATA_WIDTH/8),
 		//
 		localparam [1:0]	DC_IDLE  = 2'b00, // Bus is idle
 		localparam [1:0]	DC_WRITE = 2'b01, // Write

ParseResult:
UPD HdlIdDef@@i_addr to i_addr
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@DW to DATA_WIDTH

UPD HdlIdDef@@i_data to i_data
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@DW to DATA_WIDTH


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -114,15 +118,15 @@ module	dcache #(
 		// {{{
 		input	wire		i_pipe_stb, i_lock,
 		input	wire [2:0]	i_op,
-		input	wire [(DW-1):0]	i_addr,
-		input	wire [(DW-1):0]	i_data,
+		input	wire [DATA_WIDTH-1:0]	i_addr,
+		input	wire [DATA_WIDTH-1:0]	i_data,
 		input	wire [(NAUX-1):0] i_oreg, // Aux data, such as reg to write to
 		// Outputs, going back to the CPU
 		output	reg		o_busy, o_rdbusy,
 		output	reg		o_pipe_stalled,
 		output	reg		o_valid, o_err,
 		output reg [(NAUX-1):0]	o_wreg,
-		output	reg [(DW-1):0]	o_data,
+		output	reg [DATA_WIDTH-1:0]	o_data,
 		// }}}
 		// Wishbone bus master outputs
 		// {{{

ParseResult:
UPD HdlIdDef@@o_wb_data to o_wb_data
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@DW to BUS_WIDTH

UPD HdlIdDef@@i_wb_data to i_wb_data
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@DW to BUS_WIDTH

UPD HdlIdDef@@o_wb_sel to o_wb_sel
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlOp@@DIV to DIV
                    UPD HdlValueId@@DW to BUS_WIDTH


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -130,17 +134,20 @@ module	dcache #(
 		output	reg		o_wb_stb_gbl, o_wb_stb_lcl,
 		output	reg		o_wb_we,
 		output	reg [(AW-1):0]	o_wb_addr,
-		output	reg [(DW-1):0]	o_wb_data,
-		output	wire [(DW/8-1):0] o_wb_sel,
+		output	reg [BUS_WIDTH-1:0]	o_wb_data,
+		output	wire [BUS_WIDTH/8-1:0]	o_wb_sel,
 		// Wishbone bus slave response inputs
 		input	wire			i_wb_stall, i_wb_ack, i_wb_err,
-		input	wire	[(DW-1):0]	i_wb_data
+		input	wire	[BUS_WIDTH-1:0]	i_wb_data
 		// }}}
 		// }}}
 	);
 
 	// Declarations
 	// {{{
+	localparam	FIF_WIDTH = (NAUX-1)+2+WBLSB;
+	integer			ik;
+
 `ifdef FORMAL
 	wire [(F_LGDEPTH-1):0]	f_nreqs, f_nacks, f_outstanding;
 	wire			f_pc, f_gie, f_read_cycle;

ParseResult:
INS HdlIdDef@@FIF_WIDTH to objs
HdlIdDef: FIF_WIDTH
    HdlOp: ADD
        list: ops
            HdlOp: ADD
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: NAUX
                            HdlValueInt: 1
                    HdlValueInt: 2
            HdlValueId: WBLSB
    HdlDirection: INTERNAL

INS HdlIdDef@@ik to objs
HdlIdDef: ik
    HdlValueId: integer
    HdlDirection: INTERNAL

UPD HdlIdDef@@c_mem to c_mem
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to BUS_WIDTH


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -159,12 +166,11 @@ module	dcache #(
 
 	reg	[((1<<LGNLINES)-1):0] c_v;	// One bit per cache line, is it valid?
 	reg	[(AW-LS-1):0]	c_vtags	[0:((1<<LGNLINES)-1)];
-	reg	[(DW-1):0]	c_mem	[0:((1<<CS)-1)];
+	reg	[BUS_WIDTH-1:0]	c_mem	[0:((1<<CS)-1)];
 	reg			set_vflag;
 	reg	[1:0]		state;
 	reg	[(CS-1):0]	wr_addr;
-	reg	[(DW-1):0]	cached_idata, cached_rdata;
-	reg	[DW-1:0]	pre_data;
+	reg	[BUS_WIDTH-1:0]		cached_iword, cached_rword;
 	reg			lock_gbl, lock_lcl;
 
 

ParseResult:
INS HdlIdDef@@c_wsel to objs
HdlIdDef: c_wsel
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: BUS_WIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@c_wdata from objs
HdlIdDef: c_wdata
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@c_wsel from objs
HdlIdDef: c_wsel
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -173,8 +179,8 @@ module	dcache #(
 	// clock to get there, and use these c_w... registers to capture the
 	// data in the meantime.
 	reg			c_wr;
-	reg	[(DW-1):0]	c_wdata;
-	reg	[(DW/8-1):0]	c_wsel;
+	reg	[BUS_WIDTH-1:0]	c_wdata;
+	reg [BUS_WIDTH/8-1:0]	c_wsel;
 	reg	[(CS-1):0]	c_waddr;
 
 	reg	[(AW-LS-1):0]	last_tag;

ParseResult:
INS HdlIdDef@@req_data to objs
HdlIdDef: req_data
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueId: FIF_WIDTH
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@pre_data to objs
HdlIdDef: pre_data
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: BUS_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@r_sel from objs
HdlIdDef: r_sel
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@req_data from objs
HdlIdDef: req_data
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: ADD
                                list: ops
                                    HdlValueId: NAUX
                                    HdlValueInt: 4
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -198,30 +204,30 @@ module	dcache #(
 	wire	raw_cachable_address;
 	reg	r_cachable, r_svalid, r_dvalid, r_rd, r_cache_miss,
 		r_rd_pending;
-	reg	[(AW-1):0]		r_addr;
+	reg	[AW-1:0]		r_addr;
 	wire	[(LGNLINES-1):0]	r_cline;
 	wire	[(CS-1):0]		r_caddr;
 	wire	[(AW-LS-1):0]		r_ctag;
 	reg	wr_cstb, r_iv, in_cache;
 	reg	[(AW-LS-1):0]	r_itag;
-	reg	[DW/8-1:0]	r_sel;
-	reg	[(NAUX+4-1):0]	req_data;
+	reg	[FIF_WIDTH:0]	req_data;
 	reg			gie;
+	reg	[BUS_WIDTH-1:0]	pre_data, pre_shifted;
 	// }}}
 
 	// Convenience assignments
 	// {{{
-	assign	i_cline = i_addr[(CS+1):LS+2];
-	assign	i_caddr = i_addr[(CS+1):2];
+	assign	i_cline = i_addr[WBLSB +LS +: (CS-LS)];
+	assign	i_caddr = i_addr[WBLSB +: CS];
 
 	assign	cache_miss_inow = (!last_tag_valid)
-					||(last_tag != i_addr[(AW+1):LS+2])
-					||(!c_v[i_cline]);
+				||(last_tag != i_addr[WBLSB+LS +: (AW-LS)])
+				||(!c_v[i_cline]);
 
-	assign	w_cachable = ((!OPT_LOCAL_BUS)||(i_addr[(DW-1):(DW-8)]!=8'hff))
+	assign	w_cachable = ((!OPT_LOCAL_BUS)
+				||(i_addr[DATA_WIDTH-1:DATA_WIDTH-8]!=8'hff))
 		&&((!i_lock)||(!OPT_LOCK))&&(raw_cachable_address);
 
-
 	assign	r_cline = r_addr[(CS-1):LS];
 	assign	r_caddr = r_addr[(CS-1):0];
 	assign	r_ctag  = r_addr[(AW-1):LS];

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@OR_LOG to 
    INS HdlValueId@@cache_miss_inow to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlOp@@NE to ops
            HdlOp: NE
                list: ops
                    HdlValueId: last_tag
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: PART_SELECT_POST
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlValueId: WBLSB
                                            HdlValueId: LS
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AW
                                            HdlValueId: LS

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    INS HdlValueId@@w_cachable to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        INS HdlValueId@@raw_cachable_address to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlOp@@OR_LOG to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS list@@ops to OR_LOG
                INS HdlOp@@NE to ops
                HdlOp: NE
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_addr
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueId: DATA_WIDTH
                                                HdlValueInt: 1
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueId: DATA_WIDTH
                                                HdlValueInt: 8
                        HdlValueInt: ff


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -229,7 +235,7 @@ module	dcache #(
 
 	// Cachability checking
 	// {{{
-	iscachable chkaddress(i_addr[AW+1:0], raw_cachable_address);
+	iscachable chkaddress(i_addr[0 +: AW+WBLSB], raw_cachable_address);
 	// }}}
 
 	// r_* values

ParseResult:
UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@ADD to PART_SELECT_POST
            MOV HdlOp@@ADD to ops
            HdlOp: ADD
                list: ops
                    HdlValueId: AW
                    HdlValueInt: 1
            UPD HdlOp@@ADD to ADD
                DEL HdlValueInt@@1 from ops
            DEL HdlValueInt@@2 from ops
            DEL list@@ops from DOWNTO
        DEL HdlOp@@DOWNTO from ops


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -259,7 +265,7 @@ module	dcache #(
 		// Some preliminaries that needed to be calculated on the first
 		// clock
 		if ((!o_pipe_stalled)&&(!r_rd_pending))
-			r_addr <= i_addr[(AW+1):2];
+			r_addr <= i_addr[WBLSB +: AW];
 		if ((!o_pipe_stalled)&&(!r_rd_pending))
 		begin
 			r_iv   <= c_v[i_cline];

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@EQ to EQ
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@o_wb_addr to r_addr


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -391,21 +488,21 @@ module	dcache #(
 	generate if (OPT_PIPE)
 	begin : OPT_PIPE_FIFO
 		// {{{
-		reg	[NAUX+4-2:0]	fifo_data [0:((1<<OPT_FIFO_DEPTH)-1)];
+		reg	[FIF_WIDTH-1:0]	fifo_data [0:((1<<OPT_FIFO_DEPTH)-1)];
 
 		reg	[DP:0]		wraddr, rdaddr;
 
 		always @(posedge i_clk)
 		if (i_pipe_stb)
 			fifo_data[wraddr[DP-1:0]]
-				<= { i_oreg[NAUX-2:0], i_op[2:1], i_addr[1:0] };
+				<= { i_oreg[NAUX-2:0], i_op[2:1], i_addr[WBLSB-1:0] };
 
 		always @(posedge i_clk)
 		if (i_pipe_stb)
 			gie <= i_oreg[NAUX-1];
 
 `ifdef	NO_BKRAM
-		reg	[NAUX+4-2:0]	r_req_data, r_last_data;
+		reg	[FIF_WIDTH-1:0]	r_req_data, r_last_data;
 		reg			single_write;
 
 		always @(posedge i_clk)

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: DATA_WIDTH
            HdlValueId: BUS_WIDTH
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlIdDef@@fr_last_addr to body

INS HdlStmProcess@@ to body
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: f_fill
                    HdlValueInt: 0
            HdlStmWait:
                list: val

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlAll
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmAssign@@body to body
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to PART_SELECT_POST
            MOV HdlOp@@SUB to ops
            HdlOp: SUB
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: NAUX
                            HdlValueInt: 4
                    HdlValueInt: 1
            UPD HdlOp@@SUB to SUB
                UPD HdlOp@@ADD to ADD
                    UPD HdlValueId@@NAUX to WBLSB
                    DEL HdlValueInt@@4 from ops
                DEL HdlValueInt@@1 from ops
            DEL HdlValueInt@@4 from ops
            DEL list@@ops from DOWNTO
        DEL HdlOp@@DOWNTO from ops

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                MOV HdlValueInt@@1 to ops
                HdlValueInt: 1


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -417,25 +514,25 @@ module	dcache #(
 		always @(posedge i_clk)
 		if (i_pipe_stb)
 			r_last_data <= { i_oreg[NAUX-2:0],
-						i_op[2:1], i_addr[1:0] };
+						i_op[2:1], i_addr[WBLSB-1:0] };
 
 		always @(*)
 		begin
 			req_data[NAUX+4-1] = gie;
 			// if ((r_svalid)||(state == DC_READ))
 			if (single_write)
-				req_data[NAUX+4-2:0] = r_last_data;
+				req_data[FIF_WIDTH-1:0] = r_last_data;
 			else
-				req_data[NAUX+4-2:0] = r_req_data;
+				req_data[FIF_WIDTH-1:0] = r_req_data;
 		end
 
 		always @(*)
 			`ASSERT(req_data == fifo_data[rdaddr[DP-1:0]]);
 `else
 		always @(*)
-			req_data[NAUX+4-2:0] = fifo_data[rdaddr[DP-1:0]];
+			req_data[FIF_WIDTH-1:0] = fifo_data[rdaddr[DP-1:0]];
 		always @(*)
-			req_data[NAUX+4-1] = gie;
+			req_data[FIF_WIDTH] = gie;
 `endif
 
 		initial	wraddr = 0;

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: o_wb_addr
                    HdlValueInt: 0
            HdlStmWait:
                list: val

UPD HdlStmIf@@ to 
    INS HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: DATA_WIDTH
            HdlValueId: BUS_WIDTH
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlAll
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    INS HdlStmCaseType@@CASEZ to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    INS HdlOp@@INDEX to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    HdlOp: INDEX
        list: ops
            HdlValueId: i_op
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 1
    INS list@@cases to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    INS tuple@@ to cases
    tuple
        HdlValueInt: 0?
        HdlOp: ASSIGN
            list: ops
                HdlValueId: pre_shift
                HdlValueId: i_data
    INS HdlOp@@ASSIGN to 
    INS HdlOp@@ASSIGN to 
    UPD HdlOp@@ASSIGN to ASSIGN
        INS list@@ops to ASSIGN
        INS HdlValueId@@pre_shift to ops
        UPD HdlOp@@CONCAT to CONCAT
            INS HdlOp@@REPL_CONCAT to ops
            HdlOp: REPL_CONCAT
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DATA_WIDTH
                            HdlValueInt: 16
                    HdlValueInt: 0
    UPD HdlOp@@ASSIGN to ASSIGN
        INS list@@ops to ASSIGN
        INS HdlValueId@@pre_shift to ops
        UPD HdlOp@@CONCAT to CONCAT
            INS HdlOp@@REPL_CONCAT to ops
            HdlOp: REPL_CONCAT
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DATA_WIDTH
                            HdlValueInt: 8
                    HdlValueInt: 0

UPD HdlStmAssign@@ to 
    MOV HdlOp@@CONCAT to 
    HdlOp: CONCAT
        list: ops
            HdlValueInt: 0
            HdlValueId: gie


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -459,6 +556,7 @@ module	dcache #(
 `ifdef	FORMAL
 		reg	[AW-1:0]	f_fifo_addr [0:((1<<OPT_FIFO_DEPTH)-1)];
 		reg	[F_LGDEPTH-1:0]	f_last_wraddr;
+		reg	[FIF_WIDTH:0]	f_last_data;
 
 		always @(*)
 		begin

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: DATA_WIDTH
            HdlValueId: BUS_WIDTH
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlValueId: i_reset
    INS list@@elifs to body
    INS tuple@@ to elifs
    INS tuple@@ to elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlValueId: OPT_LOWPOWER
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: i_wb_stall
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: o_wb_data
    INS HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: o_busy
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: i_wb_stall
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: OPT_LOWPOWER
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: i_pipe_stb
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@ to 
    INS HdlOp@@NEG_LOG to 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueId: shifted_data
                HdlValueId: o_wb_data
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    INS HdlStmCaseType@@CASEZ to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    INS HdlOp@@INDEX to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    HdlOp: INDEX
        list: ops
            HdlValueId: i_op
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 1
    INS list@@cases to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    INS tuple@@ to cases
    tuple
        HdlValueInt: 0?
        HdlStmAssign
            HdlOp: REPL_CONCAT
                list: ops
                    HdlOp: DIV
                        list: ops
                            HdlValueId: BUS_WIDTH
                            HdlValueId: DATA_WIDTH
                    HdlValueId: i_data
            HdlValueId: o_wb_data
    INS tuple@@ to cases
    tuple
        HdlValueInt: 10
        HdlStmAssign
            HdlOp: REPL_CONCAT
                list: ops
                    HdlOp: DIV
                        list: ops
                            HdlValueId: BUS_WIDTH
                            HdlValueInt: 16
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_data
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 15
                                    HdlValueInt: 0
            HdlValueId: o_wb_data
    INS tuple@@ to cases
    INS HdlValueInt@@11 to 

UPD HdlStmAssign@@ to 
    INS HdlOp@@REPL_CONCAT to 
    INS HdlValueId@@o_wb_data to 
    UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
        INS list@@ops to REPL_CONCAT
        INS HdlOp@@DIV to ops
        HdlOp: DIV
            list: ops
                HdlValueId: BUS_WIDTH
                HdlValueInt: 8


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -516,49 +614,52 @@ module	dcache #(
 			f_last_wraddr[DP:0] = wraddr - 1'b1;
 		end
 
+		assign	f_last_data = fifo_data[f_last_wraddr];
+
 		always @(posedge i_clk)
 		if (r_rd_pending)
 		begin
-			`ASSERT(f_pc_pending == (fifo_data[f_last_wraddr][7:5] == 3'h7));
-			`ASSERT({ gie, fifo_data[f_last_wraddr][7:4] } == f_last_reg);
+			`ASSERT(f_pc_pending == (f_last_data[1+WBLSB+2 +: 3] == 3'h7));
+			`ASSERT({ gie, f_last_data[2+WBLSB +: 4] } == f_last_reg);
 		end
 
 `define	INSPECT_FIFO
 		reg	[((1<<(DP+1))-1):0]	f_valid_fifo_entry;
 
-		genvar	k;
-		for(k=0; k<(1<<(DP+1)); k=k+1)
+		genvar	gk;
+		for(gk=0; gk<(1<<(DP+1)); gk=gk+1)
 		begin
 
 			always @(*)
 			begin
-			f_valid_fifo_entry[k] = 1'b0;
+			f_valid_fifo_entry[gk] = 1'b0;
 			/*
 			if ((rdaddr[DP] != wraddr[DP])
 					&&(rdaddr[DP-1:0] == wraddr[DP-1:0]))
 				f_valid_fifo_entry[k] = 1'b1;
 			else */
-			if ((rdaddr < wraddr)&&(k < wraddr)
-					&&(k >= rdaddr))
-				f_valid_fifo_entry[k] = 1'b1;
-			else if ((rdaddr > wraddr)&&(k >= rdaddr))
-				f_valid_fifo_entry[k] = 1'b1;
-			else if ((rdaddr > wraddr)&&(k <  wraddr))
-				f_valid_fifo_entry[k] = 1'b1;
+			if ((rdaddr < wraddr)&&(gk < wraddr)
+					&&(gk >= rdaddr))
+				f_valid_fifo_entry[gk] = 1'b1;
+			else if ((rdaddr > wraddr)&&(gk >= rdaddr))
+				f_valid_fifo_entry[gk] = 1'b1;
+			else if ((rdaddr > wraddr)&&(gk <  wraddr))
+				f_valid_fifo_entry[gk] = 1'b1;
 			end
 
 `ifdef	INSPECT_FIFO
-			wire	[NAUX+4-2:0]	fifo_data_k;
+			wire	[FIF_WIDTH-1:0]	fifo_data_k;
+
+			assign	fifo_data_k = fifo_data[gk[DP-1:0]];
 
-			assign	fifo_data_k = fifo_data[k[DP-1:0]];
 			always @(*)
-			if (f_valid_fifo_entry[k])
+			if (f_valid_fifo_entry[gk])
 			begin
 				if (!f_pc_pending)
 				begin
-					`ASSERT((o_wb_we)||(fifo_data_k[7:5] != 3'h7));
-				end else if (k != f_last_wraddr)
-					`ASSERT(fifo_data_k[7:5] != 3'h7);
+					`ASSERT((o_wb_we)||(fifo_data_k[1+2+WBLSB +: 3] != 3'h7));
+				end else if (gk != f_last_wraddr)
+					`ASSERT(fifo_data_k[1+2+WBLSB +: 3] != 3'h7);
 			end
 `endif // INSPECT_FIFO
 

ParseResult:
UPD HdlIdDef@@fr_last_addr to fr_last_addr
    INS HdlDirection@@INTERNAL to fr_last_addr
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            INS HdlValueInt@@0 to ops

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlAll
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@PART_SELECT_POST to PART_SELECT_POST
                INS HdlValueId@@NAUX to ops
                UPD HdlOp@@ADD to ADD
                    INS HdlValueInt@@2 to ops

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_UNARY to 
    UPD HdlOp@@AND_UNARY to AND_UNARY
        INS list@@ops to AND_UNARY
        INS HdlOp@@CONCAT to ops
        UPD HdlOp@@CONCAT to CONCAT
            INS list@@ops to CONCAT
            INS HdlOp@@CONCAT to ops
            INS HdlValueId@@f_fill to ops
            UPD HdlOp@@CONCAT to CONCAT
                INS list@@ops to CONCAT
                INS HdlOp@@CONCAT to ops
                INS HdlValueId@@f_addr_reg to ops
                UPD HdlOp@@CONCAT to CONCAT
                    INS list@@ops to CONCAT
                    INS HdlValueId@@f_return_address to ops

UPD HdlStmAssign@@body to body
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@PART_SELECT_POST to PART_SELECT_POST
            INS HdlValueId@@NAUX to ops
            UPD HdlOp@@ADD to ADD
                INS HdlValueInt@@2 to ops

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                INS HdlOp@@SUB to ops
                UPD HdlOp@@SUB to SUB
                    INS list@@ops to SUB
                    INS HdlValueId@@WBLSB to ops

INS HdlStmIf@@ to body

INS HdlStmAssign@@if_true to 

INS HdlStmAssign@@if_false to 
HdlStmAssign: if_false
    HdlOp: INDEX
        list: ops
            HdlValueId: i_addr
            HdlOp: PART_SELECT_POST
                list: ops
                    HdlValueId: WBLSB
                    HdlValueId: AW
    HdlValueId: o_wb_addr

UPD HdlStmAssign@@ to 
    MOV HdlValueId@@o_wb_addr to 
    HdlValueId: o_wb_addr
    MOV HdlOp@@INDEX to 
    HdlOp: INDEX
        list: ops
            HdlValueId: i_addr
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 2
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@ADD to SUB
            UPD HdlOp@@ADD to ADD
                UPD HdlValueId@@AW to DATA_WIDTH
            UPD HdlValueInt@@2 to 8
            MOV HdlValueInt@@2 to ops
            HdlValueInt: 2

INS HdlStmIf@@ to body

INS HdlStmAssign@@if_true to 

INS HdlStmAssign@@if_false to 
HdlStmAssign: if_false
    HdlOp: INDEX
        list: ops
            HdlValueId: i_addr
            HdlOp: PART_SELECT_POST
                list: ops
                    HdlValueId: WBLSB
                    HdlValueId: AW
    HdlValueId: o_wb_addr

UPD HdlStmAssign@@ to 
    MOV HdlValueId@@o_wb_addr to 
    HdlValueId: o_wb_addr
    MOV HdlOp@@INDEX to 
    HdlOp: INDEX
        list: ops
            HdlValueId: i_addr
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 2
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@ADD to SUB
            UPD HdlOp@@ADD to ADD
                UPD HdlValueId@@AW to DATA_WIDTH
            UPD HdlValueInt@@2 to 8
            MOV HdlValueInt@@2 to ops
            HdlValueInt: 2

UPD HdlStmAssign@@ to 
    UPD HdlOp@@NE to NE
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH

UPD HdlStmAssign@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH

UPD HdlStmAssign@@ to 
    UPD HdlOp@@NE to NE
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH

UPD HdlStmAssign@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH

UPD HdlStmAssign@@ to 
    UPD HdlOp@@NE to NE
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH

UPD HdlStmAssign@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH

UPD HdlStmAssign@@ to 
    UPD HdlOp@@NE to NE
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH

UPD HdlStmAssign@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@DW to DATA_WIDTH

DEL HdlStmAssign@@ from body

DEL HdlStmAssign@@ from body


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -567,21 +668,29 @@ module	dcache #(
 `ifndef	INSPECT_FIFO
 		always @(posedge i_clk)
 		if ((r_rd_pending)&&(rdaddr[DP:0] != f_last_wraddr[DP-1]))
-			assume(fifo_data[rdaddr][7:5] != 3'h7);
+			assume(req_data[1+2+WBLSB +: 3] != 3'h7);
 `endif // INSPECT_FIFO
 
 		//
 		//
 		//
 		always @(*)
-			f_pending_addr = f_fifo_addr[rdaddr];
+		begin
+			f_pending_addr[AW-1:0] = f_fifo_addr[rdaddr];
+			f_pending_addr[AW] = r_wb_cyc_lcl;
+		end
 
 		//
 		//
 		//
 		always @(posedge i_clk)
 		if (i_pipe_stb)
-			f_fifo_addr[wraddr[DP-1:0]] <= i_addr[AW+1:2];
+		begin
+			if (OPT_LOCAL_BUS && (&i_addr[DATA_WIDTH-1:DATA_WIDTH-8]))
+				f_fifo_addr[wraddr[DP-1:0]] <= { 1'b1, i_addr[2 +: AW] };
+			else
+				f_fifo_addr[wraddr[DP-1:0]] <= { 1'b0, i_addr[WBLSB +: AW] };
+		end
 
 		always @(*)
 		begin

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@REPL_CONCAT to 
    UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
        INS list@@ops to REPL_CONCAT
        INS HdlOp@@DIV to ops
        INS HdlValueInt@@1 to ops
        UPD HdlOp@@DIV to DIV
            INS list@@ops to DIV
            INS HdlValueId@@BUS_WIDTH to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@i_wb_ack to ops
        HdlValueId: i_wb_ack
        DEL HdlOp@@NEG_LOG from ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: end_of_line
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to ADD
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlValueId@@i_wb_ack to c_waddr
        UPD HdlOp@@ADD to TERNARY
        UPD HdlOp@@ADD to ADD
            UPD HdlValueId@@c_waddr to i_wb_ack
        DEL HdlValueId@@c_waddr from ops

INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlValueId: last_line_stb
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: o_wb_addr
    list: elifs

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@o_wb_addr to r_cline
            MOV HdlValueId@@o_wb_addr to ops
            HdlValueId: o_wb_addr
            DEL HdlOp@@DOWNTO from ops
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: CS
                            HdlValueInt: 1
                    HdlValueId: LS
            DEL list@@ops from INDEX
        DEL HdlOp@@INDEX from ops

INS HdlStmIf@@ to body

UPD HdlStmAssign@@ to 
    UPD HdlValueInt@@f to 8
    MOV HdlValueInt@@f to 
    HdlValueInt: f


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -609,11 +718,11 @@ module	dcache #(
 		always @(*)
 		begin
 			f_twin_valid_one = ((f_valid_fifo_entry[f_twin_base])
-				&&(f_twin_first == { f_fifo_addr[f_twin_base],
-						fifo_data[f_twin_base] }));
+				&&(f_twin_first == { f_fifo_addr[f_twin_base[DP-1:0]],
+						fifo_data[f_twin_base[DP-1:0]] }));
 			f_twin_valid_two = ((f_valid_fifo_entry[f_twin_next])
-				&&(f_twin_second == { f_fifo_addr[f_twin_next],
-						fifo_data[f_twin_next] }));
+				&&(f_twin_second == { f_fifo_addr[f_twin_next[DP-1:0]],
+						fifo_data[f_twin_next[DP-1:0]] }));
 		end
 
 		always @(*)

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlOp@@NEG_LOG to ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: stb

INS HdlStmIf@@ to body
HdlStmIf
    HdlValueId: OPT_LOWPOWER
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: o_wb_addr
    list: elifs

UPD HdlStmIf@@ to 
    MOV list@@elifs to 
    list: elifs

UPD HdlStmAssign@@if_true to if_true
    MOV HdlValueId@@o_wb_addr to if_true
    HdlValueId: o_wb_addr
    MOV HdlOp@@INDEX to if_true
    HdlOp: INDEX
        list: ops
            HdlValueId: i_addr
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 2
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@ADD to SUB
            UPD HdlOp@@ADD to ADD
                UPD HdlValueId@@AW to DATA_WIDTH
            UPD HdlValueInt@@2 to 8
            MOV HdlValueInt@@2 to ops
            HdlValueInt: 2

DEL HdlStmAssign@@if_true from 


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -646,12 +755,12 @@ module	dcache #(
 		if (o_rdbusy)
 		begin
 		if (f_twin_valid_one && f_twin_base != f_last_wraddr)
-			`ASSERT({ gie, fifo_data[f_twin_base][7:4] } != f_addr_reg);
+			`ASSERT({ gie, f_twin_first[2+WBLSB +: 4] } != f_addr_reg);
 		if (f_twin_valid_two && f_twin_next != f_last_wraddr)
-			`ASSERT({ gie, fifo_data[f_twin_next][7:4] } != f_addr_reg);
+			`ASSERT({ gie, f_twin_second[2+WBLSB +: 4] } != f_addr_reg);
 		if ((rdaddr != f_last_wraddr)&&(rdaddr != f_twin_base)
 				&&(rdaddr != f_twin_next))
-			assume({ gie, fifo_data[rdaddr][7:4] } != f_addr_reg);
+			assume({ gie, req_data[2+WBLSB +: 4] } != f_addr_reg);
 		end
 		// }}}
 

ParseResult:
INS HdlStmIf@@ to body
HdlStmIf
    HdlValueId: OPT_LOWPOWER
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: o_wb_addr
    list: elifs

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@stb to i_pipe_stb
    MOV list@@elifs to 
    list: elifs

UPD HdlStmAssign@@if_true to if_true
    MOV HdlValueId@@o_wb_addr to if_true
    HdlValueId: o_wb_addr
    MOV HdlOp@@INDEX to if_true
    HdlOp: INDEX
        list: ops
            HdlValueId: i_addr
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 2
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@ADD to SUB
            UPD HdlOp@@ADD to ADD
                UPD HdlValueId@@AW to DATA_WIDTH
            UPD HdlValueInt@@2 to 8
            MOV HdlValueInt@@2 to ops
            HdlValueInt: 2

DEL HdlStmAssign@@if_true from 


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -679,16 +788,20 @@ module	dcache #(
 `endif // FORMAL
 
 		always @(posedge i_clk)
-			o_wreg <= req_data[(NAUX+4-1):4];
+			o_wreg <= req_data[2+WBLSB +: NAUX];
 	// }}}
 	end else begin : NO_FIFO
 	// {{{
+		reg	[AW-1:0]	fr_last_addr;
+
+		initial	f_fill = 0;
+
 		always @(posedge i_clk)
 		if (i_pipe_stb)
-			req_data <= { i_oreg, i_op[2:1], i_addr[1:0] };
+			req_data <= { i_oreg, i_op[2:1], i_addr[WBLSB-1:0] };
 
 		always @(*)
-			o_wreg = req_data[(NAUX+4-1):4];
+			o_wreg = req_data[2+WBLSB +: NAUX];
 
 		always @(*)
 			gie = o_wreg[NAUX-1];

ParseResult:
INS HdlStmIf@@ to body
HdlStmIf
    HdlValueId: OPT_LOWPOWER
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: o_wb_addr
    list: elifs


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -749,6 +877,7 @@ module	dcache #(
 
 	// BIG STATE machine: CYC, STB, c_v, state, etc
 	// {{{
+	initial	o_wb_addr    = 0;
 	initial	r_wb_cyc_gbl = 0;
 	initial	r_wb_cyc_lcl = 0;
 	initial	o_wb_stb_gbl = 0;

ParseResult:
UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmIf@@body to body
    DEL HdlValueId@@c_wr from body
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from body
    DEL list@@elifs from body

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -766,11 +895,12 @@ module	dcache #(
 		// {{{
 		c_v <= 0;
 		c_wr   <= 1'b0;
-		c_wsel <= 4'hf;
+		c_wsel  <= {(BUS_WIDTH/8){1'b1}};
 		r_wb_cyc_gbl <= 1'b0;
 		r_wb_cyc_lcl <= 1'b0;
 		o_wb_stb_gbl <= 0;
 		o_wb_stb_lcl <= 0;
+		o_wb_addr    <= 0;
 		wr_cstb <= 1'b0;
 		last_line_stb <= 1'b0;
 		end_of_line <= 1'b0;

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@OPT_LOCAL_BUS to ops
        INS HdlOp@@AND_UNARY to ops
        UPD HdlOp@@AND_UNARY to AND_UNARY
            INS list@@ops to AND_UNARY
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    INS HdlOp@@SUB to ops
                    UPD HdlOp@@SUB to SUB
                        INS list@@ops to SUB
                        INS HdlValueId@@DATA_WIDTH to ops


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -787,7 +917,7 @@ module	dcache #(
 		c_wr <= 0;
 
 		set_vflag <= 1'b0;
-		if ((!cyc)&&(set_vflag))
+		if (!cyc && set_vflag)
 			c_v[c_waddr[(CS-1):LS]] <= 1'b1;
 
 		wr_cstb <= 1'b0;

ParseResult:
UPD HdlStmAssign@@body to body
    UPD HdlValueId@@cached_rdata to cached_rword

UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@cached_idata to cached_iword
        UPD HdlValueId@@cached_rdata to cached_rword


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -811,13 +941,13 @@ module	dcache #(
 
 		// last_line_stb
 		// {{{
-		if (!cyc || (OPT_LOWPOWER && state != DC_READC))
+		if (!cyc || !stb || (OPT_LOWPOWER && state != DC_READC))
 			last_line_stb <= (LS <= 0);
-		else if ((stb)&&(!i_wb_stall)&&(LS <= 1))
+		else if (!i_wb_stall && (LS <= 1))
 			last_line_stb <= 1'b1;
-		else if ((stb)&&(!i_wb_stall))
+		else if (!i_wb_stall)
 			last_line_stb <= (o_wb_addr[(LS-1):1]=={(LS-1){1'b1}});
-		else if (stb)
+		else
 			last_line_stb <= (o_wb_addr[(LS-1):0]=={(LS){1'b1}});
 		// }}}
 

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlAll
    HdlStmIf: body
        HdlValueId: o_wb_cyc_lcl
        HdlOp: ASSIGN
            list: ops
                HdlValueId: pre_shifted
                HdlOp: SLL
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlValueId: i_wb_data
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueId: BUS_WIDTH
                                                HdlValueInt: 32
                                        HdlValueInt: 0
                        HdlOp: MUL
                            list: ops
                                HdlValueInt: 8
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: req_data
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlValueInt: 2
                                                        HdlValueInt: 1
                                                HdlValueInt: 0
        list: elifs
        HdlOp: ASSIGN
            list: ops
                HdlValueId: pre_shifted
                HdlOp: SLL
                    list: ops
                        HdlValueId: pre_data
                        HdlOp: MUL
                            list: ops
                                HdlValueInt: 8
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: req_data
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlValueId: WBLSB
                                                        HdlValueInt: 1
                                                HdlValueInt: 0

INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: o_data
                    HdlValueInt: 0
            HdlStmWait:
                list: val

INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

INS HdlStmIf@@body to 
HdlStmIf: body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: i_reset
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: r_svalid
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlOp: NEG_LOG
                                                list: ops
                                                    HdlValueId: i_wb_ack
                                            HdlOp: NE
                                                list: ops
                                                    HdlValueId: state
                                                    HdlValueId: DC_READS
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: r_dvalid
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: o_data
    list: elifs
    HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
        HdlStmCaseType: CASEZ
        HdlOp: INDEX
            list: ops
                HdlValueId: req_data
                HdlOp: PART_SELECT_POST
                    list: ops
                        HdlValueId: WBLSB
                        HdlValueInt: 2
        list: cases
            tuple
                HdlValueInt: 10
                HdlStmAssign
                    HdlOp: CONCAT
                        list: ops
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: pre_shifted
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: BUS_WIDTH
                                                    HdlValueInt: 1
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: BUS_WIDTH
                                                    HdlValueInt: 16
                    HdlValueId: o_data
            tuple
                HdlValueInt: 11
                HdlStmAssign
                    HdlOp: CONCAT
                        list: ops
                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: pre_shifted
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: BUS_WIDTH
                                                    HdlValueInt: 1
                                            HdlOp: SUB
                                                list: ops
                                                    HdlValueId: BUS_WIDTH
                                                    HdlValueInt: 8
                    HdlValueId: o_data
        HdlStmAssign: default
            HdlOp: INDEX
                list: ops
                    HdlValueId: pre_shifted
                    HdlOp: DOWNTO
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: BUS_WIDTH
                                    HdlValueInt: 1
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: BUS_WIDTH
                                    HdlValueInt: 32
            HdlValueId: o_data

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['req_data',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '3'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '0'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['req_data',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '3'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '0'}]}]} 
    MOV tuple@@ to cases
    tuple
        HdlValueInt: 101?
        HdlStmAssign
            HdlOp: CONCAT
                list: ops
                    HdlValueInt: 0
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: pre_data
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 15
                                    HdlValueInt: 0
            HdlValueId: o_data
    MOV tuple@@ to cases
    tuple
        HdlValueInt: 1111
        HdlStmAssign
            HdlOp: CONCAT
                list: ops
                    HdlValueInt: 0
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: pre_data
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 7
                                    HdlValueInt: 0
            HdlValueId: o_data
    UPD HdlValueInt@@101? to 10
    UPD HdlValueInt@@1111 to 11
    DEL HdlStmCaseType@@CASEZ from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['req_data',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '3'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '0'}]}]} 
    DEL HdlOp@@INDEX from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['req_data',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '3'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '0'}]}]} 
    HdlOp: INDEX
        list: ops
            HdlValueId: req_data
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 3
                    HdlValueInt: 0
    DEL tuple@@ from cases
    tuple
        HdlValueInt: 100?
        HdlStmAssign
            HdlOp: CONCAT
                list: ops
                    HdlValueInt: 0
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: pre_data
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 31
                                    HdlValueInt: 16
            HdlValueId: o_data
    DEL tuple@@ from cases
    tuple
        HdlValueInt: 1100
        HdlStmAssign
            HdlOp: CONCAT
                list: ops
                    HdlValueInt: 0
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: pre_data
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 31
                                    HdlValueInt: 24
            HdlValueId: o_data
    DEL tuple@@ from cases
    tuple
        HdlValueInt: 1101
        HdlStmAssign
            HdlOp: CONCAT
                list: ops
                    HdlValueInt: 0
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: pre_data
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 23
                                    HdlValueInt: 16
            HdlValueId: o_data
    DEL tuple@@ from cases
    tuple
        HdlValueInt: 1110
        HdlStmAssign
            HdlOp: CONCAT
                list: ops
                    HdlValueInt: 0
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: pre_data
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 15
                                    HdlValueInt: 8
            HdlValueId: o_data
    DEL list@@cases from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['req_data',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '3'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '0'}]}]} 

UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmAssign@@ to 
    MOV HdlOp@@CONCAT to 
    HdlOp: CONCAT
        list: ops
            HdlValueInt: 0
            HdlOp: INDEX
                list: ops
                    HdlValueId: pre_data
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 15
                            HdlValueInt: 0
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@pre_data to i_data
        DEL HdlValueInt@@0 from ops
    DEL HdlValueId@@o_data from 

UPD HdlStmAssign@@ to 
    MOV HdlOp@@CONCAT to 
    HdlOp: CONCAT
        list: ops
            HdlValueInt: 0
            HdlOp: INDEX
                list: ops
                    HdlValueId: pre_data
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 7
                            HdlValueInt: 0
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@pre_data to i_data
        DEL HdlValueInt@@0 from ops
    DEL HdlValueId@@o_data from 

UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlValueId@@OPT_LOCAL_BUS to ops
        INS HdlOp@@AND_UNARY to ops
        UPD HdlOp@@AND_UNARY to AND_UNARY
            INS list@@ops to AND_UNARY
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    INS HdlOp@@SUB to ops
                    UPD HdlOp@@SUB to SUB
                        INS list@@ops to SUB
                        INS HdlValueId@@DATA_WIDTH to ops

UPD HdlStmAssign@@if_true to if_true
    INS HdlOp@@INDEX to if_true
    HdlOp: INDEX
        list: ops
            HdlValueId: i_addr
            HdlOp: PART_SELECT_POST
                list: ops
                    HdlValueInt: 2
                    HdlValueId: AW

DEL HdlStmAssign@@ from 

DEL HdlStmAssign@@ from 

DEL HdlStmAssign@@default from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['req_data',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '3'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '0'}]}]} 
HdlStmAssign: default
    HdlValueId: pre_data
    HdlValueId: o_data

DEL HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['req_data',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '3'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '0'}]}]}  from 

DEL HdlStmProcess@@ from objs


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -871,48 +1005,55 @@ module	dcache #(
 			end else if ((i_pipe_stb)&&(!w_cachable))
 			begin // Read non-cachable memory area
 				state <= DC_READS;
-				o_wb_addr <= i_addr[(AW+1):2];
+
+				if (OPT_LOCAL_BUS && (&i_addr[DATA_WIDTH-1:DATA_WIDTH-8]))
+					o_wb_addr <= i_addr[2 +: AW];
+				else
+					o_wb_addr <= i_addr[WBLSB +: AW];
 
 				cyc <= 1'b1;
 				stb <= 1'b1;
 				if (OPT_LOCAL_BUS)
 				begin
-				r_wb_cyc_gbl <= (i_addr[DW-1:DW-8]!=8'hff);
-				r_wb_cyc_lcl <= (i_addr[DW-1:DW-8]==8'hff);
-				o_wb_stb_gbl <= (i_addr[DW-1:DW-8]!=8'hff);
-				o_wb_stb_lcl <= (i_addr[DW-1:DW-8]==8'hff);
+				r_wb_cyc_gbl <= (i_addr[DATA_WIDTH-1:DATA_WIDTH-8]!=8'hff);
+				r_wb_cyc_lcl <= (i_addr[DATA_WIDTH-1:DATA_WIDTH-8]==8'hff);
+				o_wb_stb_gbl <= (i_addr[DATA_WIDTH-1:DATA_WIDTH-8]!=8'hff);
+				o_wb_stb_lcl <= (i_addr[DATA_WIDTH-1:DATA_WIDTH-8]==8'hff);
 				end else begin
 				r_wb_cyc_gbl <= 1'b1;
 				o_wb_stb_gbl <= 1'b1;
 				end
 			end // else we stay idle
+			end
 			// }}}
-		end
 		DC_READC: begin
 			// {{{
 			// We enter here once we have committed to reading
 			// data into a cache line.
-			if ((stb)&&(!i_wb_stall))
+			if (stb && !i_wb_stall)
 			begin
 				stb <= (!last_line_stb);
 				o_wb_stb_gbl <= (!last_line_stb);
 				o_wb_addr[(LS-1):0] <= o_wb_addr[(LS-1):0]+1'b1;
+
+				if (OPT_LOWPOWER && last_line_stb)
+					o_wb_addr <= 0;
 			end
 
-			if ((i_wb_ack)&&(!end_of_line))
-				c_v[o_wb_addr[(CS-1):LS]] <= 1'b0;
+			if (i_wb_ack)
+				c_v[r_cline] <= 1'b0;
 
 			c_wr    <= (i_wb_ack);
 			c_wdata <= i_wb_data;
-			c_waddr <= ((i_wb_ack)?(c_waddr+1'b1):c_waddr);
-			c_wsel  <= 4'hf;
+			c_waddr <= c_waddr+(i_wb_ack ? 1:0);
+			c_wsel  <= {(BUS_WIDTH/8){1'b1}};
 
 			set_vflag <= !i_wb_err;
 			// if (i_wb_ack)
 			//	c_vtags[r_addr[(CS-1):LS]]
 			//			<= r_addr[(AW-1):LS];
 
-			if (((i_wb_ack)&&(end_of_line))||(i_wb_err))
+			if ((i_wb_ack && end_of_line)|| i_wb_err)
 			begin
 				state          <= DC_IDLE;
 				cyc <= 1'b0;

ParseResult:
INS HdlStmIf@@ to objs
HdlStmIf
    HdlOp: LT
        list: ops
            HdlOp: ADD
                list: ops
                    HdlValueId: AW
                    HdlValueId: WBLSB
            HdlValueId: DATA_WIDTH
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: unused
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: AND_UNARY
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_addr
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlValueId: DATA_WIDTH
                                                        HdlValueInt: 1
                                                HdlOp: ADD
                                                    list: ops
                                                        HdlValueId: AW
                                                        HdlValueId: WBLSB
                HdlValueId: unused
    list: elifs

UPD HdlStmIf@@body to body
    INS HdlValueId@@c_wr to body
    INS HdlStmBlock@@SEQ to body
    INS list@@elifs to body
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to PARAMETRIZATION
    MOV HdlOp@@INDEX to 
    HdlOp: INDEX
        list: ops
            HdlValueId: i_addr
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DW
                            HdlValueInt: 1
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@i_addr to reg
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@ADD to SUB
            DEL HdlOp@@SUB from ops
            HdlOp: SUB
                list: ops
                    HdlValueId: DW
                    HdlValueInt: 1
    DEL HdlValueId@@unused from 

INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlValueId: r_wb_cyc_gbl
            HdlValueId: i_wb_err
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: lock_gbl
    list: elifs

INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlValueId: r_wb_cyc_lcl
            HdlValueId: i_wb_err
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: lock_lcl
    list: elifs

UPD HdlStmFor@@ to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: ik
    INS HdlOp@@LT to 
    HdlOp: LT
        list: ops
            HdlValueId: ik
            HdlOp: DIV
                list: ops
                    HdlValueId: BUS_WIDTH
                    HdlValueInt: 8
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: ik
                    HdlOp: ADD
                        list: ops
                            HdlValueId: ik
                            HdlValueInt: 1

UPD HdlStmIf@@ to 
    DEL HdlOp@@LT from 
    HdlOp: LT
        list: ops
            HdlOp: ADD
                list: ops
                    HdlValueId: AW
                    HdlValueInt: 2
            HdlValueId: DW
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL list@@elifs from 

DEL HdlIdDef@@unused from body
HdlIdDef: unused
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: DW
                                    HdlValueId: AW
                            HdlValueInt: 2
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlStmAssign@@ from body

DEL HdlStmIf@@ from objs


CommitId: 972e3bab3665f14b5b26206b81eba973af7f5e2d
NEW: Multi-config sim capability w/ Icarus Verilog
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -922,9 +1063,10 @@ module	dcache #(
 				o_wb_stb_gbl <= 1'b0;
 				o_wb_stb_lcl <= 1'b0;
 				//
-			end
+				if (OPT_LOWPOWER)
+					o_wb_addr <= 0;
+			end end
 			// }}}
-		end
 		DC_READS: begin
 			// {{{
 			// We enter here once we have committed to reading

ParseResult:
UPD HdlStmFor@@ to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: ik
    INS HdlOp@@LT to 
    HdlOp: LT
        list: ops
            HdlValueId: ik
            HdlOp: DIV
                list: ops
                    HdlValueId: BUS_WIDTH
                    HdlValueInt: 8
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: ik
                    HdlOp: ADD
                        list: ops
                            HdlValueId: ik
                            HdlValueInt: 1

UPD HdlStmIf@@body to body
    INS HdlOp@@INDEX to body
    HdlOp: INDEX
        list: ops
            HdlValueId: c_wsel
            HdlValueId: ik
    INS list@@elifs to body

UPD HdlStmAssign@@if_true to if_true
    INS HdlOp@@INDEX to if_true
    HdlOp: INDEX
        list: ops
            HdlValueId: c_wdata
            HdlOp: PART_SELECT_POST
                list: ops
                    HdlOp: MUL
                        list: ops
                            HdlValueId: ik
                            HdlValueInt: 8
                    HdlValueInt: 8
    INS HdlOp@@INDEX to if_true
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlOp@@PART_SELECT_POST to ops
        HdlOp: PART_SELECT_POST
            list: ops
                HdlOp: MUL
                    list: ops
                        HdlValueId: ik
                        HdlValueInt: 8
                HdlValueInt: 8


CommitId: 882b2d6551f9fd6fe6827090e1941680677924fe
Two idecode fixes, early-branch stb and sim/noop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -118,6 +118,9 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	wire		w_wR, w_rA, w_rB, w_wR_n;
 	wire		w_ljmp, w_ljmp_dly, w_cis_ljmp;
 	wire	[31:0]	iword;
+	wire		pf_valid;
+
+	assign	pf_valid = (i_pf_valid)&&(!o_early_branch_stb);
 
 
 	reg	[15:0]	r_nxt_half;

ParseResult:
INS HdlIdDef@@pf_valid to objs
HdlIdDef: pf_valid
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_pf_valid
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_early_branch_stb
    HdlValueId: pf_valid


CommitId: 882b2d6551f9fd6fe6827090e1941680677924fe
Two idecode fixes, early-branch stb and sim/noop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -367,7 +370,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		always @(posedge i_clk)
 		if ((i_reset)||(w_ljmp_dly))
 			r_phase <= 1'b0;
-		else if ((i_ce)&&(i_pf_valid))
+		else if ((i_ce)&&(pf_valid))
 		begin
 			if (o_phase)
 				// CIS instructions only have two parts.  On

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@i_pf_valid to pf_valid


CommitId: 882b2d6551f9fd6fe6827090e1941680677924fe
Two idecode fixes, early-branch stb and sim/noop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -510,7 +513,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 
 `ifdef	VERILATOR
 			// Support the SIM instruction(s)
-			o_sim <= w_sim;
+			o_sim <= (w_sim)||(w_noop);
 `else
 			o_sim <= 1'b0;
 `endif

ParseResult:
INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_ljmp

UPD HdlStmIf@@body to body
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_CIS
            HdlOp: INDEX
                list: ops
                    HdlValueId: iword
                    HdlValueInt: 31
    HdlStmAssign: if_true
        HdlValueId: w_cis_ljmp
        HdlValueId: r_ljmp
    list: elifs
        tuple
            HdlValueId: i_pf_valid
            HdlStmAssign
                HdlValueId: w_ljmp
                HdlValueId: r_ljmp

MOV HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_ljmp

UPD HdlStmIf@@body to body
    UPD HdlStmBlock@@SEQ to SEQ
        UPD list@@body to elifs
        MOV list@@body to SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: OPT_CIS
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: iword
                                HdlValueInt: 31
                HdlStmAssign: if_true
                    HdlValueId: w_cis_ljmp
                    HdlValueId: r_ljmp
                list: elifs
                    tuple
                        HdlValueId: i_pf_valid
                        HdlStmAssign
                            HdlValueId: w_ljmp
                            HdlValueId: r_ljmp

UPD HdlStmIf@@ to 
    MOV tuple@@ to elifs
    tuple
        HdlValueId: i_pf_valid
        HdlStmAssign
            HdlValueId: w_ljmp
            HdlValueId: r_ljmp
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_CIS
            HdlOp: INDEX
                list: ops
                    HdlValueId: iword
                    HdlValueInt: 31
    UPD HdlValueId@@i_pf_valid to pf_valid
    DEL list@@elifs from 

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueId: w_cis_ljmp
    HdlValueId: r_ljmp


CommitId: 882b2d6551f9fd6fe6827090e1941680677924fe
Two idecode fixes, early-branch stb and sim/noop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -530,9 +533,11 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 				r_ljmp <= 1'b0;
 			else if (i_ce)
 			begin
-				if ((OPT_CIS)&&(iword[`CISBIT]))
+				if (o_early_branch_stb)
+					r_ljmp <= 1'b0;
+				else if ((OPT_CIS)&&(iword[`CISBIT]))
 					r_ljmp <= w_cis_ljmp;
-				else if (i_pf_valid)
+				else if (pf_valid)
 					r_ljmp <= (w_ljmp);
 			end
 		assign	o_ljmp = r_ljmp;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@i_pf_valid to pf_valid


CommitId: 882b2d6551f9fd6fe6827090e1941680677924fe
Two idecode fixes, early-branch stb and sim/noop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -544,7 +549,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		begin
 			r_early_branch     <= 1'b0;
 			r_early_branch_stb <= 1'b0;
-		end else if ((i_ce)&&(i_pf_valid))
+		end else if ((i_ce)&&(pf_valid))
 		begin
 			if (r_ljmp)
 			begin

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@i_pf_valid to pf_valid


CommitId: 882b2d6551f9fd6fe6827090e1941680677924fe
Two idecode fixes, early-branch stb and sim/noop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -623,7 +628,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		if (i_reset)
 			r_pipe <= 1'b0;
 		else if (i_ce)
-			r_pipe <= (r_valid)&&((i_pf_valid)||(o_phase))
+			r_pipe <= (r_valid)&&((pf_valid)||(o_phase))
 				// Both must be memory operations
 				&&(w_mem)&&(o_M)
 				// Both must be writes, or both stores

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@AND_LOG to AND_LOG
                    UPD HdlOp@@AND_LOG to AND_LOG
                        UPD HdlOp@@AND_LOG to AND_LOG
                            UPD HdlOp@@AND_LOG to AND_LOG
                                UPD HdlOp@@AND_LOG to AND_LOG
                                    UPD HdlOp@@AND_LOG to AND_LOG
                                        UPD HdlOp@@AND_LOG to AND_LOG
                                            UPD HdlOp@@AND_LOG to AND_LOG
                                                UPD HdlOp@@OR_LOG to OR_LOG
                                                    UPD HdlValueId@@i_pf_valid to pf_valid


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -200,14 +201,17 @@ module	zipaxil #(
 
 	// Declarations
 	// {{{
+	localparam	[0:0]	DBG_ADDR_CPU = 1'b0,
+				DBG_ADDR_CTRL= 1'b1;
+
 	localparam	C_DBG_DATA_WIDTH = 32;
 	localparam	DBGLSB = $clog2(C_DBG_DATA_WIDTH/8);
 	localparam	AW=ADDRESS_WIDTH-2;
 	localparam	[0:0]	OPT_PIPELINED_BUS_ACCESS = (OPT_PIPELINED)&&(OPT_LGDCACHE > 1);
+	localparam	[0:0]	OPT_MEMPIPE = OPT_PIPELINED_BUS_ACCESS;
 	localparam	[0:0]	OPT_DCACHE = (OPT_LGDCACHE > 4);
 
 	localparam FETCH_LIMIT = (OPT_LGICACHE < 4) ? (1 << OPT_LGICACHE) : 16;
-	wire	[31:0]	cpu_debug;
 
 	localparam	RESET_BIT = 6,
 			STEP_BIT = 8,

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlValueId@@dbg_cmd_write to dbg_cpu_write
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@dbg_write_ready to ops
        HdlValueId: dbg_write_ready
    UPD HdlOp@@AND_LOG to EQ
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: dbg_write_ready
            HdlOp: INDEX
                list: ops
                    HdlValueId: awskd_addr
                    HdlValueInt: 5


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -233,14 +237,16 @@ module	zipaxil #(
 	wire	[2:0]	cpu_dbg_cc;
 	// }}}
 
-	reg	reset_hold;
+	wire	reset_hold;
 	wire	cpu_clken, cpu_clock, clk_gate;
 
 	// CPU control registers
 	// {{{
 	reg		cmd_halt, cmd_reset, cmd_step, cmd_clear_cache;
 	wire	[31:0]	cpu_status;
-	wire		dbg_cmd_write;
+	wire		dbg_cmd_write, dbg_cpu_write;
+	wire	[31:0]	dbg_cmd_data;
+	wire	[3:0]	dbg_cmd_strb;
 	// }}}
 
 	// Fetch

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        MOV HdlValueId@@reset_hold to ops
        HdlValueId: reset_hold
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from ASSIGN
    DEL list@@sensitivity from 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 

UPD HdlStmAssign@@if_true to if_true
    UPD HdlValueId@@reset_hold to r_reset_hold

UPD HdlStmAssign@@if_false to if_false
    UPD HdlValueId@@reset_hold to r_reset_hold

DEL HdlStmProcess@@ from body


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -304,9 +310,9 @@ module	zipaxil #(
 		.i_clk(S_AXI_ACLK), .i_reset(!S_AXI_ARESETN),
 		.i_valid(S_DBG_WVALID),
 		.o_ready(S_DBG_WREADY),
-		.i_data({ S_DBG_WDATA, S_DBG_WSTRB }),
+		.i_data({ S_DBG_WSTRB, S_DBG_WDATA }),
 		.o_valid(wskd_valid), .i_ready(dbg_write_ready),
-			.o_data({ wskd_data, wskd_strb })
+			.o_data({ wskd_strb, wskd_data })
 		// }}}
 	);
 

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@wskd_strb to dbg_cmd_strb
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@wskd_data to dbg_cmd_data
            UPD HdlOp@@NEG_LOG to NEG_LOG
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@wskd_data to dbg_cmd_data


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -638,30 +648,28 @@ module	zipaxil #(
 `else
 	zipcore #(
 		// {{{
-		.RESET_ADDRESS(RESET_ADDRESS),
+		.RESET_ADDRESS({ {(32-ADDRESS_WIDTH){1'b0}}, RESET_ADDRESS }),
 		.ADDRESS_WIDTH(ADDRESS_WIDTH-2),
+		.OPT_PIPELINED(OPT_PIPELINED),
+		.OPT_EARLY_BRANCHING(OPT_EARLY_BRANCHING),
+		.OPT_DCACHE(OPT_DCACHE),
 		.OPT_MPY(OPT_MPY),
 		.OPT_DIV(OPT_DIV),
-		.OPT_LOCK(OPT_LOCK),
 		.OPT_SHIFTS(OPT_SHIFTS),
-		.IMPLEMENT_FPU(IMPLEMENT_FPU),
-		.OPT_EARLY_BRANCHING(OPT_EARLY_BRANCHING),
-		.OPT_SIM(OPT_SIM),
+		.IMPLEMENT_FPU(OPT_FPU),
 		.OPT_CIS(OPT_CIS),
-		.OPT_USERMODE(OPT_USERMODE),
-		.OPT_PIPELINED(OPT_PIPELINED),
-		.OPT_PIPELINED_BUS_ACCESS(OPT_PIPELINED_BUS_ACCESS),
-		.OPT_DISTRIBUTED_REGS(OPT_DISTRIBUTED_REGS),
-		// localparam	[0:0]	OPT_MEMPIPE = OPT_PIPELINED_BUS_ACCESS;
-		.OPT_DCACHE(OPT_DCACHE),
+		.OPT_LOCK(OPT_LOCK),
+		.OPT_LOWPOWER(OPT_LOWPOWER),
 		.OPT_START_HALTED(START_HALTED),
+		.OPT_SIM(OPT_SIM),
+		.OPT_PIPELINED_BUS_ACCESS(OPT_MEMPIPE),
+		// localparam	[0:0]	OPT_MEMPIPE = OPT_PIPELINED_BUS_ACCESS;
 		.OPT_DBGPORT(OPT_DBGPORT),
 		.OPT_TRACE_PORT(OPT_TRACE_PORT),
 		.OPT_PROFILER(OPT_PROFILER),
-		.OPT_LOWPOWER(OPT_LOWPOWER),
-		// localparam	[0:0]	OPT_LOCK=(IMPLEMENT_LOCK)&&(OPT_PIPELINED);
-		// parameter [0:0]	WITH_LOCAL_BUS = 1'b1;
-		.OPT_CLKGATE(OPT_CLKGATE)
+		.OPT_CLKGATE(OPT_CLKGATE),
+		.OPT_DISTRIBUTED_REGS(OPT_DISTRIBUTED_REGS),
+		.OPT_USERMODE(OPT_USERMODE)
 `ifdef	FORMAL
 		, .F_LGDEPTH(F_LGDEPTH)
 `endif

ParseResult:
MOV HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: M_INSN_AWVALID

INS HdlIdDef@@i_bus_data to objs
HdlIdDef: i_bus_data
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: C_AXI_DATA_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@o_bus_data to objs
HdlIdDef: o_bus_data
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: C_AXI_DATA_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@o_bus_strb to objs
HdlIdDef: o_bus_strb
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: C_AXI_DATA_WIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmIf@@ to objs
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: SWAP_WSTRB
                    HdlOp: GT
                        list: ops
                            HdlValueId: C_AXI_DATA_WIDTH
                            HdlValueInt: 32
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: OPT_DCACHE
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: gk
                HdlValueId: genvar
                HdlDirection: INTERNAL
            HdlStmFor
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: gk
                HdlOp: LT
                    list: ops
                        HdlValueId: gk
                        HdlOp: DIV
                            list: ops
                                HdlValueId: C_AXI_DATA_WIDTH
                                HdlValueInt: 32
                HdlOp: ASSIGN
                    list: ops
                        HdlValueId: gk
                        HdlOp: ADD
                            list: ops
                                HdlValueId: gk
                                HdlValueInt: 1
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: M_DATA_RDATA
                                    HdlOp: PART_SELECT_POST
                                        list: ops
                                            HdlOp: MUL
                                                list: ops
                                                    HdlValueId: gk
                                                    HdlValueInt: 32
                                            HdlValueInt: 32
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_bus_data
                                    HdlOp: PART_SELECT_POST
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlValueId: C_AXI_DATA_WIDTH
                                                            HdlValueInt: 32
                                                    HdlOp: MUL
                                                        list: ops
                                                            HdlValueId: gk
                                                            HdlValueInt: 32
                                            HdlValueInt: 32
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: o_bus_data
                                    HdlOp: PART_SELECT_POST
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlValueId: C_AXI_DATA_WIDTH
                                                            HdlValueInt: 32
                                                    HdlOp: MUL
                                                        list: ops
                                                            HdlValueId: gk
                                                            HdlValueInt: 32
                                            HdlValueInt: 32
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: M_DATA_WDATA
                                    HdlOp: PART_SELECT_POST
                                        list: ops
                                            HdlOp: MUL
                                                list: ops
                                                    HdlValueId: gk
                                                    HdlValueInt: 32
                                            HdlValueInt: 32
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: o_bus_strb
                                    HdlOp: PART_SELECT_POST
                                        list: ops
                                            HdlOp: SUB
                                                list: ops
                                                    HdlOp: SUB
                                                        list: ops
                                                            HdlOp: DIV
                                                                list: ops
                                                                    HdlValueId: C_AXI_DATA_WIDTH
                                                                    HdlValueInt: 8
                                                            HdlValueInt: 4
                                                    HdlOp: MUL
                                                        list: ops
                                                            HdlValueId: gk
                                                            HdlValueInt: 4
                                            HdlValueInt: 4
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: M_DATA_WSTRB
                                    HdlOp: PART_SELECT_POST
                                        list: ops
                                            HdlOp: MUL
                                                list: ops
                                                    HdlValueId: gk
                                                    HdlValueInt: 4
                                            HdlValueInt: 4
    list: elifs
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueId: M_DATA_RDATA
                HdlValueId: i_bus_data
            HdlStmAssign
                HdlValueId: o_bus_data
                HdlValueId: M_DATA_WDATA
            HdlStmAssign
                HdlValueId: o_bus_strb
                HdlValueId: M_DATA_WSTRB


CommitId: 3525a5a3376c263ca8f9b4c6a2266999f72ed4ba
Fixed reset address for zipcpu_tb, named generate blocks in zipsys
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -176,7 +176,7 @@ module	zipsystem(i_clk, i_reset,
 		, o_cpu_debug
 `endif
 		);
-	parameter	RESET_ADDRESS=32'h0100000, ADDRESS_WIDTH=30,
+	parameter	RESET_ADDRESS=32'h1000_0000, ADDRESS_WIDTH=30,
 			LGICACHE=10;
 	parameter [0:0]	START_HALTED=1;
 	parameter	EXTERNAL_INTERRUPTS=1,

ParseResult:
UPD HdlIdDef@@RESET_ADDRESS to RESET_ADDRESS
    UPD HdlValueInt@@0100000 to 10000000


CommitId: 612ba5488528115e076578f621e676a2b03a6a1a
Testbench programs work again!
--- a/rtl/ex/skidbuffer.v
+++ b/rtl/ex/skidbuffer.v
@@ -219,6 +219,14 @@ module skidbuffer #(
 		end
 		// }}}
 	end endgenerate
+
+	// Keep Verilator happy
+	// {{{
+	// Verilator lint_off UNUSED
+	wire	unused;
+	assign	unused = &{ 1'b0, w_data };
+	// Verilator lint_on  UNUSED
+	// }}}
 ////////////////////////////////////////////////////////////////////////////////
 ////////////////////////////////////////////////////////////////////////////////
 ////////////////////////////////////////////////////////////////////////////////
ParseResult:
INS HdlIdDef@@unused to objs
HdlIdDef: unused
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: AND_UNARY
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlValueInt: 0
                    HdlValueId: w_data
    HdlValueId: unused


CommitId: c20ffe060413d056fdb5973a92a63efe4e58ca7b
Verilator lint updates: ffetch and f_idecode
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -57,16 +57,13 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 		o_op, o_ALU, o_M, o_DV, o_FP, o_break, o_lock,
 		o_wR, o_rA, o_rB, o_prepipe, o_sim, o_sim_immv
 		);
-	parameter		ADDRESS_WIDTH=24;
 	parameter	[0:0]	OPT_MPY    = 1'b1;
-	parameter	[0:0]	OPT_EARLY_BRANCHING = 1'b1;
 	parameter	[0:0]	OPT_DIVIDE = 1'b1;
 	parameter	[0:0]	OPT_FPU    = 1'b0;
 	parameter	[0:0]	OPT_CIS    = 1'b1;
 	parameter	[0:0]	OPT_LOCK   = 1'b1;
 	parameter	[0:0]	OPT_OPIPE  = 1'b1;
 	parameter	[0:0]	OPT_SIM    = 1'b0;
-	localparam		AW = ADDRESS_WIDTH;
 	//
 	input	wire [31:0]	i_instruction;
 	input	wire		i_phase, i_gie;

ParseResult:
DEL HdlIdDef@@ADDRESS_WIDTH from params
HdlIdDef: ADDRESS_WIDTH
    HdlValueInt: 24
    HdlDirection: INTERNAL

DEL HdlIdDef@@OPT_EARLY_BRANCHING from params
HdlIdDef: OPT_EARLY_BRANCHING
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL

DEL HdlIdDef@@AW from objs
HdlIdDef: AW
    HdlValueId: ADDRESS_WIDTH
    HdlDirection: INTERNAL


CommitId: c20ffe060413d056fdb5973a92a63efe4e58ca7b
Verilator lint updates: ffetch and f_idecode
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -86,7 +83,7 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 
 	wire	[4:0]	w_op;
 	wire		w_ldi, w_mov, w_cmptst, w_ldilo, w_ALU, w_brev,
-			w_noop, w_lock, w_sim, w_break, w_special, w_add,
+			w_noop, w_lock, w_sim, w_break, w_special, // w_add,
 			w_mpy;
 	wire	[4:0]	w_dcdR, w_dcdB, w_dcdA;
 	wire		w_dcdR_pc, w_dcdR_cc;

ParseResult:
DEL HdlIdDef@@w_add from objs
HdlIdDef: w_add
    HdlDirection: INTERNAL


CommitId: c20ffe060413d056fdb5973a92a63efe4e58ca7b
Verilator lint updates: ffetch and f_idecode
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -95,13 +92,9 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 	wire	[3:0]	w_cond;
 	wire		w_wF, w_mem, w_sto, w_div, w_fpu;
 	wire		w_wR, w_rA, w_rB, w_wR_n;
-	wire		w_ljmp, w_ljmp_dly, w_cis_ljmp;
 	wire	[31:0]	iword;
-	wire		pf_valid;
 
 
-	reg	[15:0]	r_nxt_half;
-
 	generate if (OPT_CIS)
 	begin : SET_IWORD
 

ParseResult:
DEL HdlIdDef@@w_ljmp from objs
HdlIdDef: w_ljmp
    HdlDirection: INTERNAL

DEL HdlIdDef@@w_ljmp_dly from objs
HdlIdDef: w_ljmp_dly
    HdlDirection: INTERNAL

DEL HdlIdDef@@w_cis_ljmp from objs
HdlIdDef: w_cis_ljmp
    HdlDirection: INTERNAL

DEL HdlIdDef@@pf_valid from objs
HdlIdDef: pf_valid
    HdlDirection: INTERNAL

DEL HdlIdDef@@r_nxt_half from objs
HdlIdDef: r_nxt_half
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 15
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: c20ffe060413d056fdb5973a92a63efe4e58ca7b
Verilator lint updates: ffetch and f_idecode
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -173,7 +144,7 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 	assign	w_ldilo  = (w_cis_op[4:0] == 5'h09);
 	assign	w_ALU    = (!w_cis_op[4]) // anything with [4]==0, but ...
 				&&(w_cis_op[3:1] != 3'h7); // not the divide
-	assign	w_add    = (w_cis_op[4:0] == 5'h02);
+	// assign	w_add    = (w_cis_op[4:0] == 5'h02);
 	assign	w_mem    = (w_cis_op[4:3] == 2'b10)&&(w_cis_op[2:1] !=2'b00);
 	assign	w_sto    = (w_mem)&&( w_cis_op[0]);
 	assign	w_div    = (!iword[`CISBIT])&&(w_op[4:1] == 4'h7);

ParseResult:
DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: EQ
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: w_cis_op
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 4
                            HdlValueInt: 0
            HdlValueInt: 02
    HdlValueId: w_add


CommitId: c20ffe060413d056fdb5973a92a63efe4e58ca7b
Verilator lint updates: ffetch and f_idecode
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -272,7 +243,6 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 	// w_dcd[17:14] -- (5+i0+i1) = 3 LUTs, 1 delay
 	// w_dcd[22:18] : 5 LUTs, 1 delay (assuming high bit is o/w determined)
 	wire	[22:0]	w_I, w_fullI;
-	wire		w_Iz;
 
 	assign	w_fullI = (w_ldi) ? { iword[22:0] } // LDI
 			// MOVE immediates have one less bit

ParseResult:
DEL HdlIdDef@@w_Iz from objs
HdlIdDef: w_Iz
    HdlDirection: INTERNAL


CommitId: c20ffe060413d056fdb5973a92a63efe4e58ca7b
Verilator lint updates: ffetch and f_idecode
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -302,41 +272,38 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 
 	end endgenerate
 
-	assign	w_Iz = (w_I == 0);
-
-
 	initial	o_illegal = 1'b0;
 	always @(*)
 	begin
-		o_illegal <= 1'b0;
+		o_illegal = 1'b0;
 		if ((!OPT_CIS)&&(i_instruction[`CISBIT]))
-			o_illegal <= 1'b1;
+			o_illegal = 1'b1;
 		if ((!OPT_MPY)&&(w_mpy))
-			o_illegal <= 1'b1;
+			o_illegal = 1'b1;
 
 		if ((!OPT_DIVIDE)&&(w_div))
-			o_illegal <= 1'b1;
+			o_illegal = 1'b1;
 		else if ((OPT_DIVIDE)&&(w_div)&&(w_dcdR[3:1]==3'h7))
-			o_illegal <= 1'b1;
+			o_illegal = 1'b1;
 
 
 		if ((!OPT_FPU)&&(w_fpu))
-			o_illegal <= 1'b1;
+			o_illegal = 1'b1;
 
 		if ((!OPT_SIM)&&(w_sim))
 			// Simulation instructions on real hardware should
 			// always cause an illegal instruction error
-			o_illegal <= 1'b1;
+			o_illegal = 1'b1;
 
 		// There are two (missing) special instructions
 		// These should cause an illegal instruction error
 		if ((w_dcdR[3:1]==3'h7)&&(w_cis_op[4:1]==4'b1101))
-			o_illegal <= 1'b1;
+			o_illegal = 1'b1;
 
 		// If the lock function isn't implemented, this should
 		// also cause an illegal instruction error
 		if ((!OPT_LOCK)&&(w_lock))
-			o_illegal <= 1'b1;
+			o_illegal = 1'b1;
 	end
 
 	generate if (OPT_OPIPE)
ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS HdlOp@@ASSIGN to body
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN
            INS HdlValueId@@o_illegal to ops

UPD HdlStmIf@@ to 
    INS HdlOp@@ASSIGN to 
    UPD HdlOp@@ASSIGN to ASSIGN
        INS list@@ops to ASSIGN
        INS HdlValueId@@o_illegal to ops

UPD HdlStmIf@@ to 
    INS HdlOp@@ASSIGN to 
    UPD HdlOp@@ASSIGN to ASSIGN
        INS list@@ops to ASSIGN
        INS HdlValueId@@o_illegal to ops

UPD HdlStmAssign@@ to 
    MOV HdlValueInt@@0 to 
    HdlValueInt: 0
    DEL HdlValueId@@o_illegal from 

UPD HdlStmAssign@@if_true to if_true
    MOV HdlValueInt@@1 to if_true
    HdlValueInt: 1
    DEL HdlValueId@@o_illegal from if_true

UPD HdlStmAssign@@if_true to if_true
    MOV HdlValueInt@@1 to if_true
    HdlValueInt: 1
    DEL HdlValueId@@o_illegal from if_true

UPD HdlStmAssign@@if_true to if_true
    MOV HdlValueInt@@1 to if_true
    HdlValueInt: 1
    DEL HdlValueId@@o_illegal from if_true

UPD HdlStmAssign@@if_true to if_true
    MOV HdlValueInt@@1 to if_true
    HdlValueInt: 1
    DEL HdlValueId@@o_illegal from if_true

UPD HdlStmAssign@@if_true to if_true
    MOV HdlValueInt@@1 to if_true
    HdlValueInt: 1
    DEL HdlValueId@@o_illegal from if_true

UPD HdlStmAssign@@if_true to if_true
    MOV HdlValueInt@@1 to if_true
    HdlValueInt: 1
    DEL HdlValueId@@o_illegal from if_true

UPD HdlStmAssign@@if_true to if_true
    MOV HdlValueInt@@1 to if_true
    HdlValueInt: 1
    DEL HdlValueId@@o_illegal from if_true

UPD HdlStmAssign@@ to 
    MOV HdlValueInt@@1 to 
    HdlValueInt: 1
    DEL HdlValueId@@o_illegal from 

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: EQ
        list: ops
            HdlValueId: w_I
            HdlValueInt: 0
    HdlValueId: w_Iz

DEL HdlStmAssign@@ from body

DEL HdlStmAssign@@if_true from 

DEL HdlStmAssign@@if_true from 

DEL HdlStmAssign@@if_true from 

DEL HdlStmAssign@@ from 

DEL HdlStmAssign@@if_true from 

DEL HdlStmAssign@@if_true from 

DEL HdlStmAssign@@if_true from 

DEL HdlStmAssign@@if_true from 


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_rxgears.v
+++ b/rtl/zipdma/zipdma_rxgears.v
@@ -91,8 +91,6 @@ module	zipdma_rxgears #(
 	always @(*)
 	begin
 		next_fill = fill;
-		if (S_VALID && S_READY)
-			next_fill = next_fill + S_BYTES;
 		if (M_VALID && M_READY)
 		begin
 			if (M_LAST)

ParseResult:
MOV HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlValueId: S_VALID
            HdlValueId: S_READY
    HdlOp: ASSIGN
        list: ops
            HdlValueId: next_fill
            HdlOp: ADD
                list: ops
                    HdlValueId: next_fill
                    HdlValueId: S_BYTES
    list: elifs


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_rxgears.v
+++ b/rtl/zipdma/zipdma_rxgears.v
@@ -151,8 +152,17 @@ module	zipdma_rxgears #(
 	if (i_reset || i_soft_reset)
 		m_valid <= 0;
 	else if (!M_VALID || M_READY)
-		m_valid <= r_last || (|next_fill[WBLSB+1:WBLSB]);
-				// was r_last || next_fill >= DW/8);
+		m_valid <= r_last || (S_VALID && S_READY && S_LAST)
+			|| (|next_fill[WBLSB+1:WBLSB]);
+`ifdef	FORMAL
+	always @(*)
+	if (fill >= (DW/8) || r_last || m_last)
+		assert(m_valid);
+
+	always @(*)
+	if (m_last)
+		assert(m_bytes == fill);
+`endif
 	// }}}
 
 	// m_bytes
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: S_VALID
                            HdlValueId: S_READY
                    HdlValueId: S_LAST

UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlValueId@@r_last to ops
        HdlValueId: r_last


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -91,9 +92,11 @@ module	zipbones #(
 		parameter	RESET_DURATION = 10,
 		// Short-cut names
 		// {{{
+		// localparam	AW=ADDRESS_WIDTH,
+		localparam	DBG_WIDTH=32,	// Debug bus data width
 		localparam	// Derived parameters
 				// PHYSICAL_ADDRESS_WIDTH=ADDRESS_WIDTH,
-				PAW=ADDRESS_WIDTH-2,
+				PAW=ADDRESS_WIDTH-$clog2(BUS_WIDTH/8),
 `ifdef	OPT_MMU
 				// VIRTUAL_ADDRESS_WIDTH=30,
 `else

ParseResult:
MOV HdlIdDef@@PAW to params
HdlIdDef: PAW
    HdlOp: SUB
        list: ops
            HdlValueId: ADDRESS_WIDTH
            HdlValueInt: 2
    HdlDirection: INTERNAL

UPD HdlIdDef@@PAW to PAW
    UPD HdlOp@@SUB to SUB
        INS HdlOp@@CALL to ops
        UPD HdlOp@@CALL to CALL
            INS list@@ops to CALL
            INS HdlValueId@@$clog2 to ops
            INS HdlOp@@DIV to ops
            UPD HdlOp@@DIV to DIV
                INS list@@ops to DIV
                INS HdlValueId@@BUS_WIDTH to ops

UPD HdlIdDef@@PAW to PAW
    UPD HdlOp@@SUB to SUB
        UPD HdlValueInt@@2 to 8
        MOV HdlValueInt@@2 to ops
        HdlValueInt: 2


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -102,9 +105,6 @@ module	zipbones #(
 				// LGTLBSZ = 6,
 				// VAW=VIRTUAL_ADDRESS_WIDTH,
 
-		// localparam	AW=ADDRESS_WIDTH,
-		parameter	BUS_WIDTH=32,	// Bus data width
-		localparam	DBG_WIDTH=32,	// Debug bus data width
 		// }}}
 		// Debug bit allocations
 		// {{{

ParseResult:
MOV HdlIdDef@@BUS_WIDTH to params
HdlIdDef: BUS_WIDTH
    HdlValueInt: 32
    HdlDirection: INTERNAL


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -131,45 +131,49 @@ module	zipbones #(
 		input	wire		i_clk, i_reset,
 		// Wishbone master interface from the CPU
 		// {{{
-		output	wire		o_wb_cyc, o_wb_stb, o_wb_we,
-		output wire [(PAW-1):0]	o_wb_addr,
+		output	wire			o_wb_cyc, o_wb_stb, o_wb_we,
+		output	wire [PAW-1:0]		o_wb_addr,
 		output	wire [BUS_WIDTH-1:0]	o_wb_data,
 		output	wire [BUS_WIDTH/8-1:0]	o_wb_sel,
-		input	wire		i_wb_stall, i_wb_ack,
+		input	wire			i_wb_stall, i_wb_ack,
 		input	wire [BUS_WIDTH-1:0]	i_wb_data,
-		input	wire		i_wb_err,
+		input	wire			i_wb_err,
 		// }}}
 		// Incoming interrupts
-		input	wire		i_ext_int,
+		input	wire			i_ext_int,
 		// Our one outgoing interrupt
-		output	wire		o_ext_int,
+		output	wire			o_ext_int,
 		// Wishbone slave interface for debugging purposes
 		// {{{
-		input	wire		i_dbg_cyc, i_dbg_stb, i_dbg_we,
-		input	wire	[5:0]	i_dbg_addr,
+		input	wire			i_dbg_cyc, i_dbg_stb, i_dbg_we,
+		input	wire	[5:0]		i_dbg_addr,
 		input	wire [DBG_WIDTH-1:0]	i_dbg_data,
 		input	wire [DBG_WIDTH/8-1:0]	i_dbg_sel,
-		output	wire		o_dbg_stall,
-		output	wire		o_dbg_ack,
+		output	wire			o_dbg_stall,
+		output	wire			o_dbg_ack,
 		output	wire [DBG_WIDTH-1:0]	o_dbg_data,
 		// }}}
-		output	wire	[31:0]	o_cpu_debug,
+		output	wire	[31:0]		o_cpu_debug,
 		//
-		output	wire		o_prof_stb,
+		output	wire			o_prof_stb,
 		output wire [ADDRESS_WIDTH-1:0]	o_prof_addr,
-		output	wire	[31:0]	o_prof_ticks
+		output	wire	[31:0]		o_prof_ticks
 		// }}}
 	);
 
 	// Declarations
 	// {{{
-	wire			cpu_clken, cpu_clock, clk_gate;
+	localparam	[0:0]	DBG_ADDR_CPU = 1'b0,
+				DBG_ADDR_CTRL= 1'b1;
+
+	wire			cpu_clken;
 	wire			dbg_cyc, dbg_stb, dbg_we, dbg_stall;
 	wire	[5:0]		dbg_addr;
 	wire	[DBG_WIDTH-1:0]	dbg_idata;
+	wire [DBG_WIDTH/8-1:0]	dbg_sel;
 	reg	[DBG_WIDTH-1:0]	dbg_odata;
 	reg			dbg_ack;
-	wire			cpu_break, dbg_cmd_write;
+	wire			cpu_break, dbg_cmd_write, dbg_cpu_write;
 	wire			reset_hold;
 	reg			cmd_reset, cmd_halt, cmd_step, cmd_clear_cache,
 				cmd_write;

ParseResult:
INS HdlIdDef@@DBG_ADDR_CPU to objs
HdlIdDef: DBG_ADDR_CPU
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@DBG_ADDR_CTRL to objs
HdlIdDef: DBG_ADDR_CTRL
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL

INS HdlIdDef@@dbg_sel to objs
HdlIdDef: dbg_sel
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DBG_WIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@dbg_cpu_write to objs
HdlIdDef: dbg_cpu_write
    HdlDirection: INTERNAL

DEL HdlIdDef@@cpu_clock from objs
HdlIdDef: cpu_clock
    HdlDirection: INTERNAL

DEL HdlIdDef@@clk_gate from objs
HdlIdDef: clk_gate
    HdlDirection: INTERNAL


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -181,6 +185,9 @@ module	zipbones #(
 				cpu_op_stall, cpu_pf_stall, cpu_i_count;
 	wire	[DBG_WIDTH-1:0]	cpu_dbg_data;
 	wire	[DBG_WIDTH-1:0]	cpu_status;
+
+	wire	[DBG_WIDTH-1:0]	dbg_cmd_data;
+	wire [DBG_WIDTH/8-1:0]	dbg_cmd_strb;
 	reg			dbg_pre_addr, dbg_pre_ack;
 	reg	[DBG_WIDTH-1:0]	dbg_cpu_status;
 	// }}}

ParseResult:
INS HdlIdDef@@dbg_cmd_data to objs
HdlIdDef: dbg_cmd_data
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DBG_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@dbg_cmd_strb to objs
HdlIdDef: dbg_cmd_strb
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DBG_WIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -216,11 +224,15 @@ module	zipbones #(
 	// two accesses: write the address to the control register (and halt
 	// the CPU if not halted), then read/write the data from the data
 	// register.
-	//
-	assign	dbg_cmd_write = (dbg_stb)&&(dbg_we)&&(dbg_addr[5]);
+
+	assign	dbg_cpu_write = (dbg_stb && dbg_we) && (dbg_addr[5] == DBG_ADDR_CPU);
+	assign	dbg_cmd_write = (dbg_stb)&&(dbg_we)
+					&&(dbg_addr[5] == DBG_ADDR_CTRL);
+	assign	dbg_cmd_data = dbg_idata;
+	assign	dbg_cmd_strb = dbg_sel;
 
 	//
-	// Always start us off with an initial reset
+	// reset_hold: Always start us off with an initial reset
 	// {{{
 	generate if (RESET_DURATION > 0)
 	begin : INITIAL_RESET_HOLD

ParseResult:
INS HdlStmAssign@@ to objs

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: dbg_idata
    HdlValueId: dbg_cmd_data

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: dbg_sel
    HdlValueId: dbg_cmd_strb

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@dbg_cmd_write to dbg_cpu_write
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_addr
                HdlValueInt: 5

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    INS HdlValueId@@dbg_cmd_write to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        UPD HdlOp@@EQ to EQ
            INS HdlValueId@@DBG_ADDR_CTRL to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@EQ to ops
        UPD HdlOp@@EQ to EQ
            INS list@@ops to EQ
            INS HdlValueId@@DBG_ADDR_CPU to ops


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -299,12 +313,12 @@ module	zipbones #(
 
 		// 2. Halt on any user request to halt.  (Only valid if the
 		//	STEP bit isn't also set)
-		if (dbg_cmd_write && dbg_idata[HALT_BIT]
-						&& !dbg_idata[STEP_BIT])
+		if (dbg_cmd_write && dbg_cmd_strb[1] && dbg_cmd_data[HALT_BIT]
+				&& !dbg_cmd_data[STEP_BIT])
 			cmd_halt <= 1'b1;
 
 		// 3. Halt on any user request to write to a CPU register
-		if (i_dbg_stb && dbg_we && !dbg_addr[5])
+		if (dbg_cpu_write && dbg_cmd_strb != 0)
 			cmd_halt <= 1'b1;
 
 		// 4. Halt following any step command

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@dbg_we to dbg_cpu_write
            MOV HdlValueId@@dbg_we to ops
            HdlValueId: dbg_we
            DEL HdlValueId@@i_dbg_stb from ops
            DEL list@@ops from AND_LOG
        UPD HdlOp@@NEG_LOG to NE
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlOp@@INDEX to INDEX
                MOV list@@ops to INDEX
                list: ops
                    HdlValueId: dbg_addr
                    HdlValueInt: 5
                UPD HdlValueId@@dbg_addr to dbg_cmd_strb
                UPD HdlValueInt@@5 to 0
            DEL HdlOp@@INDEX from ops
            DEL list@@ops from NEG_LOG
        DEL HdlOp@@AND_LOG from ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            INS HdlOp@@AND_LOG to ops
            UPD HdlOp@@AND_LOG to AND_LOG
                INS list@@ops to AND_LOG
                INS HdlOp@@INDEX to ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_cmd_strb
                        HdlValueInt: 1


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -316,7 +330,7 @@ module	zipbones #(
 			cmd_halt <= 1'b1;
 
 		// 5. Halt on any clear cache bit--independent of any step bit
-		if (dbg_cmd_write && dbg_idata[CLEAR_CACHE_BIT])
+		if (dbg_cmd_write && dbg_cmd_strb[1] && dbg_cmd_data[CLEAR_CACHE_BIT])
 			cmd_halt <= 1'b1;
 		// }}}
 	end

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: dbg_cmd_write
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_idata
                            HdlValueId: CLEAR_CACHE_BIT
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_idata
                    HdlValueId: HALT_BIT
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@dbg_idata to dbg_cmd_data
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@dbg_idata to dbg_cmd_data


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -328,8 +342,8 @@ module	zipbones #(
 	always @(posedge i_clk)
 	if (i_reset || cpu_reset)
 		cmd_clear_cache <= 1'b0;
-	else if (dbg_cmd_write && dbg_idata[CLEAR_CACHE_BIT]
-			&& dbg_idata[HALT_BIT])
+	else if (dbg_cmd_write && dbg_cmd_data[CLEAR_CACHE_BIT]
+			&& dbg_cmd_data[HALT_BIT] && dbg_cmd_strb[1])
 		cmd_clear_cache <= 1'b1;
 	else if (cmd_halt && !cpu_dbg_stall)
 		cmd_clear_cache <= 1'b0;

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: dbg_cmd_write
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_idata
                    HdlValueId: STEP_BIT
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@dbg_idata to dbg_cmd_data

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_strb
                    HdlValueInt: 1


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -341,7 +355,7 @@ module	zipbones #(
 	always @(posedge i_clk)
 	if (i_reset)
 		cmd_step <= 1'b0;
-	else if (dbg_cmd_write && dbg_idata[STEP_BIT])
+	else if (dbg_cmd_write && dbg_cmd_data[STEP_BIT] && dbg_cmd_strb[1])
 		cmd_step <= 1'b1;
 	else if (!cpu_dbg_stall)
 		cmd_step <= 1'b0;

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 1


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -360,10 +374,11 @@ module	zipbones #(
 	//	0x0_2000 -> cc.gie
 	//	0x0_1000 -> cc.sleep
 	//	0x0_0800 -> cmd_clear_cache	(auto clearing)
-	//	0x0_0400 -> cmd_halt
-	//	0x0_0200 -> cmd_stall
+	//	0x0_0400 -> cmd_halt (HALT request)
+	//	0x0_0200 -> [CPU is halted]
 	//	0x0_0100 -> cmd_step	(auto clearing)
-	//	0x0_0080 -> PIC interrrupt pending
+	//
+	//	0x0_0080 -> External interrupt is high
 	//	0x0_0040 -> reset	(auto clearing)
 	//	0x0_003f -> [UNUSED -- was cmd_addr mask]
 	assign	cpu_status = { 7'h00, 8'h00, i_ext_int,

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 1


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -377,16 +392,14 @@ module	zipbones #(
 	always @(posedge i_clk)
 	if (i_reset || cpu_reset)
 		cmd_write <= 1'b0;
-	else if (!cmd_write || (!cpu_dbg_stall && clk_gate))
-		cmd_write <= dbg_stb && dbg_we && (|i_dbg_sel)
-			&& !dbg_addr[5];
+	else if (!cmd_write || !cpu_dbg_stall)
+		cmd_write <= (dbg_cpu_write && dbg_cmd_strb != 0);
 	// }}}
 
 	// cmd_waddr, cmd_wdata
 	// {{{
 	always @(posedge i_clk)
-	if ((!cmd_write || (!cpu_dbg_stall && clk_gate))
-			&&(dbg_stb && dbg_we && !dbg_addr[5]))
+	if ((!cmd_write || (!cpu_dbg_stall)) && dbg_cpu_write)
 	begin
 		cmd_waddr <= dbg_addr[4:0];
 		cmd_wdata <= dbg_idata;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to AND_LOG
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: cmd_write
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: cpu_dbg_stall
                        HdlValueId: clk_gate
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: dbg_stb
                    HdlValueId: dbg_we
            DEL HdlOp@@NEG_LOG from ops
            HdlOp: NEG_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_addr
                            HdlValueInt: 5
            DEL list@@ops from AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@AND_LOG to OR_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlValueId@@clk_gate to dbg_cpu_write
                MOV HdlValueId@@clk_gate to ops
                HdlValueId: clk_gate
            MOV HdlOp@@NEG_LOG to ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: cmd_write
        DEL HdlOp@@AND_LOG from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from body


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -398,7 +411,12 @@ module	zipbones #(
 	//
 	// The CPU itself
 	// {{{
+	////////////////////////////////////////////////////////////////////////
+	//
+	//
+	assign	cpu_clken = cmd_write || dbg_stb && !dbg_addr[5];
 `ifdef	FORMAL
+	// {{{
 	(* anyseq *)	reg	f_cpu_halted, f_cpu_data, f_cpu_stall,
 				f_cpu_break;
 	(* anyseq *) reg [2:0]	f_cpu_dbg_cc;

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@NE to ops
        HdlOp: NE
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 0


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -501,7 +521,6 @@ module	zipbones #(
 	////////////////////////////////////////////////////////////////////////
 	//
 	//
-	// assign	dbg_odata = (dbg_addr[5])?cpu_status :cpu_dbg_data;
 
 	always @(posedge i_clk)
 		dbg_pre_addr <= dbg_addr[5];

ParseResult:
UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_CLKGATE from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL list@@elifs from 
    DEL HdlStmBlock@@SEQ from 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueId: i_clk
                HdlValueId: cpu_clock
            HdlStmAssign
                HdlValueInt: 1
                HdlValueId: clk_gate

DEL HdlStmIf@@ from objs


CommitId: 3585593cc90e7edca4b8b3469abebe3c7369bb31
Fixed the formal only wires in wbdblpriarb
--- a/rtl/ex/wbdblpriarb.v
+++ b/rtl/ex/wbdblpriarb.v
@@ -131,6 +131,7 @@ module	wbdblpriarb(i_clk, i_reset,
 	output	wire	[(DW-1):0]	o_dat;
 	output	wire	[(DW/8-1):0]	o_sel;
 	input	wire			i_ack, i_stall, i_err;
+`ifdef	FORMAL
 	output	wire	[(F_LGDEPTH-1):0]
 			f_nreqs_a, f_nacks_a, f_outstanding_a,
 			f_nreqs_b, f_nacks_b, f_outstanding_b,

ParseResult:
DEL HdlIdDef@@f_a_outstanding_b from ports
HdlIdDef: f_a_outstanding_b
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@f_b_nreqs_a from ports
HdlIdDef: f_b_nreqs_a
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@f_b_nacks_a from ports
HdlIdDef: f_b_nacks_a
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@f_b_outstanding_a from ports
HdlIdDef: f_b_outstanding_a
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@f_b_nreqs_b from ports
HdlIdDef: f_b_nreqs_b
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@f_b_nacks_b from ports
HdlIdDef: f_b_nacks_b
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@f_b_outstanding_b from ports
HdlIdDef: f_b_outstanding_b
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: F_LGDEPTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -153,17 +143,15 @@ module	zipbones #(
 		input	wire [DW/8-1:0]	i_dbg_sel,
 		output	wire		o_dbg_stall,
 		output	wire		o_dbg_ack,
-		output	wire [DW-1:0]	o_dbg_data
+		output	wire [DW-1:0]	o_dbg_data,
 		// }}}
-`ifdef	DEBUG_SCOPE
-		, output wire	[31:0]	o_cpu_debug
-`endif
+		output wire	[31:0]	o_cpu_debug
 		// }}}
 	);
 
 	// Declarations
 	// {{{
-	wire		cpu_clken;
+	wire		cpu_clken, cpu_clock, clk_gate;
 	wire		dbg_cyc, dbg_stb, dbg_we, dbg_stall;
 	wire	[5:0]	dbg_addr;
 	wire	[31:0]	dbg_idata;

ParseResult:
INS HdlIdDef@@cpu_clock to objs
HdlIdDef: cpu_clock
    HdlDirection: INTERNAL

INS HdlIdDef@@clk_gate to objs
HdlIdDef: clk_gate
    HdlDirection: INTERNAL

INS HdlIdDef@@o_cpu_debug to ports
HdlIdDef: o_cpu_debug
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: OUT


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axilfetch.v
+++ b/rtl/core/axilfetch.v
@@ -41,9 +41,9 @@ module	axilfetch #(
 		// {{{
 		parameter	C_AXI_ADDR_WIDTH = 32,
 		parameter	C_AXI_DATA_WIDTH = 64,
-		parameter	DATA_WIDTH=32,
+		parameter	INSN_WIDTH=32,
 		parameter	FETCH_LIMIT=16,
-		parameter [0:0]	SWAP_ENDIANNESS = 1'b1,
+		parameter [0:0]	SWAP_ENDIANNESS = 1'b0,
 		localparam	AW=C_AXI_ADDR_WIDTH
 		// }}}
 	) (

ParseResult:
UPD HdlIdDef@@DATA_WIDTH to INSN_WIDTH

UPD HdlIdDef@@SWAP_ENDIANNESS to SWAP_ENDIANNESS
    UPD HdlValueInt@@1 to 0


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axilfetch.v
+++ b/rtl/core/axilfetch.v
@@ -58,7 +58,7 @@ module	axilfetch #(
 		input	wire			i_clear_cache,
 		input	wire			i_ready,
 		input	wire	[AW-1:0]	i_pc,	// Ignd unls i_new_pc
-		output	wire [DATA_WIDTH-1:0]	o_insn,	// Insn read from bus
+		output	wire [INSN_WIDTH-1:0]	o_insn,	// Insn read from bus
 		output	reg	[AW-1:0]	o_pc,	// Addr of that insn
 		output	reg			o_valid,	// If valid
 		output	reg			o_illegal,	// Bus error

ParseResult:
UPD HdlIdDef@@o_insn to o_insn
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@DATA_WIDTH to INSN_WIDTH


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axilfetch.v
+++ b/rtl/core/axilfetch.v
@@ -81,7 +81,8 @@ module	axilfetch #(
 	// Declarations
 	// {{{
 	localparam	AXILLSB = $clog2(C_AXI_DATA_WIDTH/8);
-	localparam	INSNS_PER_WORD = C_AXI_DATA_WIDTH / DATA_WIDTH;
+	localparam	INSNS_PER_WORD = C_AXI_DATA_WIDTH / INSN_WIDTH;
+	localparam	INSN_LSB = $clog2(INSN_WIDTH/8);
 	localparam	LGDEPTH = $clog2(FETCH_LIMIT)+4;
 	localparam	LGFIFO = $clog2(FETCH_LIMIT);
 	localparam	W = LGDEPTH;

ParseResult:
INS HdlIdDef@@INSNS_PER_WORD to objs
HdlIdDef: INSNS_PER_WORD
    HdlOp: DIV
        list: ops
            HdlValueId: C_AXI_DATA_WIDTH
            HdlValueId: INSN_WIDTH
    HdlDirection: INTERNAL

INS HdlIdDef@@INSN_LSB to objs
HdlIdDef: INSN_LSB
    HdlOp: CALL
        list: ops
            HdlValueId: $clog2
            HdlOp: DIV
                list: ops
                    HdlValueId: INSN_WIDTH
                    HdlValueInt: 8
    HdlDirection: INTERNAL

DEL HdlIdDef@@INSNS_PER_WORD from objs
HdlIdDef: INSNS_PER_WORD
    HdlOp: DIV
        list: ops
            HdlValueId: C_AXI_DATA_WIDTH
            HdlValueId: DATA_WIDTH
    HdlDirection: INTERNAL


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axilfetch.v
+++ b/rtl/core/axilfetch.v
@@ -92,7 +93,7 @@ module	axilfetch #(
 	reg	[W:0]			new_flushcount, outstanding,
 					next_outstanding, flushcount;
 	reg				flushing, flush_request, full_bus;
-	reg	[((AXILLSB>2)?(AXILLSB-3):0):0]	shift;
+	reg	[((AXILLSB>INSN_LSB) ? (AXILLSB-INSN_LSB-1):0):0]	shift;
 	wire				fifo_reset, fifo_wr, fifo_rd;
 	wire				ign_fifo_full, fifo_empty;
 	wire	[LGFIFO:0]		ign_fifo_fill;

ParseResult:
INS HdlIdDef@@shift to objs
HdlIdDef: shift
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: TERNARY
                        list: ops
                            HdlOp: GT
                                list: ops
                                    HdlValueId: AXILLSB
                                    HdlValueId: INSN_LSB
                            HdlOp: SUB
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AXILLSB
                                            HdlValueId: INSN_LSB
                                    HdlValueInt: 1
                            HdlValueInt: 0
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@shift from objs
HdlIdDef: shift
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: TERNARY
                        list: ops
                            HdlOp: GT
                                list: ops
                                    HdlValueId: AXILLSB
                                    HdlValueInt: 2
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: AXILLSB
                                    HdlValueInt: 3
                            HdlValueInt: 0
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axilfetch.v
+++ b/rtl/core/axilfetch.v
@@ -272,21 +273,16 @@ module	axilfetch #(
 		o_pc <= i_pc;
 	else if (o_valid && i_ready && !o_illegal)
 	begin
-		o_pc[AW-1:2] <= o_pc[AW-1:2] + 1;
-		o_pc[1:0] <= 2'b00;
+		o_pc <= 0;
+		o_pc[AW-1:INSN_LSB] <= o_pc[AW-1:INSN_LSB] + 1;
 	end
 	// }}}
 
-	generate if (AXILLSB > 2)
+	generate if (AXILLSB > INSN_LSB)
 	begin : BIG_WORD
 		// {{{
 		always @(*)
-		begin
-			shift = o_pc[AXILLSB-1:2];
-
-			if (FETCH_LIMIT > 0 && o_valid)
-				shift = 0;
-		end
+			shift = o_pc[AXILLSB-1:INSN_LSB];
 		// }}}
 	end else begin : NO_SHIFT
 		// {{{

ParseResult:
UPD HdlStmProcess@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: shift
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: o_pc
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AXILLSB
                                            HdlValueInt: 1
                                    HdlValueInt: 2
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: GT
                            list: ops
                                HdlValueId: FETCH_LIMIT
                                HdlValueInt: 0
                        HdlValueId: o_valid
                HdlOp: ASSIGN
                    list: ops
                        HdlValueId: shift
                        HdlValueInt: 0
                list: elifs
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: shift
                HdlOp: INDEX
                    list: ops
                        HdlValueId: o_pc
                        HdlOp: DOWNTO
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlValueId: AXILLSB
                                        HdlValueInt: 1
                                HdlValueInt: 2
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    DEL HdlValueInt@@2 from ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@GT to GT
        INS HdlValueId@@INSN_LSB to ops

MOV HdlStmProcess@@ to body
HdlStmProcess
    list: sensitivity
        HdlAll
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: shift
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: o_pc
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AXILLSB
                                            HdlValueInt: 1
                                    HdlValueInt: 2
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: GT
                            list: ops
                                HdlValueId: FETCH_LIMIT
                                HdlValueInt: 0
                        HdlValueId: o_valid
                HdlOp: ASSIGN
                    list: ops
                        HdlValueId: shift
                        HdlValueInt: 0
                list: elifs

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: o_pc

UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                INS HdlValueId@@INSN_LSB to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            INS HdlValueId@@INSN_LSB to ops
    UPD HdlOp@@ADD to ADD
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                INS HdlValueId@@INSN_LSB to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@ADD to ADD
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                DEL HdlValueInt@@2 from ops
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            DEL HdlValueInt@@2 from ops

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 00
    HdlOp: INDEX
        list: ops
            HdlValueId: o_pc
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0

UPD HdlStmIf@@ to 
    UPD HdlOp@@GT to GT
        DEL HdlValueInt@@2 from ops
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

DEL HdlStmIf@@ from body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlOp: GT
                list: ops
                    HdlValueId: FETCH_LIMIT
                    HdlValueInt: 0
            HdlValueId: o_valid
    HdlOp: ASSIGN
        list: ops
            HdlValueId: shift
            HdlValueInt: 0
    list: elifs


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axilfetch.v
+++ b/rtl/core/axilfetch.v
@@ -300,11 +296,12 @@ module	axilfetch #(
 		// {{{
 		genvar	gw, gb;	// Word count, byte count
 
-		for(gw=0; gw<C_AXI_DATA_WIDTH/32; gw=gw+1) // For each bus word
-		for(gb=0; gb<4; gb=gb+1) // For each bus byte
+		for(gw=0; gw<C_AXI_DATA_WIDTH/INSN_WIDTH; gw=gw+1) // For each bus word
+		for(gb=0; gb<(INSN_WIDTH/8); gb=gb+1) // For each bus byte
 		always @(*)
-			endian_swapped_rdata[gw*32+(3-gb)*8 +: 8]
-				= M_AXI_RDATA[gw*32+gb*8 +: 8];
+			endian_swapped_rdata[gw*INSN_WIDTH
+					+ ((INSN_WIDTH/8)-1-gb)*8 +: 8]
+				= M_AXI_RDATA[gw*INSN_WIDTH+gb*8 +: 8];
 		// }}}
 	end else begin : NO_ENDIAN_SWAP
 		// {{{

ParseResult:
UPD HdlStmFor@@body to body
    UPD HdlOp@@LT to LT
        INS HdlOp@@DIV to ops
        UPD HdlOp@@DIV to DIV
            INS list@@ops to DIV
            INS HdlValueId@@INSN_WIDTH to ops

UPD HdlStmFor@@ to 
    UPD HdlOp@@LT to LT
        UPD HdlOp@@DIV to DIV
            INS HdlValueId@@INSN_WIDTH to ops

UPD HdlStmFor@@body to body
    UPD HdlOp@@LT to LT
        UPD HdlValueInt@@4 to 8
        MOV HdlValueInt@@4 to ops
        HdlValueInt: 4

UPD HdlStmProcess@@body to body
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@PART_SELECT_POST to PART_SELECT_POST
                UPD HdlOp@@ADD to ADD
                    UPD HdlOp@@MUL to MUL
                        INS HdlValueId@@INSN_WIDTH to ops
                    UPD HdlOp@@MUL to MUL
                        UPD HdlOp@@SUB to SUB
                            INS HdlOp@@SUB to ops
                            UPD HdlOp@@SUB to SUB
                                INS list@@ops to SUB
                                INS HdlOp@@DIV to ops
                                INS HdlValueInt@@1 to ops
                                UPD HdlOp@@DIV to DIV
                                    INS list@@ops to DIV
                                    INS HdlValueId@@INSN_WIDTH to ops
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@PART_SELECT_POST to PART_SELECT_POST
                UPD HdlOp@@ADD to ADD
                    UPD HdlOp@@MUL to MUL
                        INS HdlValueId@@INSN_WIDTH to ops

UPD HdlStmProcess@@body to body
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@PART_SELECT_POST to PART_SELECT_POST
                UPD HdlOp@@ADD to ADD
                    UPD HdlOp@@MUL to MUL
                        UPD HdlOp@@SUB to SUB
                            UPD HdlValueInt@@3 to 8
                            MOV HdlValueInt@@3 to ops
                            HdlValueInt: 3
                    UPD HdlOp@@MUL to MUL
                        DEL HdlValueInt@@32 from ops
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@PART_SELECT_POST to PART_SELECT_POST
                UPD HdlOp@@ADD to ADD
                    UPD HdlOp@@MUL to MUL
                        DEL HdlValueInt@@32 from ops

UPD HdlStmFor@@ to 
    UPD HdlOp@@LT to LT
        UPD HdlOp@@DIV to DIV
            DEL HdlValueInt@@32 from ops


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axilfetch.v
+++ b/rtl/core/axilfetch.v
@@ -391,15 +395,26 @@ module	axilfetch #(
 
 	// out_fill
 	// {{{
+	// == number of instructions in the fifo_data word that have not (yet)
+	//	been accepted by the CPU.
+	// == 0 when no data is available
+	// == INSN_PER_WORD on the first instruction of any word
+	// == 1 on the last instruction of any word
 	initial	out_fill = 0;
 	always @(posedge S_AXI_ACLK)
 	if (fifo_reset)
 		out_fill <= 0;
 	else if (fifo_rd)
-		// Verilator lint_off WIDTH
-		out_fill <= (fifo_empty) ? 0: (INSNS_PER_WORD - shift);
-		// Verilator lint_on  WIDTH
-	else if (i_ready && out_fill > 0)
+	begin
+		if (fifo_empty)
+			out_fill <= 0;
+		else if (o_valid)
+			out_fill <= INSNS_PER_WORD;
+		else
+			// Verilator lint_off WIDTH
+			out_fill <= (INSNS_PER_WORD - shift);
+			// Verilator lint_on  WIDTH
+	end else if (i_ready && out_fill > 0)
 		out_fill <= out_fill - 1;
 	// }}}
 

ParseResult:
INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    MOV list@@elifs to body
    list: elifs
        tuple
            HdlValueId: i_ready
            HdlStmAssign
                HdlOp: SRL
                    list: ops
                        HdlValueId: out_data
                        HdlValueId: DATA_WIDTH
                HdlValueId: out_data
    UPD HdlValueId@@fifo_rd to fifo_data
    MOV HdlValueId@@fifo_rd to body
    HdlValueId: fifo_rd

UPD HdlStmIf@@body to body
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@body to 

MOV HdlStmIf@@body to 
HdlStmIf: body
    HdlValueId: fifo_rd
    HdlStmAssign: if_true
        HdlOp: SRL
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: fifo_data
                        HdlOp: DOWNTO
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlValueId: C_AXI_DATA_WIDTH
                                        HdlValueInt: 1
                                HdlValueInt: 0
                HdlOp: MUL
                    list: ops
                        HdlValueId: DATA_WIDTH
                        HdlValueId: shift
        HdlValueId: out_data
    list: elifs
        tuple
            HdlValueId: i_ready
            HdlStmAssign
                HdlOp: SRL
                    list: ops
                        HdlValueId: out_data
                        HdlValueId: DATA_WIDTH
                HdlValueId: out_data

INS HdlStmIf@@ to body

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlValueId@@fifo_empty to ops
        HdlValueId: fifo_empty
        MOV HdlValueInt@@0 to ops
        HdlValueInt: 0
        MOV HdlOp@@SUB to ops
        HdlOp: SUB
            list: ops
                HdlValueId: INSNS_PER_WORD
                HdlValueId: shift
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from 

INS HdlStmAssign@@if_true to 

UPD HdlStmAssign@@ to if_false

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlValueId: fifo_empty
            HdlValueInt: 0
            HdlOp: SUB
                list: ops
                    HdlValueId: INSNS_PER_WORD
                    HdlValueId: shift
    HdlValueId: out_fill


CommitId: ddc09c805fe43122b78df079747c66fa8a14e255
ZipAXI + ZipCore can now gate clock, AXIDCACHE fix
--- a/rtl/core/axilfetch.v
+++ b/rtl/core/axilfetch.v
@@ -407,12 +422,16 @@ module	axilfetch #(
 	// {{{
 	always @(posedge S_AXI_ACLK)
 	if (fifo_rd)
-		out_data <= fifo_data[C_AXI_DATA_WIDTH-1:0]>>(DATA_WIDTH*shift);
-	else if (i_ready)
-		out_data <= out_data >> DATA_WIDTH;
+	begin
+		if (o_valid || (INSN_WIDTH == C_AXI_DATA_WIDTH))
+			out_data <= fifo_data[C_AXI_DATA_WIDTH-1:0];
+		else
+		out_data <= fifo_data[C_AXI_DATA_WIDTH-1:0]>>(INSN_WIDTH*shift);
+	end else if (i_ready)
+		out_data <= out_data >> INSN_WIDTH;
 	// }}}
 
-	assign	o_insn = out_data[DATA_WIDTH-1:0];
+	assign	o_insn = out_data[INSN_WIDTH-1:0];
 
 	// o_illegal
 	// {{{

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: out_data
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: INSN_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueId: o_insn

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    MOV list@@elifs to body
    list: elifs
        tuple
            HdlValueId: i_ready
            HdlStmAssign
                HdlOp: SRL
                    list: ops
                        HdlValueId: out_data
                        HdlValueId: DATA_WIDTH
                HdlValueId: out_data
    UPD HdlValueId@@fifo_rd to fifo_data
    MOV HdlValueId@@fifo_rd to body
    HdlValueId: fifo_rd

UPD HdlStmIf@@body to body
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@body to 

MOV HdlStmIf@@body to 
HdlStmIf: body
    HdlValueId: fifo_rd
    HdlStmAssign: if_true
        HdlOp: SRL
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: fifo_data
                        HdlOp: DOWNTO
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlValueId: C_AXI_DATA_WIDTH
                                        HdlValueInt: 1
                                HdlValueInt: 0
                HdlOp: MUL
                    list: ops
                        HdlValueId: DATA_WIDTH
                        HdlValueId: shift
        HdlValueId: out_data
    list: elifs
        tuple
            HdlValueId: i_ready
            HdlStmAssign
                HdlOp: SRL
                    list: ops
                        HdlValueId: out_data
                        HdlValueId: DATA_WIDTH
                HdlValueId: out_data

INS HdlStmAssign@@if_true to 

UPD HdlStmAssign@@if_true to if_false

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    list: elifs
        tuple
            HdlValueId: o_valid
            HdlStmAssign
                HdlValueId: INSNS_PER_WORD
                HdlValueId: out_fill

UPD HdlStmAssign@@ to 
    UPD HdlOp@@SRL to SRL
        UPD HdlValueId@@DATA_WIDTH to INSN_WIDTH

UPD HdlStmAssign@@if_true to if_true
    INS HdlValueId@@out_fill to if_true

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@SRL to SRL
        UPD HdlOp@@MUL to MUL
            UPD HdlValueId@@DATA_WIDTH to INSN_WIDTH

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: out_data
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DATA_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueId: o_insn


CommitId: d6c7cd3395aa9c723c6256610b1110b56a3628df
WSTRB alignment fix in AXIOPS and AXIPIPE
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -401,10 +401,17 @@ module	axiops #(
 	else if (!M_AXI_BREADY && !M_AXI_RREADY && (!OPT_LOWPOWER || i_stb))
 	begin
 		casez(i_op[2:1])
-		2'b0?: awsize <= 3'b010;
-		2'b10: awsize <= 3'b001;
-		2'b11: awsize <= 3'b000;
-		// default: begin end
+		2'b0?: begin
+			awsize <= 3'b010;	// Word
+			if ((|i_addr[1:0]) && !w_misaligned)
+				awsize <= AXILSB[2:0];
+			end
+		2'b10: begin
+			awsize <= 3'b001;	// Half-word
+			if (i_addr[0] && !w_misaligned)
+				awsize <= AXILSB[2:0];
+			end
+		2'b11: awsize <= 3'b000;	// Byte
 		endcase
 
 		if (SWAP_WSTRB)

ParseResult:
UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    INS HdlStmBlock@@SEQ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlValueInt: 010
    HdlValueId: awsize

INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlOp: OR_UNARY
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 1
                                    HdlValueInt: 0
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: w_misaligned
    HdlStmAssign: if_true
        HdlOp: INDEX
            list: ops
                HdlValueId: AXILSB
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 2
                        HdlValueInt: 0
        HdlValueId: awsize
    list: elifs

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlValueInt: 001
    HdlValueId: awsize

INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlValueInt: 0
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: w_misaligned
    HdlStmAssign: if_true
        HdlOp: INDEX
            list: ops
                HdlValueId: AXILSB
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 2
                        HdlValueInt: 0
        HdlValueId: awsize
    list: elifs


CommitId: 0f9210a972ad27707842ca676ff44ac81350eed8
Two formal changes, still not done.
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -438,6 +438,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	initial	o_pc = 0;
 	initial	o_dcdR = 0;
 	initial	o_dcdA = 0;
+	initial	o_dcdB = 0;
 	always @(posedge i_clk)
 		if (i_ce)
 		begin
ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: o_dcdB
                    HdlValueInt: 0
            HdlStmWait:
                list: val


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -75,14 +87,15 @@ module	mpyop(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result, o_
 
 `ifdef	VERILATOR
 		// verilator lint_off UNUSED
-		wire	[32+32+5-1:0]	mpy_unused;
-		assign	mpy_unused = { i_clk, i_reset, i_stb, i_op, i_a, i_b };
+		wire	mpy_unused;
+		assign	mpy_unused = &{ 1'b0, i_clk, i_reset, i_stb, i_op, i_a, i_b };
 		// verilator lint_on  UNUSED
 `endif
+		// }}}
 	end else begin : IMPY
 	if (IMPLEMENT_MPY == 1)
 	begin : MPY1CK // Our single clock option (no extra clocks)
-
+		// {{{
 		wire	signed	[63:0]	w_mpy_a_input, w_mpy_b_input;
 
 		assign	w_mpy_a_input = {{(32){(i_a[31])&(i_op[0])}},i_a[31:0]};

ParseResult:
UPD HdlStmAssign@@ to 
    DEL HdlValueInt@@0 from 


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -176,6 +215,7 @@ module	mpyop(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result, o_
 			r_smpy_result <= r_mpy_a_input * r_mpy_b_input;
 		always @(posedge i_clk)
 			r_umpy_result <= u_mpy_a_input * u_mpy_b_input;
+		// }}}
 `endif
 
 		always @(posedge i_clk)

ParseResult:
MOV HdlStmProcess@@ to body
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlValueId: i_reset
                HdlStmAssign: if_true
                    HdlValueInt: 0
                    HdlValueId: mpypipe
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueId: i_stb
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: mpypipe
                                    HdlValueInt: 0
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: mpypipe
                                    HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: mpypipe
                                    HdlValueInt: 1
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: mpypipe
                                    HdlValueInt: 1
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: mpypipe
                                    HdlValueInt: 2
            HdlStmIf
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_op
                        HdlValueInt: 0
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: NEG
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_a
                                                    HdlValueInt: 31
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 30
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: NEG
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_b
                                                    HdlValueInt: 31
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 30
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_a
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_b
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_op
                        HdlValueInt: 0
                HdlValueId: r_mpy_signed
            HdlStmIf
                HdlValueId: i_stb
                HdlStmAssign: if_true
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_op
                            HdlValueInt: 1
                    HdlValueId: o_hi
                list: elifs


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -184,23 +224,33 @@ module	mpyop(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result, o_
 		assign	o_busy  = mpypipe[0];
 		assign	o_result = (r_sgn[1])?r_smpy_result:r_umpy_result;
 		assign	o_valid = mpypipe[1];
+		// }}}
 
-		// Results are then set on the third clock
+		// Results are then available and registered on the third clock
+		// }}}
 	end else begin : MPN3
 	if (IMPLEMENT_MPY == 4)
-	begin : MPY4CK // The three clock option
+	begin : MPY4CK // The four clock option, polynomial multiplication
+		// {{{
+		// Declarations
+		// {{{
 		reg	[63:0]	r_mpy_result;
 		reg	[31:0]	r_mpy_a_input, r_mpy_b_input;
 		reg		r_mpy_signed;
 		reg	[2:0]	mpypipe;
+		reg	[31:0]	pp_f, pp_l; // F and L from FOIL
+		reg	[32:0]	pp_oi; // The O and I from FOIL
+		reg	[32:0]	pp_s;
+		// }}}
 
-		// First clock, latch in the inputs
+		// First clock, latch in the inputs : mpypipe, r_mpy_?_input
+		// {{{
 		initial	mpypipe = 3'b0;
 		always @(posedge i_clk)
 		begin
 			// mpypipe indicates we have a multiply in the
 			// pipeline.  In this case, the multiply
-			// pipeline is a two stage pipeline, so we need 
+			// pipeline is a two stage pipeline, so we need
 			// two bits in the pipe.
 			if (i_reset)
 				mpypipe <= 3'h0;

ParseResult:
MOV HdlStmProcess@@ to body
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlValueId: i_reset
                HdlStmAssign: if_true
                    HdlValueInt: 0
                    HdlValueId: mpypipe
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueId: i_stb
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: mpypipe
                                    HdlValueInt: 0
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: mpypipe
                                    HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: mpypipe
                                    HdlValueInt: 1
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: mpypipe
                                    HdlValueInt: 1
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: mpypipe
                                    HdlValueInt: 2
            HdlStmIf
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_op
                        HdlValueInt: 0
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: NEG
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_a
                                                    HdlValueInt: 31
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 30
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: NEG
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_b
                                                    HdlValueInt: 31
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 30
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_a
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_b
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_op
                        HdlValueInt: 0
                HdlValueId: r_mpy_signed
            HdlStmIf
                HdlValueId: i_stb
                HdlStmAssign: if_true
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_op
                            HdlValueInt: 1
                    HdlValueId: o_hi
                list: elifs

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: OR_UNARY
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: mpypipe
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 1
                            HdlValueInt: 0
    HdlValueId: o_busy


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_txgears.v
+++ b/rtl/zipdma/zipdma_txgears.v
@@ -162,9 +172,12 @@ module	zipdma_txgears #(
 		begin
 			case(i_size)
 			SZ_BYTE: m_bytes <= 1;
-			SZ_16B: m_bytes <= (fill > 4) ? 2 : (fill >= 2) ? (fill - 2) : 0;
-			SZ_32B: m_bytes <= (fill > 8) ? 4 : (fill >= 4) ? (fill - 4) : 0;
-			SZ_BUS: m_bytes <= 0;
+			SZ_16B:  m_bytes <= (fill >= 4) ? 2
+						: (&fill[1:0]) ? 1 : 0;
+			SZ_32B:  m_bytes <= (fill >= 8) ? 4
+				: (fill[2]) ? ({ {(WBLSB-1){1'b0}}, fill[1:0] })
+				: 0;
+			SZ_BUS:  m_bytes <= 0;
 			endcase
 		end
 		// }}}

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@TERNARY to TERNARY
            MOV HdlOp@@GE to ops
            HdlOp: GE
                list: ops
                    HdlValueId: fill
                    HdlValueInt: 4
            MOV HdlOp@@SUB to ops
            HdlOp: SUB
                list: ops
                    HdlValueId: fill
                    HdlValueInt: 4
            MOV HdlValueInt@@0 to ops
            HdlValueInt: 0
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@fill to WBLSB
                UPD HdlValueInt@@4 to 1
        UPD HdlOp@@GT to GE

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@TERNARY to TERNARY
            UPD HdlOp@@SUB to SUB
                UPD HdlValueInt@@2 to 1
                MOV HdlValueInt@@2 to ops
                HdlValueInt: 2
                DEL HdlValueId@@fill from ops
                DEL list@@ops from SUB
            UPD HdlOp@@GE to INDEX
            MOV HdlOp@@GE to ops
            HdlOp: GE
                list: ops
                    HdlValueId: fill
                    HdlValueInt: 2
            DEL HdlOp@@SUB from ops
        DEL HdlOp@@GT from ops
        HdlOp: GT
            list: ops
                HdlValueId: fill
                HdlValueInt: 4

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@TERNARY to TERNARY
            INS HdlOp@@CONCAT to ops
            INS HdlValueInt@@0 to ops
            UPD HdlOp@@CONCAT to CONCAT
                INS list@@ops to CONCAT
                INS HdlOp@@REPL_CONCAT to ops
                INS HdlOp@@INDEX to ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: fill
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
                    INS list@@ops to REPL_CONCAT


CommitId: 9e8db9e9faee0353d9400fb48ec888544b80d585
Removed almost all assumptions from zipcore
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -307,7 +307,7 @@ module	memops #(
 		5'b01111: o_result <= { 24'h00, i_wb_data[ 7: 0] };
 		//
 		5'b1100?: o_result <= { 16'h00, i_wb_data[15: 0] };
-		5'b1101?: o_result <= { 16'h00, i_wb_data[32:16] };
+		5'b1101?: o_result <= { 16'h00, i_wb_data[31:16] };
 		5'b11100: o_result <= { 24'h00, i_wb_data[ 7: 0] };
 		5'b11101: o_result <= { 24'h00, i_wb_data[15: 8] };
 		5'b11110: o_result <= { 24'h00, i_wb_data[23:16] };
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlValueInt@@32 to 31


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma.v
+++ b/rtl/zipdma/zipdma.v
@@ -302,7 +302,7 @@ module zipdma #(
 		// }}}
 	);
 
-	assign	rx_ready = sfifo_full;
+	assign	rx_ready = !sfifo_full;
 	assign	tx_valid = !sfifo_empty;
 
 	zipdma_txgears #(
ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: sfifo_full
    HdlValueId: rx_ready

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlValueId: sfifo_full
    HdlValueId: rx_ready


CommitId: acd3b2bacab6fe1b92a9166bf68ef3dd0f315f76
Fixed prefetch, so it won't declare an error if the address changes mid cycle
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -120,7 +120,7 @@ module	prefetch(i_clk, i_rst, i_ce, i_stalled_n, i_pc, i_aux,
 		if ((o_wb_cyc)&&(i_wb_ack))
 		begin
 			o_valid <= (i_pc == o_wb_addr)&&(~i_wb_err);
-			o_illegal <= i_wb_err;
+			o_illegal <= (i_wb_err)&&(i_pc == o_wb_addr);
 		end else if (i_stalled_n)
 		begin
 			o_valid <= 1'b0;
ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@EQ to ops
        HdlOp: EQ
            list: ops
                HdlValueId: i_pc
                HdlValueId: o_wb_addr

UPD HdlStmAssign@@ to 
    MOV HdlValueId@@i_wb_err to 
    HdlValueId: i_wb_err


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -160,7 +160,7 @@ module	zipsystem #(
 		parameter [0:0]	OPT_CIS=1,
 		parameter [0:0]	OPT_LOCK=1,
 		parameter [0:0]	OPT_USERMODE=1,
-		parameter [0:0]	OPT_DBGPORT=1,
+		parameter [0:0]	OPT_DBGPORT=START_HALTED,
 		parameter [0:0]	OPT_TRACE_PORT=1,
 		parameter [0:0]	OPT_PROFILER=0,
 		parameter [0:0]	OPT_LOWPOWER=0,

ParseResult:
UPD HdlIdDef@@OPT_DBGPORT to OPT_DBGPORT
    INS HdlValueId@@START_HALTED to OPT_DBGPORT

UPD HdlIdDef@@OPT_DBGPORT to OPT_DBGPORT
    DEL HdlValueInt@@1 from OPT_DBGPORT


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -287,7 +289,8 @@ module	zipsystem #(
 	localparam	HALT_BIT = 0,
 			STEP_BIT = 2,
 			RESET_BIT = 3,
-			CLEAR_CACHE_BIT = 4;
+			CLEAR_CACHE_BIT = 4,
+			CATCH_BIT = 5;
 	// }}}
 
 	// Virtual address width (unused)

ParseResult:
INS HdlIdDef@@CATCH_BIT to objs
HdlIdDef: CATCH_BIT
    HdlValueInt: 5
    HdlDirection: INTERNAL


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -339,15 +342,16 @@ module	zipsystem #(
 	wire			cpu_break, dbg_cmd_write, dbg_cpu_write;
 	wire	[DBG_WIDTH-1:0]	dbg_cmd_data;
 	wire [DBG_WIDTH/8-1:0]	dbg_cmd_strb;
-	reg			cmd_reset, cmd_step, cmd_clear_cache;
-	reg			cmd_write;
+	wire			reset_hold, halt_on_fault, dbg_catch;
+	wire			reset_request, release_request, halt_request,
+				step_request, clear_cache_request;
+	reg			cmd_reset, cmd_halt, cmd_step, cmd_clear_cache,
+				cmd_write;
 	reg	[4:0]		cmd_waddr;
 	reg	[DBG_WIDTH-1:0]	cmd_wdata;
-	wire			reset_hold;
-	reg			cmd_halt;
 	wire	[2:0]		cpu_dbg_cc;
 
-	wire			cpu_reset;
+	wire			cpu_reset, cpu_halt;
 	wire			cpu_dbg_stall;
 	wire	[DBG_WIDTH-1:0]	pic_data;
 	wire	[DBG_WIDTH-1:0]	cpu_status;

ParseResult:
MOV HdlIdDef@@reset_hold to objs
HdlIdDef: reset_hold
    HdlDirection: INTERNAL

MOV HdlIdDef@@cmd_halt to objs
HdlIdDef: cmd_halt
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

INS HdlIdDef@@halt_on_fault to objs
HdlIdDef: halt_on_fault
    HdlDirection: INTERNAL

INS HdlIdDef@@dbg_catch to objs
HdlIdDef: dbg_catch
    HdlDirection: INTERNAL

INS HdlIdDef@@reset_request to objs
HdlIdDef: reset_request
    HdlDirection: INTERNAL

INS HdlIdDef@@release_request to objs
HdlIdDef: release_request
    HdlDirection: INTERNAL

INS HdlIdDef@@halt_request to objs
HdlIdDef: halt_request
    HdlDirection: INTERNAL

INS HdlIdDef@@step_request to objs
HdlIdDef: step_request
    HdlDirection: INTERNAL

INS HdlIdDef@@clear_cache_request to objs
HdlIdDef: clear_cache_request
    HdlDirection: INTERNAL

INS HdlIdDef@@cpu_halt to objs
HdlIdDef: cpu_halt
    HdlDirection: INTERNAL


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -559,6 +563,19 @@ module	zipsystem #(
 	assign	dbg_cmd_data = dbg_idata;
 	assign	dbg_cmd_strb = dbg_sel;
 
+
+	assign	reset_request = dbg_cmd_write && dbg_cmd_strb[RESET_BIT/8]
+						&& dbg_cmd_data[RESET_BIT];
+	assign	release_request = dbg_cmd_write && dbg_cmd_strb[HALT_BIT/8]
+						&& !dbg_cmd_data[HALT_BIT];
+	assign	halt_request = dbg_cmd_write && dbg_cmd_strb[HALT_BIT/8]
+						&& dbg_cmd_data[HALT_BIT];
+	assign	step_request = dbg_cmd_write && dbg_cmd_strb[STEP_BIT/8]
+						&& dbg_cmd_data[STEP_BIT];
+	assign	clear_cache_request = dbg_cmd_write
+					&& dbg_cmd_strb[CLEAR_CACHE_BIT/8]
+					&& dbg_cmd_data[CLEAR_CACHE_BIT];
+
 	//
 	// reset_hold: Always start us off with an initial reset
 	// {{{

ParseResult:
INS HdlStmAssign@@ to objs

INS HdlStmAssign@@ to objs

INS HdlStmAssign@@ to objs

INS HdlStmAssign@@ to objs

INS HdlStmAssign@@ to objs


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -595,6 +612,8 @@ module	zipsystem #(
 	end endgenerate
 	// }}}
 
+	assign	halt_on_fault = dbg_catch;
+
 	// cmd_reset
 	// {{{
 	// Always start us off with an initial reset

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@START_HALTED to halt_on_fault


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -604,11 +623,10 @@ module	zipsystem #(
 		cmd_reset <= 1'b1;
 	else if (reset_hold || wdt_reset)
 		cmd_reset <= 1'b1;
-	else if (cpu_break && !START_HALTED)
+	else if (cpu_break && !halt_on_fault)
 		cmd_reset <= 1'b1;
 	else
-		cmd_reset <= (dbg_cmd_write && dbg_cmd_strb[0]
-					&& dbg_cmd_data[RESET_BIT]);
+		cmd_reset <= reset_request;
 	// }}}
 
 	// cmd_halt

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_data
                HdlValueId: RESET_BIT
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@dbg_cmd_write to reset_request
            MOV HdlValueId@@dbg_cmd_write to ops
            HdlValueId: dbg_cmd_write
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_strb
                    HdlValueInt: 0
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from if_false

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@START_HALTED to halt_on_fault


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -626,8 +644,7 @@ module	zipsystem #(
 		// aren't being given a command to step the CPU.
 		//
 		if (!cmd_write && !cpu_dbg_stall && dbg_cmd_write
-			&& dbg_cmd_strb[1] && (!dbg_cmd_data[HALT_BIT]
-				|| dbg_cmd_data[STEP_BIT]))
+				&& (release_request || step_request))
 			cmd_halt <= 1'b0;
 
 		// Reasons to halt

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@START_HALTED to halt_on_fault


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -636,13 +653,12 @@ module	zipsystem #(
 		//	exception must be cured before we can (re)start.
 		//	If the CPU is configured to start immediately on power
 		//	up, we leave it to reset on any exception instead.
-		if (cpu_break && START_HALTED)
+		if (cpu_break && halt_on_fault)
 			cmd_halt <= 1'b1;
 
 		// 2. Halt on any user request to halt.  (Only valid if the
 		//	STEP bit isn't also set)
-		if (dbg_cmd_write && dbg_cmd_strb[1] && dbg_cmd_data[HALT_BIT]
-				&& !dbg_cmd_data[STEP_BIT])
+		if (dbg_cmd_write && halt_request && !step_request)
 			cmd_halt <= 1'b1;
 
 		// 3. Halt on any user request to write to a CPU register

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: dbg_cmd_write
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_cmd_strb
                            HdlValueInt: 1
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@dbg_cmd_strb to halt_request
                    MOV HdlValueId@@dbg_cmd_strb to ops
                    HdlValueId: dbg_cmd_strb
                    DEL HdlValueInt@@1 from ops
                    DEL list@@ops from INDEX
                DEL HdlOp@@INDEX from ops
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: HALT_BIT
            DEL list@@ops from AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlOp@@INDEX to INDEX
                MOV list@@ops to INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: STEP_BIT
                UPD HdlValueId@@dbg_cmd_data to step_request
                DEL HdlValueId@@STEP_BIT from ops
            DEL HdlOp@@INDEX from ops
            DEL list@@ops from NEG_LOG
        DEL HdlOp@@AND_LOG from ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            INS HdlValueId@@step_request to ops


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -658,7 +674,7 @@ module	zipsystem #(
 			cmd_halt <= 1'b1;
 
 		// 5. Halt on any clear cache bit--independent of any step bit
-		if (dbg_cmd_write && dbg_cmd_strb[1] && dbg_cmd_data[CLEAR_CACHE_BIT])
+		if (clear_cache_request)
 			cmd_halt <= 1'b1;
 		// }}}
 	end

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: HALT_BIT
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@dbg_cmd_data to clear_cache_request
                    MOV HdlValueId@@dbg_cmd_data to ops
                    HdlValueId: dbg_cmd_data
                    DEL HdlValueId@@CLEAR_CACHE_BIT from ops
                    DEL list@@ops from INDEX
                DEL HdlOp@@INDEX from ops
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: dbg_cmd_write
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: dbg_cmd_data
                                HdlValueId: CLEAR_CACHE_BIT
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_cmd_data
                        HdlValueId: HALT_BIT
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 1
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -670,8 +686,7 @@ module	zipsystem #(
 	always @(posedge i_clk)
 	if (i_reset || cpu_reset)
 		cmd_clear_cache <= 1'b0;
-	else if (dbg_cmd_write && dbg_cmd_data[CLEAR_CACHE_BIT]
-			&& dbg_cmd_data[HALT_BIT] && dbg_cmd_strb[1])
+	else if (dbg_cmd_write && clear_cache_request && halt_request)
 		cmd_clear_cache <= 1'b1;
 	else if (cmd_halt && !cpu_dbg_stall)
 		cmd_clear_cache <= 1'b0;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: STEP_BIT
            UPD HdlValueId@@dbg_cmd_write to step_request
            MOV HdlValueId@@dbg_cmd_write to ops
            HdlValueId: dbg_cmd_write
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 1
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -679,17 +694,37 @@ module	zipsystem #(
 
 	// cmd_step
 	// {{{
-	initial	cmd_step  = 1'b0;
+	initial	cmd_step = 1'b0;
 	always @(posedge i_clk)
 	if (i_reset)
 		cmd_step <= 1'b0;
-	else if (dbg_cmd_write && dbg_cmd_data[STEP_BIT] && dbg_cmd_strb[1])
+	else if (step_request)
 		cmd_step <= 1'b1;
 	else if (!cpu_dbg_stall)
 		cmd_step <= 1'b0;
 	// }}}
 
+	// dbg_catch
+	// {{{
+	generate if (!OPT_DBGPORT)
+	begin
+		assign	dbg_catch = START_HALTED;
+	end else begin
+		reg	r_dbg_catch;
+
+		initial	r_dbg_catch = START_HALTED;
+		always @(posedge i_clk)
+		if (i_reset)
+			r_dbg_catch <= START_HALTED;
+		else if (dbg_cmd_write && dbg_cmd_strb[CATCH_BIT/8])
+			r_dbg_catch <= dbg_cmd_data[CATCH_BIT];
+
+		assign	dbg_catch = r_dbg_catch;
+	end endgenerate
+	// }}}
+
 	assign	cpu_reset = (cmd_reset);
+	assign	cpu_halt = (cmd_halt);
 
 	// cpu_status
 	// {{{

ParseResult:
INS HdlStmIf@@ to objs
HdlStmIf
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: OPT_DBGPORT
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueId: START_HALTED
                HdlValueId: dbg_catch
    list: elifs
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_dbg_catch
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: r_dbg_catch
                                HdlValueId: START_HALTED
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueId: START_HALTED
                        HdlValueId: r_dbg_catch
                    list: elifs
                        tuple
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: dbg_cmd_write
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: dbg_cmd_strb
                                            HdlOp: DIV
                                                list: ops
                                                    HdlValueId: CATCH_BIT
                                                    HdlValueInt: 8
                            HdlStmAssign
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: dbg_cmd_data
                                        HdlValueId: CATCH_BIT
                                HdlValueId: r_dbg_catch
            HdlStmAssign
                HdlValueId: r_dbg_catch
                HdlValueId: dbg_catch

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: cmd_halt
    HdlValueId: cpu_halt

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: STEP_BIT
            UPD HdlValueId@@dbg_cmd_write to step_request
            MOV HdlValueId@@dbg_cmd_write to ops
            HdlValueId: dbg_cmd_write
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 1
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlValueId@@halt_request to ops


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -703,7 +738,8 @@ module	zipsystem #(
 	//	0x0000_0200 -> User mode
 	//	0x0000_0100 -> Sleep (CPU is sleeping)
 	//
-	//	0x0000_00e0 -> (Unused/reserved)
+	//	0x0000_00c0 -> (Unused/reserved)
+	//	0x0000_0020 -> dbg_catch
 	//	0x0000_0010 -> cmd_clear_cache
 	//
 	//	0x0000_0008 -> Reset

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@CONCAT to CONCAT
            MOV HdlOp@@CONCAT to ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlOp: CONCAT
                                                                list: ops
                                                                    HdlOp: CONCAT
                                                                        list: ops
                                                                            HdlOp: REPL_CONCAT
                                                                                list: ops
                                                                                    HdlOp: SUB
                                                                                        list: ops
                                                                                            HdlValueInt: 20
                                                                                            HdlValueId: EXTERNAL_INTERRUPTS
                                                                                    HdlValueInt: 0
                                                                            HdlValueId: i_ext_int
                                                                    HdlValueId: cpu_break
                                                            HdlValueId: pic_interrupt
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: cpu_dbg_cc
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 1
                                                                    HdlValueInt: 0
                                            HdlValueInt: 0
                                    HdlValueInt: 0
                            HdlValueId: cmd_reset
                    HdlValueInt: 0
            UPD HdlOp@@CONCAT to CONCAT
                MOV HdlValueInt@@0 to ops
                HdlValueInt: 0
                UPD HdlOp@@CONCAT to CONCAT
                    MOV HdlValueId@@cmd_reset to ops
                    HdlValueId: cmd_reset
                    UPD HdlOp@@CONCAT to CONCAT
                        MOV HdlValueInt@@0 to ops
                        HdlValueInt: 0


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -716,13 +752,13 @@ module	zipsystem #(
 		assign	cpu_status = { {(20-EXTERNAL_INTERRUPTS){1'b0}},
 			i_ext_int,
 			cpu_break, pic_interrupt, cpu_dbg_cc[1:0],
-			3'h0, 1'b0,
+			2'h0, dbg_catch, 1'b0,
 			cmd_reset, 1'b0, !cpu_dbg_stall, cmd_halt
 		};
 	end else begin : CPU_STATUS_MAX_INTERRUPTS
 		assign	cpu_status = { i_ext_int[19:0],
 			cpu_break, pic_interrupt, cpu_dbg_cc[1:0],
-			3'h0, 1'b0,
+			2'h0, dbg_catch, 1'b0,
 			cmd_reset, 1'b0, !cpu_dbg_stall, cmd_halt
 		};
 	end endgenerate

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@CONCAT to CONCAT
            MOV HdlOp@@CONCAT to ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlOp: CONCAT
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: i_ext_int
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 19
                                                                                    HdlValueInt: 0
                                                                    HdlValueId: cpu_break
                                                            HdlValueId: pic_interrupt
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: cpu_dbg_cc
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 1
                                                                    HdlValueInt: 0
                                            HdlValueInt: 0
                                    HdlValueInt: 0
                            HdlValueId: cmd_reset
                    HdlValueInt: 0
            UPD HdlOp@@CONCAT to CONCAT
                MOV HdlValueInt@@0 to ops
                HdlValueInt: 0
                UPD HdlOp@@CONCAT to CONCAT
                    MOV HdlValueId@@cmd_reset to ops
                    HdlValueId: cmd_reset
                    UPD HdlOp@@CONCAT to CONCAT
                        MOV HdlValueInt@@0 to ops
                        HdlValueInt: 0


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -166,7 +148,7 @@ module	zipaxil #(
 		//
 		output	wire				M_INSN_ARVALID,
 		input	wire				M_INSN_ARREADY,
-		output	wire	[C_AXI_ADDR_WIDTH-1:0]	M_INSN_ARADDR,
+		output	wire	[ADDRESS_WIDTH-1:0]	M_INSN_ARADDR,
 		output	wire	[2:0]			M_INSN_ARPROT,
 		//
 		input	wire				M_INSN_RVALID,

ParseResult:
UPD HdlIdDef@@M_INSN_AWADDR to M_INSN_AWADDR
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@C_AXI_ADDR_WIDTH to ADDRESS_WIDTH


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -192,7 +174,7 @@ module	zipaxil #(
 		//
 		output	wire				M_DATA_ARVALID,
 		input	wire				M_DATA_ARREADY,
-		output	wire [C_AXI_ADDR_WIDTH-1:0]	M_DATA_ARADDR,
+		output	wire [ADDRESS_WIDTH-1:0]	M_DATA_ARADDR,
 		output	wire	[2:0]			M_DATA_ARPROT,
 		//
 		input	wire				M_DATA_RVALID,

ParseResult:
UPD HdlIdDef@@M_INSN_ARADDR to M_INSN_ARADDR
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@C_AXI_ADDR_WIDTH to ADDRESS_WIDTH


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -206,38 +188,27 @@ module	zipaxil #(
 		output	wire		o_gie,
 		output	wire		o_op_stall,
 		output	wire		o_pf_stall,
-		output	wire		o_i_count
+		output	wire		o_i_count,
 		//
-`ifdef	DEBUG_SCOPE
-		, output reg	[31:0]	o_debug
-`endif
+		output wire	[31:0]	o_debug
 	// }}}
 	);
 
 	// Declarations
 	// {{{
-	// localparam	[0:0]	OPT_NO_USERMODE = 1'b0;
-	localparam	[0:0]	IMPLEMENT_LOCK=0;
 	localparam	C_DBG_DATA_WIDTH = 32;
 	localparam	DBGLSB = $clog2(C_DBG_DATA_WIDTH/8);
-	localparam	ADDRESS_WIDTH = C_AXI_ADDR_WIDTH;
 	localparam	AW=ADDRESS_WIDTH-2;
-`ifdef	OPT_PIPELINED_BUS_ACCESS
-	localparam	[0:0]	OPT_PIPELINED_BUS_ACCESS = (OPT_PIPELINED);
-`else
-	localparam	[0:0]	OPT_PIPELINED_BUS_ACCESS = 1'b0;
-`endif
-	localparam		OPT_LGDCACHE = (OPT_PIPELINED_BUS_ACCESS)? 1:0;
-	localparam	[0:0]	OPT_DCACHE = (OPT_LGDCACHE > 0);
+	localparam	[0:0]	OPT_PIPELINED_BUS_ACCESS = (OPT_PIPELINED)&&(OPT_LGDCACHE > 1);
+	localparam	[0:0]	OPT_DCACHE = (OPT_LGDCACHE > 4);
 
-	localparam FETCH_LIMIT = 4;
+	localparam FETCH_LIMIT = (OPT_LGICACHE < 4) ? (1 << OPT_LGICACHE) : 16;
 	wire	[31:0]	cpu_debug;
 
 	localparam	RESET_BIT = 6,
 			STEP_BIT = 8,
 			HALT_BIT = 10,
 			CLEAR_CACHE_BIT = 11;
-	localparam [0:0]	OPT_LOWPOWER = 1'b1;
 	localparam [0:0]	OPT_ALIGNMENT_ERR = 1'b0;
 	localparam [0:0]	SWAP_ENDIANNESS = 1'b0;
 

ParseResult:
UPD HdlIdDef@@M_DATA_AWADDR to M_DATA_AWADDR
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@C_AXI_ADDR_WIDTH to ADDRESS_WIDTH

UPD HdlIdDef@@M_DATA_ARADDR to M_DATA_ARADDR
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@C_AXI_ADDR_WIDTH to ADDRESS_WIDTH


CommitId: aa94bb47309b46426d6ac64ea82acf5d9910195a
AXILPIPE FIX: Fixes LB/SB instruction
--- a/sim/rtl/wbdown.v
+++ b/sim/rtl/wbdown.v
@@ -51,6 +51,14 @@ module wbdown #(
 		assign	o_wack   = i_ack;
 		assign	o_wdata  = i_data;
 		assign	o_werr   = i_err;
+
+		// Keep Verilator happy
+		// {{{
+		// Verilator lint_off UNUSED
+		wire	unused;
+		assign	unused = &{ 1'b0, i_clk, i_reset };
+		// Verilator lint_on  UNUSED
+		// }}}
 		// }}}
 	end else begin : DOWNSIZE
 		localparam	LGFIFO = 5;
ParseResult:
INS HdlIdDef@@unused to body
HdlIdDef: unused
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: AND_UNARY
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlValueInt: 0
                            HdlValueId: i_clk
                    HdlValueId: i_reset
    HdlValueId: unused


CommitId: 3d021d0e356128762206e783caaa395ef05e7e34
ZipDMA: MM2S size and increment bits deconflicted w/ trigger and int
--- a/rtl/zipdma/zipdma.v
+++ b/rtl/zipdma/zipdma.v
@@ -65,9 +65,9 @@ module zipdma #(
 		// Master/DMA port
 		// {{{
 		output	wire			o_mwb_cyc, o_mwb_stb, o_mwb_we,
-		output	reg	[AW-1:0]	o_mwb_addr,
-		output	reg	[BUS_WIDTH-1:0]	o_mwb_data,
-		output	reg [BUS_WIDTH/8-1:0]	o_mwb_sel,
+		output	wire	[AW-1:0]	o_mwb_addr,
+		output	wire	[BUS_WIDTH-1:0]	o_mwb_data,
+		output	wire [BUS_WIDTH/8-1:0]	o_mwb_sel,
 		// Master/DMA wishbone responses from the bus
 		input	wire			i_mwb_stall, i_mwb_ack,
 		input	wire	[BUS_WIDTH-1:0]	i_mwb_data,
ParseResult:
UPD HdlIdDef@@o_mwb_addr to o_mwb_addr
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@reg to wire

UPD HdlIdDef@@o_mwb_data to o_mwb_data
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@reg to wire

UPD HdlIdDef@@o_mwb_sel to o_mwb_sel
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@reg to wire


CommitId: 672e53258a74bd7162e0e2a6e03f77dc93d10dd4
Fixed broken delay branch implementation, following broken formal prop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -139,19 +139,13 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	begin
 		if (OPT_CIS)
 		begin : CIS_EARLY_BRANCHING
-			reg	r_pre_ljmp;
-			always @(posedge i_clk)
-			if ((i_reset)||(o_early_branch))
-				r_pre_ljmp <= 1'b0;
-			else if ((i_ce)&&(i_pf_valid))
-				r_pre_ljmp <= (!o_phase)&&(i_instruction[`CISBIT])
-					&&(i_instruction[14:0] == 15'h7cf8);
-			else if (i_ce)
-				r_pre_ljmp <= 1'b0;
-	
-			assign	w_cis_ljmp = r_pre_ljmp;
+
+			assign	w_cis_ljmp = (iword[31:16] == 16'hfcf8);
+
 		end else begin : NOCIS_EARLY_BRANCH
+
 			assign	w_cis_ljmp = 1'b0;
+
 		end
 
 		assign	w_ljmp = (iword == 32'h7c87c000);

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_EARLY_BRANCHING to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: w_cis_ljmp
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: w_ljmp
    DEL HdlValueId@@OPT_EARLY_BRANCHING from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL list@@elifs from 

INS HdlStmIf@@ to body

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: EQ
        list: ops
            HdlValueId: iword
            HdlValueInt: 7c87c000
    HdlValueId: w_ljmp

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_CIS to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: iword
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 16
                        HdlValueInt: fcf8
                HdlValueId: w_cis_ljmp
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: w_cis_ljmp
    DEL HdlValueId@@OPT_CIS from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL list@@elifs from 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_instruction
                    HdlValueInt: 31
            DEL HdlOp@@NEG_LOG from ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_phase
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL HdlOp@@EQ from ops
        HdlOp: EQ
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_instruction
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 14
                                HdlValueInt: 0
                HdlValueInt: 7cf8
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 
    DEL HdlValueId@@r_pre_ljmp from 

DEL HdlIdDef@@r_pre_ljmp from body
HdlIdDef: r_pre_ljmp
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

UPD HdlStmProcess@@ to 
    DEL list@@sensitivity from 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmIf@@body to body
    DEL HdlOp@@OR_LOG from body
    HdlOp: OR_LOG
        list: ops
            HdlValueId: i_reset
            HdlValueId: o_early_branch
    DEL HdlOp@@AND_LOG from 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_ce
            HdlValueId: i_pf_valid
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs
    tuple
        HdlValueId: i_ce
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: r_pre_ljmp
    DEL list@@elifs from body

DEL HdlStmAssign@@if_true from body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_pre_ljmp

DEL HdlStmAssign@@ from 

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from body

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueId: r_pre_ljmp
    HdlValueId: w_cis_ljmp

DEL HdlStmIf@@ from body

DEL HdlStmIf@@ from objs


CommitId: 672e53258a74bd7162e0e2a6e03f77dc93d10dd4
Fixed broken delay branch implementation, following broken formal prop
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -366,12 +360,25 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		// When no instruction is in the pipe, phase is zero
 		initial	r_phase = 1'b0;
 		always @(posedge i_clk)
-		if ((i_reset)||(o_early_branch)||(w_ljmp_dly))
+		if ((i_reset)||(w_ljmp_dly))
 			r_phase <= 1'b0;
 		else if ((i_ce)&&(i_pf_valid))
-			r_phase <= (o_phase)? 1'b0
-				: ((i_instruction[`CISBIT])&&(i_pf_valid));
-		else if (i_ce)
+		begin
+			if (o_phase)
+				// CIS instructions only have two parts.  On
+				// the second part (o_phase is true), return
+				// back to the first
+				r_phase <= 0;
+			else if ((i_instruction[`CISBIT])&&(w_dcdR_pc)&&(w_wR))
+				// CIS instructions are unconditional.
+				// Therefore, any write to the PC will affect
+				// the PC, and the second half of the
+				// instruction will be irrelevant and may be
+				// ignored.
+				r_phase <= 0;
+			else
+				r_phase <= (i_instruction[`CISBIT]);
+		end else if (i_ce)
 			r_phase <= 1'b0;
 
 		assign	o_phase = r_phase;

ParseResult:
INS HdlStmIf@@ to body

INS HdlStmAssign@@if_false to 

INS HdlStmAssign@@ to 


CommitId: 2e9042bf59cebf0d059dcd3653af8d47418b8ad5
Switched default async flag in fwb_ to synchronous
--- a/rtl/ex/fwb_slave.v
+++ b/rtl/ex/fwb_slave.v
@@ -88,7 +88,7 @@ module	fwb_slave(i_clk, i_reset,
 	parameter	[0:0]	F_OPT_MINCLOCK_DELAY = 0;
 	//
 	//
-	parameter	[0:0]	F_OPT_CLK2FFLOGIC = 1'b1;
+	parameter	[0:0]	F_OPT_CLK2FFLOGIC = 1'b0;
 	//
 	localparam [(F_LGDEPTH-1):0] MAX_OUTSTANDING = {(F_LGDEPTH){1'b1}};
 	localparam	MAX_DELAY = (F_MAX_STALL > F_MAX_ACK_DELAY)
ParseResult:
UPD HdlIdDef@@F_OPT_CLK2FFLOGIC to F_OPT_CLK2FFLOGIC
    UPD HdlValueInt@@1 to 0


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -32,38 +32,32 @@
 // {{{
 //		http://www.gnu.org/licenses/gpl.html
 //
-//
 ////////////////////////////////////////////////////////////////////////////////
 //
-//
 `default_nettype	none
 // }}}
-// Macros
-// {{{
-//
-// }}}
 module	zipcore #(
 		// {{{
 		parameter	ADDRESS_WIDTH=30,	// 32-b word addr width
 		parameter [ADDRESS_WIDTH+1:0] RESET_ADDRESS=32'h010_0000,
-		parameter	IMPLEMENT_MPY = 0,
-		parameter [0:0]	IMPLEMENT_SHIFTS = 1,
-		parameter [0:0]	IMPLEMENT_DIVIDE = 1,
-`ifdef	OPT_IMPLEMENT_FPU
-		parameter [0:0]	IMPLEMENT_FPU = 1,
-`else
+		parameter	OPT_MPY = 0,
+		parameter [0:0]	OPT_SHIFTS = 1,
+		parameter [0:0]	OPT_DIV = 1,
 		parameter [0:0]	IMPLEMENT_FPU = 0,
-`endif
 		parameter [0:0]	OPT_EARLY_BRANCHING = 1,
 		parameter [0:0]	OPT_CIS = 1'b1,
 		parameter [0:0]	OPT_SIM = 1'b0,
+		parameter [0:0]	OPT_DISTRIBUTED_REGS = 1'b1,
 		parameter	[0:0]	OPT_PIPELINED = 1'b1,
 		parameter	[0:0]	OPT_PIPELINED_BUS_ACCESS = (OPT_PIPELINED),
-		parameter	[0:0]	IMPLEMENT_LOCK=1,
+		parameter	[0:0]	OPT_LOCK=1,
 		parameter	[0:0]	OPT_DCACHE = 1,
-		parameter	[0:0]	OPT_NO_USERMODE = 1'b0,
+		parameter	[0:0]	OPT_USERMODE = 1'b1,
 		parameter	[0:0]	OPT_LOWPOWER = 1'b0,
-		parameter	[0:0]	OPT_GATE_CLOCK = 1'b1,
+		parameter	[0:0]	OPT_CLKGATE = 1'b1,
+		parameter	[0:0]	OPT_START_HALTED = 1'b1,
+		parameter	[0:0]	OPT_DBGPORT = 1'b1,
+		parameter	[0:0]	OPT_TRACE_PORT = 1'b0,
 
 		localparam	AW=ADDRESS_WIDTH
 `ifdef	FORMAL

ParseResult:
MOV HdlIdDef@@IMPLEMENT_SHIFTS to params
HdlIdDef: IMPLEMENT_SHIFTS
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL

MOV HdlIdDef@@IMPLEMENT_LOCK to params
HdlIdDef: IMPLEMENT_LOCK
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL

MOV HdlIdDef@@OPT_NO_USERMODE to params
HdlIdDef: OPT_NO_USERMODE
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlIdDef@@IMPLEMENT_MPY to OPT_MPY

UPD HdlIdDef@@IMPLEMENT_DIVIDE to OPT_SHIFTS

UPD HdlIdDef@@IMPLEMENT_SHIFTS to OPT_DIV

INS HdlIdDef@@OPT_DISTRIBUTED_REGS to params
HdlIdDef: OPT_DISTRIBUTED_REGS
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL

UPD HdlIdDef@@IMPLEMENT_LOCK to OPT_USERMODE

UPD HdlIdDef@@OPT_NO_USERMODE to OPT_CLKGATE

INS HdlIdDef@@OPT_START_HALTED to params
HdlIdDef: OPT_START_HALTED
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL

INS HdlIdDef@@OPT_DBGPORT to params
HdlIdDef: OPT_DBGPORT
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL

UPD HdlIdDef@@OPT_GATE_CLOCK to OPT_TRACE_PORT

UPD HdlIdDef@@OPT_LOCK to OPT_LOCK
    INS HdlValueInt@@1 to OPT_LOCK

UPD HdlIdDef@@OPT_NO_USERMODE to OPT_NO_USERMODE
    UPD HdlValueInt@@0 to 1

UPD HdlIdDef@@OPT_GATE_CLOCK to OPT_GATE_CLOCK
    UPD HdlValueInt@@1 to 0


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -83,7 +77,7 @@ module	zipcore #(
 		input	wire	[4:0]	i_dbg_rreg,
 		//
 		output	wire		o_dbg_stall,
-		output	reg	[31:0]	o_dbg_reg,
+		output	wire	[31:0]	o_dbg_reg,
 		output	reg	[2:0]	o_dbg_cc,
 		output	wire		o_break,
 		// }}}

ParseResult:
INS HdlIdDef@@o_dbg_reg to ports
HdlIdDef: o_dbg_reg
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: OUT

UPD HdlIdDef@@o_dbg_reg to pre_op_Bv

MOV HdlIdDef@@o_dbg_reg to ports
HdlIdDef: o_dbg_reg
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: OUT

UPD HdlIdDef@@o_dbg_reg to o_dbg_reg
    UPD HdlDirection@@OUT to INTERNAL


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -121,7 +115,7 @@ module	zipcore #(
 		// }}}
 		// Debug data for on-line/live tracing
 		// {{{
-		output	reg	[31:0]	o_debug
+		output	wire	[31:0]	o_debug
 		//}}}
 		// }}}
 	);

ParseResult:
INS HdlIdDef@@o_debug to ports
HdlIdDef: o_debug
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: OUT

UPD HdlIdDef@@o_debug to pre_op_Av

MOV HdlIdDef@@o_debug to ports
HdlIdDef: o_debug
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: OUT

UPD HdlIdDef@@o_debug to o_debug
    UPD HdlDirection@@OUT to INTERNAL


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -131,7 +125,6 @@ module	zipcore #(
 	// Verilator lint_off UNUSED
 	localparam	[0:0]	OPT_MEMPIPE = OPT_PIPELINED_BUS_ACCESS;
 	localparam [(AW-1):0]	RESET_BUS_ADDRESS = RESET_ADDRESS[(AW+1):2];
-	localparam	[0:0]	OPT_LOCK= IMPLEMENT_LOCK;
 	localparam	[3:0]	CPU_CC_REG = 4'he,
 				CPU_PC_REG = 4'hf;
 	localparam	[3:0]	CPU_SUB_OP = 4'h0,// also a compare instruction

ParseResult:
MOV HdlIdDef@@OPT_LOCK to objs
HdlIdDef: OPT_LOCK
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueId: IMPLEMENT_LOCK
    HdlDirection: INTERNAL

UPD HdlIdDef@@OPT_LOCK to OPT_LOCK
    DEL HdlValueId@@IMPLEMENT_LOCK from OPT_LOCK


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -163,7 +156,7 @@ module	zipcore #(
 	// that logic.
 	//
 	(* ram_style = "distributed" *)
-	reg	[31:0]	regset	[0:(OPT_NO_USERMODE)? 15:31];
+	reg	[31:0]	regset	[0:(OPT_USERMODE)? 31:15];
 
 	// Condition codes
 	// (BUS, TRAP,ILL,BREAKEN,STEP,GIE,SLEEP ), V, N, C, Z

ParseResult:
INS HdlIdDef@@regset to objs

UPD HdlIdDef@@regset to regset
    INS HdlOp@@INDEX to regset
    INS HdlDirection@@INTERNAL to regset
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlValueInt: 0
                HdlOp: TERNARY
                    list: ops
                        HdlValueId: OPT_USERMODE
                        HdlValueInt: 31
                        HdlValueInt: 15

UPD HdlIdDef@@regset to regset
    UPD HdlOp@@INDEX to INDEX
        MOV HdlOp@@PARAMETRIZATION to ops
        HdlOp: PARAMETRIZATION
            list: ops
                HdlValueId: reg
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 31
                        HdlValueInt: 0
        DEL HdlOp@@DOWNTO from ops
        HdlOp: DOWNTO
            list: ops
                HdlValueInt: 0
                HdlOp: TERNARY
                    list: ops
                        HdlValueId: OPT_NO_USERMODE
                        HdlValueInt: 15
                        HdlValueInt: 31
        DEL list@@ops from INDEX
    DEL HdlOp@@INDEX from regset
    DEL HdlDirection@@INTERNAL from regset

DEL HdlIdDef@@regset from objs


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1599,13 +1597,13 @@ module	zipcore #(
 		always @(posedge i_clk)
 		if (alu_ce || div_ce || o_mem_ce || fpu_ce)
 			alu_reg <= op_R;
-		else if (i_dbg_we && !o_dbg_stall)
+		else if (OPT_DBGPORT && i_dbg_we && !o_dbg_stall)
 			alu_reg <= i_dbg_wreg;
 
 	end else begin
 
 		always @(posedge i_clk)
-		if (i_dbg_we && !o_dbg_stall)
+		if (OPT_DBGPORT && i_dbg_we && !o_dbg_stall)
 			alu_reg <= i_dbg_wreg;
 		else
 			alu_reg <= op_R;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlValueId@@i_dbg_we to ops
        HdlValueId: i_dbg_we

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@i_dbg_we to ops
        HdlValueId: i_dbg_we


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1637,7 +1635,7 @@ module	zipcore #(
 			wr_index[2] <= (op_valid_fpu);
 		end
 
-		if (i_dbg_we && !o_dbg_stall)
+		if (OPT_DBGPORT && i_dbg_we && !o_dbg_stall)
 			wr_index <= 3'b000;
 
 		if (!IMPLEMENT_FPU)

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlValueId@@OPT_DBGPORT to ops

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlValueId@@OPT_DBGPORT to ops


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1654,10 +1652,10 @@ module	zipcore #(
 	if (i_reset || !r_halted)
 		dbgv <= 0;
 	else
-		dbgv <= i_dbg_we && !o_dbg_stall;
+		dbgv <= OPT_DBGPORT && i_dbg_we && !o_dbg_stall;
 
 	always @(posedge i_clk)
-	if (!OPT_LOWPOWER || i_dbg_we)
+	if (!OPT_LOWPOWER || (OPT_DBGPORT && i_dbg_we))
 		dbg_val <= i_dbg_data;
 
 	// dbg_clear_pipe

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlValueId@@OPT_DBGPORT to ops


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2331,7 +2445,7 @@ module	zipcore #(
 
 	// o_clken
 	// {{{
-	generate if (!OPT_GATE_CLOCK)
+	generate if (!OPT_CLKGATE)
 	begin : NO_CLOCK_GATE
 
 		assign	w_clken = 1'b1;

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: w_switch_to_interrupt
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: w_release_from_interrupt
    UPD HdlValueId@@OPT_NO_USERMODE to OPT_USERMODE
    DEL list@@elifs from 


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2344,8 +2458,11 @@ module	zipcore #(
 		//
 		//	= r_clken || (i_interrupt&&!i_halt) || i_dbg_we
 		//
+		initial	r_clken = !OPT_START_HALTED;
 		always @(posedge i_clk)
-		if (i_reset || (i_halt && r_halted && !i_dbg_we))
+		if (i_reset)
+			r_clken <= !OPT_START_HALTED;
+		else if (i_halt && r_halted && (!OPT_DBGPORT || !i_dbg_we))
 			r_clken <= i_mem_busy || !i_halt || o_mem_ce;
 		else if (!i_halt&& (!sleep || i_interrupt || pending_interrupt))
 			r_clken <= 1'b1;

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: w_switch_to_interrupt
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: w_release_from_interrupt
    UPD HdlValueId@@OPT_NO_USERMODE to OPT_USERMODE
    DEL list@@elifs from 

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: gie
    UPD HdlValueId@@OPT_NO_USERMODE to OPT_USERMODE
    DEL list@@elifs from 

UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        INS HdlOp@@NEG_LOG to ops
        UPD HdlOp@@NEG_LOG to NEG_LOG
            INS list@@ops to NEG_LOG


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2367,7 +2484,7 @@ module	zipcore #(
 			// any previous operation(s)
 			if (i_mem_busy || o_mem_ce
 					|| alu_busy || div_busy || fpu_busy
-					|| wr_reg_ce || i_dbg_we
+					|| wr_reg_ce ||(OPT_DBGPORT && i_dbg_we)
 					|| i_bus_err)
 				r_clken <= 1'b1;
 

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: gie
    UPD HdlValueId@@OPT_NO_USERMODE to OPT_USERMODE
    DEL list@@elifs from 

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: trap
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: ubreak
    UPD HdlValueId@@OPT_NO_USERMODE to OPT_USERMODE
    DEL list@@elifs from 


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2384,7 +2501,8 @@ module	zipcore #(
 
 		// Wake up on interrupts, debug write requests, or the raising
 		// of the halt flag if we're not sleeping.
-		assign	o_clken = r_clken || i_dbg_we || i_clear_cache
+		assign	o_clken = r_clken || (OPT_DBGPORT && i_dbg_we)
+					|| i_clear_cache
 					|| (!i_halt && (i_interrupt || !sleep));
 	end endgenerate
 	// }}}

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: trap
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: ubreak
    UPD HdlValueId@@OPT_NO_USERMODE to OPT_USERMODE
    DEL list@@elifs from 

UPD HdlStmIf@@body to body
    INS tuple@@ to elifs
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlOp@@NEG_LOG to ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: OPT_DBGPORT


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2392,14 +2510,9 @@ module	zipcore #(
 	// gie, switch_to_interrupt, release_from_interrupt
 	// {{{
 	// The GIE register.  Only interrupts can disable the interrupt register
-	generate if (OPT_NO_USERMODE)
-	begin
+	generate if (OPT_USERMODE)
+	begin : GEN_PENDING_INTERRUPT
 		// {{{
-		assign	w_switch_to_interrupt    = 1'b0;
-		assign	w_release_from_interrupt = 1'b0;
-		// }}}
-	end else begin : GEN_PENDING_INTERRUPT
-
 		reg	r_pending_interrupt;
 
 		always @(posedge i_clk)

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: trap
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: ubreak
    UPD HdlValueId@@OPT_NO_USERMODE to OPT_USERMODE
    DEL list@@elifs from 

UPD HdlStmIf@@body to body
    INS tuple@@ to elifs
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlOp@@NEG_LOG to ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: OPT_DBGPORT


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2458,14 +2571,17 @@ module	zipcore #(
 			assert(i_interrupt || step || alu_illegal
 					|| ill_err_u || break_pending);
 `endif
+		// }}}
+	end else begin : NO_PENDING_INTS
+		// {{{
+		assign	w_switch_to_interrupt    = 1'b0;
+		assign	w_release_from_interrupt = 1'b0;
+		assign	pending_interrupt = 1'b0;
+		// }}}
 	end endgenerate
 
-	generate if (OPT_NO_USERMODE)
-	begin
-
-		assign	gie = 1'b0;
-
-	end else begin : SET_GIE
+	generate if (OPT_USERMODE)
+	begin : SET_GIE
 
 		reg	r_gie;
 

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: ubus_err_flag
    UPD HdlValueId@@OPT_NO_USERMODE to OPT_USERMODE
    DEL list@@elifs from 

UPD HdlStmIf@@ to 
    INS list@@elifs to 


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2479,18 +2595,18 @@ module	zipcore #(
 			r_gie <= 1'b1;
 
 		assign	gie = r_gie;
+	end else begin : ZERO_GIE
+
+		assign	gie = 1'b0;
+
 	end endgenerate
 	// }}}
 
 	// trap, ubreak
 	// {{{
-	generate if (OPT_NO_USERMODE)
-	begin
-
-		assign	trap   = 1'b0;
-		assign	ubreak = 1'b0;
-
-	end else begin : SET_TRAP_N_UBREAK
+	generate if (OPT_USERMODE)
+	begin : SET_TRAP_N_UBREAK
+		// {{{
 
 		reg	r_trap;
 		reg	r_ubreak;

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: ubus_err_flag
    UPD HdlValueId@@OPT_NO_USERMODE to OPT_USERMODE
    DEL list@@elifs from 

UPD HdlStmIf@@ to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    UPD HdlOp@@NE to NE
        UPD HdlValueId@@IMPLEMENT_DIVIDE to OPT_DIV


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2524,6 +2640,11 @@ module	zipcore #(
 
 		assign	trap = r_trap;
 		assign	ubreak = r_ubreak;
+		// }}}
+	end else begin
+
+		assign	trap   = 1'b0;
+		assign	ubreak = 1'b0;
 
 	end endgenerate
 	// }}}

ParseResult:
UPD HdlStmIf@@ to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    UPD HdlOp@@NE to NE
        UPD HdlValueId@@IMPLEMENT_DIVIDE to OPT_DIV

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: udiv_err_flag
    UPD HdlValueId@@OPT_NO_USERMODE to OPT_USERMODE
    DEL list@@elifs from 


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2540,12 +2661,8 @@ module	zipcore #(
 	else if ((alu_illegal)&&(!alu_gie)&&(!clear_pipeline))
 		ill_err_i <= 1'b1;
 
-	generate if (OPT_NO_USERMODE)
-	begin
-
-		assign	ill_err_u = 1'b0;
-
-	end else begin : SET_USER_ILLEGAL_INSN
+	generate if (OPT_USERMODE)
+	begin : SET_USER_ILLEGAL_INSN
 
 		reg	r_ill_err_u;
 

ParseResult:
UPD HdlStmIf@@ to 
    INS list@@elifs to 


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2564,6 +2681,10 @@ module	zipcore #(
 
 		assign	ill_err_u = r_ill_err_u;
 
+	end else begin : NO_USER_ILL
+
+		assign	ill_err_u = 1'b0;
+
 	end endgenerate
 	// }}}
 

ParseResult:
UPD HdlStmIf@@ to 
    INS list@@elifs to 


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2579,14 +2700,11 @@ module	zipcore #(
 		ibus_err_flag <= (ibus_err_flag)&&(wr_spreg_vl[CPU_BUSERR_BIT]);
 	else if ((i_bus_err)&&(!alu_gie))
 		ibus_err_flag <= 1'b1;
+
 	// User bus error flag -- if ever set, it will cause an interrupt to
 	// supervisor mode.
-	generate if (OPT_NO_USERMODE)
-	begin
-
-		assign	ubus_err_flag = 1'b0;
-
-	end else begin : SET_USER_BUSERR
+	generate if (OPT_USERMODE)
+	begin : SET_USER_BUSERR
 
 		reg	r_ubus_err_flag;
 

ParseResult:
UPD HdlStmIf@@ to 
    INS list@@elifs to 


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2600,15 +2718,19 @@ module	zipcore #(
 			r_ubus_err_flag <= 1'b1;
 
 		assign	ubus_err_flag = r_ubus_err_flag;
+	end else begin : NO_USER_BUSERR
+
+		assign	ubus_err_flag = 1'b0;
+
 	end endgenerate
 	// }}}
 
 	// idiv_err_flag, udiv_err_flag : Divide by zero error flags
 	// {{{
-	generate if (IMPLEMENT_DIVIDE != 0)
+	generate if (OPT_DIV != 0)
 	begin : DIVERR
 		// {{{
-		reg	r_idiv_err_flag, r_udiv_err_flag;
+		reg	r_idiv_err_flag;
 
 		// Supervisor/interrupt divide (by zero) error flag -- this will
 		// crash the CPU if ever set.  This bit is thus available for us

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlValueId@@OPT_NO_USERMODE to OPT_USERMODE
        MOV HdlValueId@@OPT_NO_USERMODE to ops
        HdlValueId: OPT_NO_USERMODE


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2624,10 +2746,10 @@ module	zipcore #(
 
 		assign	idiv_err_flag = r_idiv_err_flag;
 
-		if (OPT_NO_USERMODE)
-		begin
-			assign	udiv_err_flag = 1'b0;
-		end else begin
+		if (OPT_USERMODE)
+		begin : USER_DIVERR
+
+			reg	r_udiv_err_flag;
 
 			// User divide (by zero) error flag -- if ever set, it will
 			// cause a sudden switch interrupt to supervisor mode.

ParseResult:
UPD HdlStmIf@@ to 
    INS list@@elifs to 


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2642,6 +2764,8 @@ module	zipcore #(
 				r_udiv_err_flag <= 1'b1;
 
 			assign	udiv_err_flag = r_udiv_err_flag;
+		end else begin : NO_USER_DIVERR
+			assign	udiv_err_flag = 1'b0;
 		end
 		// }}}
 	end else begin

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: REPL_CONCAT
                    list: ops
                        HdlOp: ADD
                            list: ops
                                HdlValueId: AW
                                HdlValueInt: 2
                        HdlValueInt: 0
                HdlValueId: upc
    UPD HdlValueId@@OPT_NO_USERMODE to OPT_USERMODE
    DEL list@@elifs from 


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2749,12 +2873,8 @@ module	zipcore #(
 	// a non-gie instruction?
 
 	// upc
-	generate if (OPT_NO_USERMODE)
-	begin
-		// {{{
-		assign	upc = {(AW+2){1'b0}};
-		// }}}
-	end else begin : SET_USER_PC
+	generate if (OPT_USERMODE)
+	begin : SET_USER_PC
 		// {{{
 		reg	[(AW+1):0]	r_upc;
 

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS HdlOp@@NEG_LOG to ops
        UPD HdlOp@@NEG_LOG to NEG_LOG
            INS list@@ops to NEG_LOG


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2768,6 +2888,10 @@ module	zipcore #(
 
 		assign	upc = r_upc;
 		// }}}
+	end else begin
+		// {{{
+		assign	upc = {(AW+2){1'b0}};
+		// }}}
 	end endgenerate
 
 	// ipc

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS HdlOp@@NEG_LOG to ops
        UPD HdlOp@@NEG_LOG to NEG_LOG
            INS list@@ops to NEG_LOG


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2937,16 +3061,8 @@ module	zipcore #(
 
 	// debug_pc
 	// {{{
-	generate if (OPT_NO_USERMODE)
-	begin
-		// {{{
-		always @(*)
-		begin
-			debug_pc = 0;
-			debug_pc[(AW+1):0] = { ipc, 2'b00 };
-		end
-		// }}}
-	end else begin
+	generate if (OPT_USERMODE)
+	begin : DBGPC_FULL
 		// {{{
 		always @(*)
 		begin

ParseResult:
UPD HdlStmAssign@@ to 
    MOV HdlOp@@OR_LOG to 
    HdlOp: OR_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: r_halted
            HdlValueId: r_dbg_stall

INS HdlStmIf@@ to body

UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@i_dbg_we to ops
        HdlValueId: i_dbg_we


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -3045,10 +3188,13 @@ module	zipcore #(
 	generate if (OPT_PIPELINED)
 	begin
 		// {{{
+		initial	r_halted = OPT_START_HALTED;
 		always @(posedge i_clk)
-		if (!i_halt)
+		if (i_reset)
+			r_halted <= OPT_START_HALTED;
+		else if (!i_halt)
 			r_halted <= 1'b0;
-		else if (i_reset || r_halted)
+		else if (r_halted)
 			r_halted <= 1'b1;
 		else
 			r_halted <= (!alu_phase)&&(!o_bus_lock)&&(

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@ to 
    INS HdlOp@@NEG_LOG to 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: OPT_DBGPORT
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_dbg_reg
            HdlIdDef: unused_dbgport
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: AND_UNARY
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueInt: 0
                                        HdlValueId: i_dbg_rreg
                                HdlValueId: debug_pc
                HdlValueId: unused_dbgport
    INS list@@elifs to 
    INS tuple@@ to elifs
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlIdDef@@r_debug to body
HdlIdDef: r_debug
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: INTERNAL

MOV HdlIdDef@@generic_ignore to body
HdlIdDef: generic_ignore
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 2
    HdlDirection: INTERNAL

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: wr_spreg_vl
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 2
    HdlValueId: generic_ignore

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD list@@body to ops
        MOV list@@body to SEQ
        list: body
            HdlIdDef: generic_ignore
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlOp: ADD
                                    list: ops
                                        HdlValueId: AW
                                        HdlValueInt: 2
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: wr_spreg_vl
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlOp: ADD
                                    list: ops
                                        HdlValueId: AW
                                        HdlValueInt: 2
                HdlValueId: generic_ignore

UPD HdlIdDef@@generic_ignore to generic_ignore
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@31 to 0
            MOV HdlValueInt@@31 to ops
            HdlValueInt: 31
            DEL HdlOp@@ADD from ops
            HdlOp: ADD
                list: ops
                    HdlValueId: AW
                    HdlValueInt: 2
            DEL list@@ops from DOWNTO
        DEL HdlValueId@@wire from ops
        DEL HdlOp@@DOWNTO from ops
        DEL list@@ops from PARAMETRIZATION
    DEL HdlOp@@PARAMETRIZATION from generic_ignore

UPD HdlStmAssign@@ to 
    MOV HdlOp@@INDEX to 
    HdlOp: INDEX
        list: ops
            HdlValueId: wr_spreg_vl
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 2


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -3061,10 +3207,13 @@ module	zipcore #(
 		// }}}
 	end else begin
 		// {{{
+		initial	r_halted = OPT_START_HALTED;
 		always @(posedge i_clk)
-		if (!i_halt)
+		if (i_reset)
+			r_halted <= OPT_START_HALTED;
+		else if (!i_halt)
 			r_halted <= 1'b0;
-		else if (i_reset || r_halted)
+		else if (r_halted)
 			r_halted <= 1'b1;
 		else
 			r_halted <= (!alu_phase)

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@ to 
    INS HdlOp@@NEG_LOG to 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: OPT_DBGPORT
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_dbg_reg
            HdlIdDef: unused_dbgport
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: AND_UNARY
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueInt: 0
                                        HdlValueId: i_dbg_rreg
                                HdlValueId: debug_pc
                HdlValueId: unused_dbgport
    INS list@@elifs to 
    INS tuple@@ to elifs
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_DISTRIBUTED_REGS to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: dbg_reg_sel
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlIdDef: pre_dbg_special
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: EQ
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_dbg_rreg
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 3
                                            HdlValueInt: 1
                            HdlValueInt: 7
                    HdlValueId: dbg_reg_sel
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: regset
                            HdlValueId: i_dbg_rreg
                    HdlValueId: pre_dbg_reg
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_dbg_rreg
                            HdlValueInt: 0
                    HdlStmAssign: if_true
                        HdlValueId: debug_pc
                        HdlValueId: pre_dbg_special
                    list: elifs
                    HdlStmBlock: SEQ
                        list: body
                            HdlStmAssign
                                HdlOp: TERNARY
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_dbg_rreg
                                                HdlValueInt: 4
                                        HdlValueId: w_uflags
                                        HdlValueId: w_iflags
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: pre_dbg_special
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 15
                                                HdlValueInt: 0
                            HdlStmAssign
                                HdlValueId: w_cpu_info
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: pre_dbg_special
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 23
                            HdlStmAssign
                                HdlValueId: gie
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: pre_dbg_special
                                        HdlValueId: CPU_GIE_BIT
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: dbg_reg_sel
                    HdlStmAssign: if_true
                        HdlValueId: pre_dbg_special
                        HdlValueId: r_dbg_reg
                    list: elifs
                    HdlStmAssign: if_false
                        HdlValueId: pre_dbg_reg
                        HdlValueId: r_dbg_reg
            HdlStmAssign
                HdlValueId: r_dbg_reg
                HdlValueId: o_dbg_reg

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -3086,9 +3235,9 @@ module	zipcore #(
 	else if (!r_halted || (wr_reg_ce && wr_reg_id[3:1] == 3'h7))
 		r_dbg_stall <= 1'b1;
 	else
-		r_dbg_stall <= (i_dbg_we && !o_dbg_stall);
+		r_dbg_stall <= (OPT_DBGPORT && i_dbg_we && !o_dbg_stall);
 
-	assign	o_dbg_stall = !r_halted || r_dbg_stall;
+	assign	o_dbg_stall = OPT_DBGPORT && (!r_halted || r_dbg_stall);
 	// }}}
 	// }}}
 

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@ to 
    INS HdlOp@@NEG_LOG to 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: OPT_DBGPORT
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_dbg_reg
            HdlIdDef: unused_dbgport
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: AND_UNARY
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueInt: 0
                                        HdlValueId: i_dbg_rreg
                                HdlValueId: debug_pc
                HdlValueId: unused_dbgport
    INS list@@elifs to 
    INS tuple@@ to elifs
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_DISTRIBUTED_REGS to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: dbg_reg_sel
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlIdDef: pre_dbg_special
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: EQ
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_dbg_rreg
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 3
                                            HdlValueInt: 1
                            HdlValueInt: 7
                    HdlValueId: dbg_reg_sel
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: regset
                            HdlValueId: i_dbg_rreg
                    HdlValueId: pre_dbg_reg
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_dbg_rreg
                            HdlValueInt: 0
                    HdlStmAssign: if_true
                        HdlValueId: debug_pc
                        HdlValueId: pre_dbg_special
                    list: elifs
                    HdlStmBlock: SEQ
                        list: body
                            HdlStmAssign
                                HdlOp: TERNARY
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_dbg_rreg
                                                HdlValueInt: 4
                                        HdlValueId: w_uflags
                                        HdlValueId: w_iflags
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: pre_dbg_special
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 15
                                                HdlValueInt: 0
                            HdlStmAssign
                                HdlValueId: w_cpu_info
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: pre_dbg_special
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 23
                            HdlStmAssign
                                HdlValueId: gie
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: pre_dbg_special
                                        HdlValueId: CPU_GIE_BIT
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: dbg_reg_sel
                    HdlStmAssign: if_true
                        HdlValueId: pre_dbg_special
                        HdlValueId: r_dbg_reg
                    list: elifs
                    HdlStmAssign: if_false
                        HdlValueId: pre_dbg_reg
                        HdlValueId: r_dbg_reg
            HdlStmAssign
                HdlValueId: r_dbg_reg
                HdlValueId: o_dbg_reg


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -3116,23 +3265,27 @@ module	zipcore #(
 	//
 	//
 
-	reg		debug_trigger, dbg_mem_we;
-	wire	[31:0]	debug_flags;
-	reg	[2:0]	dbgsrc;
-	// Verilator lint_off UNUSED
-	wire	[27:0]	dbg_pc, dbg_wb_addr;
-	// Verilator lint_on  UNUSED
+	generate if (OPT_TRACE_PORT)
+	begin : GEN_DEBUG_PORT
 
+		reg	[31:0]	r_debug;
+		reg		debug_trigger, dbg_mem_we;
+		wire	[31:0]	debug_flags;
+		reg	[2:0]	dbgsrc;
+		// Verilator lint_off UNUSED
+		wire	[27:0]	dbg_pc, dbg_wb_addr;
+		// Verilator lint_on  UNUSED
 
-	initial	debug_trigger = 1'b0;
-	always @(posedge i_clk)
-		debug_trigger <= (!i_halt)&&(o_break);
 
-	always @(posedge i_clk)
-	if (o_mem_ce)
-		dbg_mem_we <= o_mem_op[0];
+		initial	debug_trigger = 1'b0;
+		always @(posedge i_clk)
+			debug_trigger <= (!i_halt)&&(o_break);
 
-	assign debug_flags = { debug_trigger, 3'b101,
+		always @(posedge i_clk)
+		if (o_mem_ce)
+			dbg_mem_we <= o_mem_op[0];
+
+		assign debug_flags = { debug_trigger, 3'b101,
 				master_ce, i_halt, o_break, sleep,
 				gie, ibus_err_flag, trap, ill_err_i,
 				o_clear_icache, i_pf_valid, i_pf_illegal, dcd_ce,

ParseResult:
INS HdlStmIf@@ to objs
HdlStmIf
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: OPT_USERMODE
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: unused_usermode
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: AND_UNARY
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: alu_reg
                                                        HdlValueInt: 4
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_mem_wreg
                                                HdlValueInt: 4
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_dbg_rreg
                                        HdlValueInt: 4
                HdlValueId: unused_usermode
    list: elifs

UPD HdlStmIf@@ to 
    INS HdlOp@@NEG_LOG to 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: OPT_DBGPORT
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_dbg_reg
            HdlIdDef: unused_dbgport
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: AND_UNARY
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueInt: 0
                                        HdlValueId: i_dbg_rreg
                                HdlValueId: debug_pc
                HdlValueId: unused_dbgport
    INS list@@elifs to 
    INS tuple@@ to elifs
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS tuple@@ to elifs

UPD HdlStmAssign@@ to 
    INS HdlValueId@@w_iflags to 


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -3191,13 +3353,17 @@ module	zipcore #(
 		op_Rcc, op_pipe, op_lock, i_mem_pipe_stalled, prelock_stall,
 		dcd_F, w_clken };
 	generate if (AW+2 < 32)
-	begin
-		wire	[31:(AW+2)] generic_ignore;
-		assign generic_ignore = wr_spreg_vl[31:(AW+2)];
+	begin : UNUSED_AW
+		wire	generic_ignore;
+		assign	generic_ignore = &{ 1'b0, wr_spreg_vl[31:(AW+2)] };
+	end if (!OPT_USERMODE)
+	begin : UNUSED_USERMODE
+		wire	unused_usermode;
+		assign	unused_usermode = &{ 1'b0, alu_reg[4], i_mem_wreg[4],
+				i_dbg_rreg[4] };
 	end endgenerate
 	// verilator lint_on  UNUSED
 	// }}}
-
 ////////////////////////////////////////////////////////////////////////////////
 ////////////////////////////////////////////////////////////////////////////////
 ////////////////////////////////////////////////////////////////////////////////

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_TRACE_PORT to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ


CommitId: 99cb25bc62b40a93f460cd60a890c68cb38b74d8
Fixed a bug in zipmmu
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -478,7 +478,7 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 			r_valid <= (!miss_pending)&&((last_page_valid)
 					&&(r_addr[(DW-3):(DW-2-VAW)]== last_vpage)
 					&&((!last_ro)||(!r_we)));
-			o_addr <= { last_ppage , i_wbm_addr[(LGPGSZW-1):0] };
+			o_addr <= { last_ppage , r_addr[(LGPGSZW-1):0] };
 			r_pending<= (r_pending);
 			s_pending <=(r_pending)&&(!gie_context);
 		end

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@i_wbm_addr to r_addr


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -198,13 +209,12 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 			o_wb_stb_lcl <= 1'b0;
 			cyc <= 1'b0;
 		end
-	end else if (i_pipe_stb) // New memory operation
-	begin // Grab the wishbone
-		r_wb_cyc_lcl <= lcl_stb;
-		r_wb_cyc_gbl <= gbl_stb;
-		o_wb_stb_lcl <= lcl_stb;
-		o_wb_stb_gbl <= gbl_stb;
-		cyc <= (!misaligned);
+
+		if (!WITH_LOCAL_BUS)
+		begin
+			r_wb_cyc_lcl <= 1'b0;
+			o_wb_stb_lcl <= 1'b0;
+		end
 	end
 	// }}}
 

ParseResult:
UPD HdlStmProcess@@ to 
    INS HdlStmBlock@@SEQ to 

UPD HdlStmIf@@body to body
    UPD list@@elifs to body
    MOV list@@elifs to body
    list: elifs
        tuple
            HdlValueId: cyc
            HdlStmBlock: SEQ
                list: body
                    HdlStmIf
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: NEG_LOG
                                                    list: ops
                                                        HdlValueId: i_wb_stall
                                                HdlOp: NEG_LOG
                                                    list: ops
                                                        HdlValueId: i_pipe_stb
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: misaligned
                                HdlValueId: i_wb_err
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: o_wb_stb_gbl
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: o_wb_stb_lcl
                        list: elifs
                    HdlStmIf
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: i_wb_ack
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: nxt_rdaddr
                                                        HdlValueId: wraddr
                                        HdlOp: OR_LOG
                                            list: ops
                                                HdlOp: NEG_LOG
                                                    list: ops
                                                        HdlValueId: i_pipe_stb
                                                HdlValueId: misaligned
                                HdlValueId: i_wb_err
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: r_wb_cyc_gbl
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: r_wb_cyc_lcl
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: o_wb_stb_gbl
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: o_wb_stb_lcl
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: cyc
                        list: elifs
        tuple
            HdlValueId: i_pipe_stb
            HdlStmBlock: SEQ
                list: body
                    HdlStmAssign
                        HdlValueId: lcl_stb
                        HdlValueId: r_wb_cyc_lcl
                    HdlStmAssign
                        HdlValueId: gbl_stb
                        HdlValueId: r_wb_cyc_gbl
                    HdlStmAssign
                        HdlValueId: lcl_stb
                        HdlValueId: o_wb_stb_lcl
                    HdlStmAssign
                        HdlValueId: gbl_stb
                        HdlValueId: o_wb_stb_gbl
                    HdlStmAssign
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: misaligned
                        HdlValueId: cyc
    MOV HdlValueId@@cyc to 
    HdlValueId: cyc
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: i_wb_stall
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: i_pipe_stb
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: misaligned
                        HdlValueId: i_wb_err
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: o_wb_stb_gbl
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: o_wb_stb_lcl
                list: elifs
            HdlStmIf
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: i_wb_ack
                                        HdlOp: EQ
                                            list: ops
                                                HdlValueId: nxt_rdaddr
                                                HdlValueId: wraddr
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: i_pipe_stb
                                        HdlValueId: misaligned
                        HdlValueId: i_wb_err
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: r_wb_cyc_gbl
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: r_wb_cyc_lcl
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: o_wb_stb_gbl
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: o_wb_stb_lcl
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: cyc
                list: elifs
    MOV HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: r_wb_cyc_gbl
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: r_wb_cyc_lcl
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_wb_stb_gbl
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_wb_stb_lcl
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: cyc
    MOV tuple@@ to elifs
    tuple
        HdlValueId: i_pipe_stb
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlValueId: lcl_stb
                    HdlValueId: r_wb_cyc_lcl
                HdlStmAssign
                    HdlValueId: gbl_stb
                    HdlValueId: r_wb_cyc_gbl
                HdlStmAssign
                    HdlValueId: lcl_stb
                    HdlValueId: o_wb_stb_lcl
                HdlStmAssign
                    HdlValueId: gbl_stb
                    HdlValueId: o_wb_stb_gbl
                HdlStmAssign
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: misaligned
                    HdlValueId: cyc
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs

UPD HdlStmIf@@body to 

MOV HdlStmIf@@body to 
HdlStmIf: body
    HdlValueId: i_reset
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: r_wb_cyc_gbl
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: r_wb_cyc_lcl
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_wb_stb_gbl
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_wb_stb_lcl
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: cyc
    list: elifs
        tuple
            HdlValueId: cyc
            HdlStmBlock: SEQ
                list: body
                    HdlStmIf
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: NEG_LOG
                                                    list: ops
                                                        HdlValueId: i_wb_stall
                                                HdlOp: NEG_LOG
                                                    list: ops
                                                        HdlValueId: i_pipe_stb
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: misaligned
                                HdlValueId: i_wb_err
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: o_wb_stb_gbl
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: o_wb_stb_lcl
                        list: elifs
                    HdlStmIf
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: i_wb_ack
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: nxt_rdaddr
                                                        HdlValueId: wraddr
                                        HdlOp: OR_LOG
                                            list: ops
                                                HdlOp: NEG_LOG
                                                    list: ops
                                                        HdlValueId: i_pipe_stb
                                                HdlValueId: misaligned
                                HdlValueId: i_wb_err
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: r_wb_cyc_gbl
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: r_wb_cyc_lcl
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: o_wb_stb_gbl
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: o_wb_stb_lcl
                                HdlStmAssign
                                    HdlValueInt: 0
                                    HdlValueId: cyc
                        list: elifs
        tuple
            HdlValueId: i_pipe_stb
            HdlStmBlock: SEQ
                list: body
                    HdlStmAssign
                        HdlValueId: lcl_stb
                        HdlValueId: r_wb_cyc_lcl
                    HdlStmAssign
                        HdlValueId: gbl_stb
                        HdlValueId: r_wb_cyc_gbl
                    HdlStmAssign
                        HdlValueId: lcl_stb
                        HdlValueId: o_wb_stb_lcl
                    HdlStmAssign
                        HdlValueId: gbl_stb
                        HdlValueId: o_wb_stb_gbl
                    HdlStmAssign
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: misaligned
                        HdlValueId: cyc

INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: WITH_LOCAL_BUS
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: r_wb_cyc_lcl
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_wb_stb_lcl
    list: elifs

UPD HdlStmIf@@ to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    INS HdlValueId@@i_reset to 
    INS list@@elifs to 


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -325,14 +335,20 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 		initial	lock_gbl = 1'b0;
 		initial	lock_lcl = 1'b0;
 		always @(posedge i_clk)
-		if ((i_reset)||((i_wb_err)&&(cyc))
-			||((i_pipe_stb)&&(misaligned)))
 		begin
-			lock_gbl <= 1'b0;
-			lock_lcl <= 1'b0;
-		end else begin
-			lock_gbl <= (i_lock)&&((r_wb_cyc_gbl)||(lock_gbl));
-			lock_lcl <= (i_lock)&&((r_wb_cyc_lcl)||(lock_lcl));
+			lock_gbl <= r_wb_cyc_gbl || lock_gbl;
+			lock_lcl <= r_wb_cyc_lcl || lock_lcl;
+
+			if (i_reset || (i_wb_err && cyc)
+				|| (i_pipe_stb && misaligned)
+				|| !i_lock)
+			begin
+				lock_gbl <= 1'b0;
+				lock_lcl <= 1'b0;
+			end
+
+			if (!WITH_LOCAL_BUS)
+				lock_lcl <= 1'b0;
 		end
 
 		assign	o_wb_cyc_gbl = (r_wb_cyc_gbl)||(lock_gbl);
ParseResult:
UPD HdlStmProcess@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_lock
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: r_wb_cyc_gbl
                    HdlValueId: lock_gbl
    HdlValueId: lock_gbl

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_lock
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: r_wb_cyc_lcl
                    HdlValueId: lock_lcl
    HdlValueId: lock_lcl

UPD HdlStmIf@@body to 

MOV HdlStmIf@@body to 
HdlStmIf: body
    HdlOp: OR_LOG
        list: ops
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: i_reset
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: i_wb_err
                            HdlValueId: cyc
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: i_pipe_stb
                    HdlValueId: misaligned
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: lock_gbl
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: lock_lcl
    list: elifs
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: i_lock
                        HdlOp: OR_LOG
                            list: ops
                                HdlValueId: r_wb_cyc_gbl
                                HdlValueId: lock_gbl
                HdlValueId: lock_gbl
            HdlStmAssign
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: i_lock
                        HdlOp: OR_LOG
                            list: ops
                                HdlValueId: r_wb_cyc_lcl
                                HdlValueId: lock_lcl
                HdlValueId: lock_lcl

INS HdlStmIf@@ to body
HdlStmIf
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: WITH_LOCAL_BUS
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: lock_lcl
    list: elifs

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: r_wb_cyc_gbl
                HdlValueId: lock_gbl
        DEL HdlValueId@@i_lock from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: r_wb_cyc_lcl
                HdlValueId: lock_lcl
        DEL HdlValueId@@i_lock from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 

UPD HdlStmIf@@ to 
    INS HdlOp@@OR_LOG to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: i_lock

UPD HdlStmIf@@body to body
    MOV HdlOp@@OR_LOG to body
    HdlOp: OR_LOG
        list: ops
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: i_reset
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: i_wb_err
                            HdlValueId: cyc
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: i_pipe_stb
                    HdlValueId: misaligned
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from body


CommitId: 617962e5b5650b91cf9ddd5eee48549211d0f250
Removed the debug wires from the double-fetch core
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -62,7 +62,7 @@ module	dblfetch(i_clk, i_rst, i_new_pc, i_clear_cache,
 			i_stall_n, i_pc, o_i, o_pc, o_v,
 		o_wb_cyc, o_wb_stb, o_wb_we, o_wb_addr, o_wb_data,
 			i_wb_ack, i_wb_stall, i_wb_err, i_wb_data,
-		o_illegal, o_dbg);
+		o_illegal);
 	parameter		ADDRESS_WIDTH=32, AUX_WIDTH = 1;
 	localparam		AW=ADDRESS_WIDTH;
 	input				i_clk, i_rst, i_new_pc, i_clear_cache,

ParseResult:
DEL HdlIdDef@@o_dbg from ports
HdlIdDef: o_dbg
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT


CommitId: 617962e5b5650b91cf9ddd5eee48549211d0f250
Removed the debug wires from the double-fetch core
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -230,5 +229,4 @@ module	dblfetch(i_clk, i_rst, i_new_pc, i_clear_cache,
 		else if ((!o_wb_cyc)&&((i_new_pc)||(invalid_bus_cycle)))
 			o_illegal <= 1'b0;
 
-	assign	o_dbg = { last_stb, last_ack };
 endmodule
ParseResult:
DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: CONCAT
        list: ops
            HdlValueId: last_stb
            HdlValueId: last_ack
    HdlValueId: o_dbg


CommitId: 136697cb2922a1f0b42d0071064a18c8ab4df451
FIX: Named generate blocks
--- a/rtl/core/memops.v
+++ b/rtl/core/memops.v
@@ -133,9 +133,9 @@ module	memops #(
 		endcase
 
 		assign	misaligned = r_misaligned;
-	end else
+	end else begin : NO_MISALIGNMENT_ERR
 		assign	misaligned = 1'b0;
-	endgenerate
+	end endgenerate
 	// }}}
 
 	// lcl_stb, gbl_stb

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmAssign@@if_false to 

MOV HdlStmAssign@@if_false to 
HdlStmAssign: if_false
    HdlValueInt: 0
    HdlValueId: misaligned


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -79,7 +79,8 @@ module	mpyop(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result, o_
 		assign	mpy_unused = { i_clk, i_reset, i_stb, i_op, i_a, i_b };
 		// verilator lint_on  UNUSED
 `endif
-	end else if (IMPLEMENT_MPY == 1)
+	end else begin : IMPY
+	if (IMPLEMENT_MPY == 1)
 	begin : MPY1CK // Our single clock option (no extra clocks)
 
 		wire	signed	[63:0]	w_mpy_a_input, w_mpy_b_input;

ParseResult:
UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 

UPD HdlStmIf@@ to 
    UPD list@@elifs to body
    MOV list@@elifs to 
    list: elifs
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 1
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: w_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: w_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 32
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_a
                                                        HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_op
                                                        HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_a
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 0
                        HdlValueId: w_mpy_a_input
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 32
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_b
                                                        HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_op
                                                        HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_b
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 0
                        HdlValueId: w_mpy_b_input
                    HdlStmAssign
                        HdlOp: MUL
                            list: ops
                                HdlValueId: w_mpy_a_input
                                HdlValueId: w_mpy_b_input
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_valid
                    HdlStmProcess
                        list: sensitivity
                            HdlAll
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: o_hi
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 2
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: r_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlValueInt: 32
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_a
                                                                    HdlValueInt: 31
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_op
                                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_a
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 0
                                    HdlValueId: r_mpy_a_input
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlValueInt: 32
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_b
                                                                    HdlValueInt: 31
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_op
                                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_b
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 0
                                    HdlValueId: r_mpy_b_input
                    HdlStmAssign
                        HdlOp: MUL
                            list: ops
                                HdlValueId: r_mpy_a_input
                                HdlValueId: r_mpy_b_input
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlIdDef: mpypipe
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        HdlStmBlock: SEQ
                            list: body
                                HdlOp: ASSIGN
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlStmWait:
                                    list: val
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueId: i_stb
                                HdlValueId: mpypipe
                    HdlStmAssign
                        HdlValueId: mpypipe
                        HdlValueId: o_valid
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 3
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: r_smpy_result
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_umpy_result
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: mpypipe
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: r_sgn
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        HdlStmBlock: SEQ
                            list: body
                                HdlOp: ASSIGN
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlStmWait:
                                    list: val
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmAssign: if_false
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                        HdlValueId: i_stb
                                HdlValueId: mpypipe
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                                    HdlValueId: r_mpy_a_input
                                HdlStmAssign
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                                    HdlValueId: r_mpy_b_input
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_sgn
                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_op
                                                    HdlValueInt: 0
                                    HdlValueId: r_sgn
                    HdlIdDef: u_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: u_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlStmAssign
                        HdlValueId: r_mpy_a_input
                        HdlValueId: u_mpy_a_input
                    HdlStmAssign
                        HdlValueId: r_mpy_b_input
                        HdlValueId: u_mpy_b_input
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmAssign: body
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: r_mpy_a_input
                                    HdlValueId: r_mpy_b_input
                            HdlValueId: r_smpy_result
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmAssign: body
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: u_mpy_a_input
                                    HdlValueId: u_mpy_b_input
                            HdlValueId: r_umpy_result
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
                    HdlStmAssign
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlStmAssign
                        HdlOp: TERNARY
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: r_sgn
                                        HdlValueInt: 1
                                HdlValueId: r_smpy_result
                                HdlValueId: r_umpy_result
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 1
                        HdlValueId: o_valid
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 1
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: w_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: w_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_a
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_a
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: w_mpy_a_input
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_b
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_b
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: w_mpy_b_input
            HdlStmAssign
                HdlOp: MUL
                    list: ops
                        HdlValueId: w_mpy_a_input
                        HdlValueId: w_mpy_b_input
                HdlValueId: o_result
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_valid
            HdlStmProcess
                list: sensitivity
                    HdlAll
                HdlOp: ASSIGN
                    list: ops
                        HdlValueId: o_hi
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 2
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlValueInt: 32
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_a
                                                            HdlValueInt: 31
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_op
                                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlValueInt: 32
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_b
                                                            HdlValueInt: 31
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_op
                                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
            HdlStmAssign
                HdlOp: MUL
                    list: ops
                        HdlValueId: r_mpy_a_input
                        HdlValueId: r_mpy_b_input
                HdlValueId: o_result
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_busy
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlValueId: mpypipe
                    list: elifs
                    HdlStmAssign: if_false
                        HdlValueId: i_stb
                        HdlValueId: mpypipe
            HdlStmAssign
                HdlValueId: mpypipe
                HdlValueId: o_valid
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_stb
                    HdlStmAssign: if_true
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
                        HdlValueId: o_hi
                    list: elifs
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 3
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_smpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_umpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_sgn
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlValueId: mpypipe
                    list: elifs
                    HdlStmAssign: if_false
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlValueId: i_stb
                        HdlValueId: mpypipe
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_a
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_b
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_sgn
                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_op
                                            HdlValueInt: 0
                            HdlValueId: r_sgn
            HdlIdDef: u_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: u_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlValueId: r_mpy_a_input
                HdlValueId: u_mpy_a_input
            HdlStmAssign
                HdlValueId: r_mpy_b_input
                HdlValueId: u_mpy_b_input
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: MUL
                        list: ops
                            HdlValueId: r_mpy_a_input
                            HdlValueId: r_mpy_b_input
                    HdlValueId: r_smpy_result
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: MUL
                        list: ops
                            HdlValueId: u_mpy_a_input
                            HdlValueId: u_mpy_b_input
                    HdlValueId: r_umpy_result
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_stb
                    HdlStmAssign: if_true
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
                        HdlValueId: o_hi
                    list: elifs
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlOp: TERNARY
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: r_sgn
                                HdlValueInt: 1
                        HdlValueId: r_smpy_result
                        HdlValueId: r_umpy_result
                HdlValueId: o_result
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 1
                HdlValueId: o_valid
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_mpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_signed
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 2
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlValueId: i_stb
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 1
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 1
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 2
                        HdlStmIf
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: NEG
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_a
                                                                HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_a
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 30
                                                                HdlValueInt: 0
                                        HdlValueId: r_mpy_a_input
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: NEG
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_b
                                                                HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_b
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 30
                                                                HdlValueInt: 0
                                        HdlValueId: r_mpy_b_input
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_a
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 0
                                        HdlValueId: r_mpy_a_input
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_b
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 0
                                        HdlValueId: r_mpy_b_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
                            HdlValueId: r_mpy_signed
                        HdlStmIf
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
            HdlStmAssign
                HdlOp: OR_UNARY
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 2
                HdlValueId: o_valid
            HdlIdDef: pp_f
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_l
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_oi
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 32
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_s
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 32
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: MUL
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_a_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 16
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_b_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 16
                            HdlValueId: pp_f
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_a_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 16
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_b_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 15
                                                            HdlValueInt: 0
                                    HdlOp: MUL
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_a_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 15
                                                            HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_b_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 16
                            HdlValueId: pp_oi
                        HdlStmAssign
                            HdlOp: MUL
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_a_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 15
                                                    HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_b_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 15
                                                    HdlValueInt: 0
                            HdlValueId: pp_l
                        HdlStmIf
                            HdlValueId: r_mpy_signed
                            HdlStmAssign: if_true
                                HdlOp: SUB
                                    list: ops
                                        HdlValueInt: 80000000
                                        HdlOp: ADD
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r_mpy_a_input
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 31
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r_mpy_b_input
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 31
                                                                HdlValueInt: 0
                                HdlValueId: pp_s
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: pp_s
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: pp_l
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 15
                                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_mpy_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 15
                                            HdlValueInt: 0
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlOp: ADD
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 00
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: pp_l
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 31
                                                                            HdlValueInt: 16
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 00
                                                            HdlValueId: pp_oi
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueId: pp_s
                                                    HdlValueInt: 00
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlValueId: pp_f
                                            HdlValueInt: 00
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_mpy_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 63
                                            HdlValueInt: 16
            HdlStmAssign
                HdlValueId: r_mpy_result
                HdlValueId: o_result
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -100,7 +101,8 @@ module	mpyop(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result, o_
 		// verilator lint_on  UNUSED
 `endif
 
-	end else if (IMPLEMENT_MPY == 2)
+	end else begin: MPN1
+	if (IMPLEMENT_MPY == 2)
 	begin : MPY2CK // Our two clock option (ALU must pause for 1 clock)
 
 		reg	signed	[63:0]	r_mpy_a_input, r_mpy_b_input;

ParseResult:
UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 

UPD HdlStmIf@@ to 
    UPD list@@elifs to body
    MOV list@@elifs to 
    list: elifs
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 1
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: w_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: w_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 32
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_a
                                                        HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_op
                                                        HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_a
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 0
                        HdlValueId: w_mpy_a_input
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 32
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_b
                                                        HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_op
                                                        HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_b
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 0
                        HdlValueId: w_mpy_b_input
                    HdlStmAssign
                        HdlOp: MUL
                            list: ops
                                HdlValueId: w_mpy_a_input
                                HdlValueId: w_mpy_b_input
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_valid
                    HdlStmProcess
                        list: sensitivity
                            HdlAll
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: o_hi
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 2
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: r_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlValueInt: 32
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_a
                                                                    HdlValueInt: 31
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_op
                                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_a
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 0
                                    HdlValueId: r_mpy_a_input
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlValueInt: 32
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_b
                                                                    HdlValueInt: 31
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_op
                                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_b
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 0
                                    HdlValueId: r_mpy_b_input
                    HdlStmAssign
                        HdlOp: MUL
                            list: ops
                                HdlValueId: r_mpy_a_input
                                HdlValueId: r_mpy_b_input
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlIdDef: mpypipe
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        HdlStmBlock: SEQ
                            list: body
                                HdlOp: ASSIGN
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlStmWait:
                                    list: val
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueId: i_stb
                                HdlValueId: mpypipe
                    HdlStmAssign
                        HdlValueId: mpypipe
                        HdlValueId: o_valid
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 3
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: r_smpy_result
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_umpy_result
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: mpypipe
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: r_sgn
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        HdlStmBlock: SEQ
                            list: body
                                HdlOp: ASSIGN
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlStmWait:
                                    list: val
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmAssign: if_false
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                        HdlValueId: i_stb
                                HdlValueId: mpypipe
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                                    HdlValueId: r_mpy_a_input
                                HdlStmAssign
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                                    HdlValueId: r_mpy_b_input
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_sgn
                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_op
                                                    HdlValueInt: 0
                                    HdlValueId: r_sgn
                    HdlIdDef: u_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: u_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlStmAssign
                        HdlValueId: r_mpy_a_input
                        HdlValueId: u_mpy_a_input
                    HdlStmAssign
                        HdlValueId: r_mpy_b_input
                        HdlValueId: u_mpy_b_input
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmAssign: body
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: r_mpy_a_input
                                    HdlValueId: r_mpy_b_input
                            HdlValueId: r_smpy_result
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmAssign: body
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: u_mpy_a_input
                                    HdlValueId: u_mpy_b_input
                            HdlValueId: r_umpy_result
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
                    HdlStmAssign
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlStmAssign
                        HdlOp: TERNARY
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: r_sgn
                                        HdlValueInt: 1
                                HdlValueId: r_smpy_result
                                HdlValueId: r_umpy_result
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 1
                        HdlValueId: o_valid
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 1
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: w_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: w_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_a
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_a
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: w_mpy_a_input
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_b
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_b
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: w_mpy_b_input
            HdlStmAssign
                HdlOp: MUL
                    list: ops
                        HdlValueId: w_mpy_a_input
                        HdlValueId: w_mpy_b_input
                HdlValueId: o_result
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_valid
            HdlStmProcess
                list: sensitivity
                    HdlAll
                HdlOp: ASSIGN
                    list: ops
                        HdlValueId: o_hi
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 2
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlValueInt: 32
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_a
                                                            HdlValueInt: 31
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_op
                                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlValueInt: 32
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_b
                                                            HdlValueInt: 31
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_op
                                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
            HdlStmAssign
                HdlOp: MUL
                    list: ops
                        HdlValueId: r_mpy_a_input
                        HdlValueId: r_mpy_b_input
                HdlValueId: o_result
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_busy
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlValueId: mpypipe
                    list: elifs
                    HdlStmAssign: if_false
                        HdlValueId: i_stb
                        HdlValueId: mpypipe
            HdlStmAssign
                HdlValueId: mpypipe
                HdlValueId: o_valid
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_stb
                    HdlStmAssign: if_true
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
                        HdlValueId: o_hi
                    list: elifs
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 3
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_smpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_umpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_sgn
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlValueId: mpypipe
                    list: elifs
                    HdlStmAssign: if_false
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlValueId: i_stb
                        HdlValueId: mpypipe
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_a
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_b
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_sgn
                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_op
                                            HdlValueInt: 0
                            HdlValueId: r_sgn
            HdlIdDef: u_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: u_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlValueId: r_mpy_a_input
                HdlValueId: u_mpy_a_input
            HdlStmAssign
                HdlValueId: r_mpy_b_input
                HdlValueId: u_mpy_b_input
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: MUL
                        list: ops
                            HdlValueId: r_mpy_a_input
                            HdlValueId: r_mpy_b_input
                    HdlValueId: r_smpy_result
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: MUL
                        list: ops
                            HdlValueId: u_mpy_a_input
                            HdlValueId: u_mpy_b_input
                    HdlValueId: r_umpy_result
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_stb
                    HdlStmAssign: if_true
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
                        HdlValueId: o_hi
                    list: elifs
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlOp: TERNARY
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: r_sgn
                                HdlValueInt: 1
                        HdlValueId: r_smpy_result
                        HdlValueId: r_umpy_result
                HdlValueId: o_result
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 1
                HdlValueId: o_valid
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_mpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_signed
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 2
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlValueId: i_stb
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 1
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 1
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 2
                        HdlStmIf
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: NEG
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_a
                                                                HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_a
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 30
                                                                HdlValueInt: 0
                                        HdlValueId: r_mpy_a_input
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: NEG
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_b
                                                                HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_b
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 30
                                                                HdlValueInt: 0
                                        HdlValueId: r_mpy_b_input
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_a
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 0
                                        HdlValueId: r_mpy_a_input
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_b
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 0
                                        HdlValueId: r_mpy_b_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
                            HdlValueId: r_mpy_signed
                        HdlStmIf
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
            HdlStmAssign
                HdlOp: OR_UNARY
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 2
                HdlValueId: o_valid
            HdlIdDef: pp_f
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_l
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_oi
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 32
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_s
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 32
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: MUL
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_a_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 16
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_b_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 16
                            HdlValueId: pp_f
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_a_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 16
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_b_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 15
                                                            HdlValueInt: 0
                                    HdlOp: MUL
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_a_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 15
                                                            HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_b_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 16
                            HdlValueId: pp_oi
                        HdlStmAssign
                            HdlOp: MUL
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_a_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 15
                                                    HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_b_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 15
                                                    HdlValueInt: 0
                            HdlValueId: pp_l
                        HdlStmIf
                            HdlValueId: r_mpy_signed
                            HdlStmAssign: if_true
                                HdlOp: SUB
                                    list: ops
                                        HdlValueInt: 80000000
                                        HdlOp: ADD
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r_mpy_a_input
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 31
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r_mpy_b_input
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 31
                                                                HdlValueInt: 0
                                HdlValueId: pp_s
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: pp_s
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: pp_l
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 15
                                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_mpy_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 15
                                            HdlValueInt: 0
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlOp: ADD
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 00
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: pp_l
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 31
                                                                            HdlValueInt: 16
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 00
                                                            HdlValueId: pp_oi
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueId: pp_s
                                                    HdlValueInt: 00
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlValueId: pp_f
                                            HdlValueInt: 00
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_mpy_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 63
                                            HdlValueInt: 16
            HdlStmAssign
                HdlValueId: r_mpy_result
                HdlValueId: o_result
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -126,7 +128,8 @@ module	mpyop(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result, o_
 		if (i_stb)
 			o_hi  <= i_op[1];
 
-	end else if (IMPLEMENT_MPY == 3)
+	end else begin : MPN2
+	if (IMPLEMENT_MPY == 3)
 	begin : MPY3CK // Our three clock option (ALU pauses for 2 clocks)
 		reg	signed	[63:0]	r_smpy_result;
 		reg		[63:0]	r_umpy_result;

ParseResult:
UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 

UPD HdlStmIf@@ to 
    UPD list@@elifs to body
    MOV list@@elifs to 
    list: elifs
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 1
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: w_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: w_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 32
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_a
                                                        HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_op
                                                        HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_a
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 0
                        HdlValueId: w_mpy_a_input
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: REPL_CONCAT
                                    list: ops
                                        HdlValueInt: 32
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_b
                                                        HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_op
                                                        HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_b
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 31
                                                HdlValueInt: 0
                        HdlValueId: w_mpy_b_input
                    HdlStmAssign
                        HdlOp: MUL
                            list: ops
                                HdlValueId: w_mpy_a_input
                                HdlValueId: w_mpy_b_input
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_valid
                    HdlStmProcess
                        list: sensitivity
                            HdlAll
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: o_hi
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 2
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: r_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlValueInt: 32
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_a
                                                                    HdlValueInt: 31
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_op
                                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_a
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 0
                                    HdlValueId: r_mpy_a_input
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: REPL_CONCAT
                                                list: ops
                                                    HdlValueInt: 32
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_b
                                                                    HdlValueInt: 31
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_op
                                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_b
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 0
                                    HdlValueId: r_mpy_b_input
                    HdlStmAssign
                        HdlOp: MUL
                            list: ops
                                HdlValueId: r_mpy_a_input
                                HdlValueId: r_mpy_b_input
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlIdDef: mpypipe
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        HdlStmBlock: SEQ
                            list: body
                                HdlOp: ASSIGN
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlStmWait:
                                    list: val
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueId: i_stb
                                HdlValueId: mpypipe
                    HdlStmAssign
                        HdlValueId: mpypipe
                        HdlValueId: o_valid
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
        tuple
            HdlOp: EQ
                list: ops
                    HdlValueId: IMPLEMENT_MPY
                    HdlValueInt: 3
            HdlStmBlock: SEQ
                list: body
                    HdlIdDef: r_smpy_result
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_umpy_result
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 63
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: r_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                                HdlValueInt: 1
                        HdlDirection: INTERNAL
                    HdlIdDef: mpypipe
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: r_sgn
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: reg
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlStmProcess
                        HdlStmBlock: SEQ
                            list: body
                                HdlOp: ASSIGN
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlStmWait:
                                    list: val
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmAssign: if_false
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                        HdlValueId: i_stb
                                HdlValueId: mpypipe
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmBlock: SEQ
                            list: body
                                HdlStmAssign
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                                    HdlValueId: r_mpy_a_input
                                HdlStmAssign
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                                    HdlValueId: r_mpy_b_input
                                HdlStmAssign
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_sgn
                                                    HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_op
                                                    HdlValueInt: 0
                                    HdlValueId: r_sgn
                    HdlIdDef: u_mpy_a_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlIdDef: u_mpy_b_input
                        HdlOp: PARAMETRIZATION
                            list: ops
                                HdlValueId: wire
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                        HdlDirection: INTERNAL
                    HdlStmAssign
                        HdlValueId: r_mpy_a_input
                        HdlValueId: u_mpy_a_input
                    HdlStmAssign
                        HdlValueId: r_mpy_b_input
                        HdlValueId: u_mpy_b_input
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmAssign: body
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: r_mpy_a_input
                                    HdlValueId: r_mpy_b_input
                            HdlValueId: r_smpy_result
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmAssign: body
                            HdlOp: MUL
                                list: ops
                                    HdlValueId: u_mpy_a_input
                                    HdlValueId: u_mpy_b_input
                            HdlValueId: r_umpy_result
                    HdlStmProcess
                        list: sensitivity
                            HdlOp: RISING
                                list: ops
                                    HdlValueId: i_clk
                        HdlStmIf: body
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
                    HdlStmAssign
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlValueId: o_busy
                    HdlStmAssign
                        HdlOp: TERNARY
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: r_sgn
                                        HdlValueInt: 1
                                HdlValueId: r_smpy_result
                                HdlValueId: r_umpy_result
                        HdlValueId: o_result
                    HdlStmAssign
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 1
                        HdlValueId: o_valid
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 1
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: w_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: w_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_a
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_a
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: w_mpy_a_input
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_b
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_b
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: w_mpy_b_input
            HdlStmAssign
                HdlOp: MUL
                    list: ops
                        HdlValueId: w_mpy_a_input
                        HdlValueId: w_mpy_b_input
                HdlValueId: o_result
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_valid
            HdlStmProcess
                list: sensitivity
                    HdlAll
                HdlOp: ASSIGN
                    list: ops
                        HdlValueId: o_hi
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 2
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlValueInt: 32
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_a
                                                            HdlValueInt: 31
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_op
                                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_a
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: REPL_CONCAT
                                        list: ops
                                            HdlValueInt: 32
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_b
                                                            HdlValueInt: 31
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_op
                                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_b
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
            HdlStmAssign
                HdlOp: MUL
                    list: ops
                        HdlValueId: r_mpy_a_input
                        HdlValueId: r_mpy_b_input
                HdlValueId: o_result
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_busy
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlValueId: mpypipe
                    list: elifs
                    HdlStmAssign: if_false
                        HdlValueId: i_stb
                        HdlValueId: mpypipe
            HdlStmAssign
                HdlValueId: mpypipe
                HdlValueId: o_valid
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_stb
                    HdlStmAssign: if_true
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
                        HdlValueId: o_hi
                    list: elifs
    MOV HdlOp@@EQ to 
    HdlOp: EQ
        list: ops
            HdlValueId: IMPLEMENT_MPY
            HdlValueInt: 3
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_smpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_umpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                        HdlValueInt: 1
                HdlDirection: INTERNAL
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_sgn
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 0
                        HdlValueId: mpypipe
                    list: elifs
                    HdlStmAssign: if_false
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: mpypipe
                                        HdlValueInt: 0
                                HdlValueId: i_stb
                        HdlValueId: mpypipe
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_a
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_a_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_b
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 31
                                            HdlValueInt: 0
                            HdlValueId: r_mpy_b_input
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_sgn
                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: i_op
                                            HdlValueInt: 0
                            HdlValueId: r_sgn
            HdlIdDef: u_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: u_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: wire
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlValueId: r_mpy_a_input
                HdlValueId: u_mpy_a_input
            HdlStmAssign
                HdlValueId: r_mpy_b_input
                HdlValueId: u_mpy_b_input
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: MUL
                        list: ops
                            HdlValueId: r_mpy_a_input
                            HdlValueId: r_mpy_b_input
                    HdlValueId: r_smpy_result
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmAssign: body
                    HdlOp: MUL
                        list: ops
                            HdlValueId: u_mpy_a_input
                            HdlValueId: u_mpy_b_input
                    HdlValueId: r_umpy_result
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_stb
                    HdlStmAssign: if_true
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 1
                        HdlValueId: o_hi
                    list: elifs
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlOp: TERNARY
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: r_sgn
                                HdlValueInt: 1
                        HdlValueId: r_smpy_result
                        HdlValueId: r_umpy_result
                HdlValueId: o_result
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 1
                HdlValueId: o_valid
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_mpy_result
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_a_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_b_input
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: r_mpy_signed
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlIdDef: mpypipe
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 2
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: mpypipe
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlValueId: i_reset
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: mpypipe
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlValueId: i_stb
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 0
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 1
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 1
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: mpypipe
                                                HdlValueInt: 2
                        HdlStmIf
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: NEG
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_a
                                                                HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_a
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 30
                                                                HdlValueInt: 0
                                        HdlValueId: r_mpy_a_input
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: NEG
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_b
                                                                HdlValueInt: 31
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_b
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 30
                                                                HdlValueInt: 0
                                        HdlValueId: r_mpy_b_input
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_a
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 0
                                        HdlValueId: r_mpy_a_input
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_b
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 31
                                                        HdlValueInt: 0
                                        HdlValueId: r_mpy_b_input
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_op
                                    HdlValueInt: 0
                            HdlValueId: r_mpy_signed
                        HdlStmIf
                            HdlValueId: i_stb
                            HdlStmAssign: if_true
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_op
                                        HdlValueInt: 1
                                HdlValueId: o_hi
                            list: elifs
            HdlStmAssign
                HdlOp: OR_UNARY
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: mpypipe
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 1
                                        HdlValueInt: 0
                HdlValueId: o_busy
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mpypipe
                        HdlValueInt: 2
                HdlValueId: o_valid
            HdlIdDef: pp_f
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_l
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_oi
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 32
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlIdDef: pp_s
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 32
                                HdlValueInt: 0
                HdlDirection: INTERNAL
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: MUL
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_a_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 16
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_b_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 31
                                                    HdlValueInt: 16
                            HdlValueId: pp_f
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_a_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 16
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_b_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 15
                                                            HdlValueInt: 0
                                    HdlOp: MUL
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_a_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 15
                                                            HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: r_mpy_b_input
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 31
                                                            HdlValueInt: 16
                            HdlValueId: pp_oi
                        HdlStmAssign
                            HdlOp: MUL
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_a_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 15
                                                    HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: r_mpy_b_input
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 15
                                                    HdlValueInt: 0
                            HdlValueId: pp_l
                        HdlStmIf
                            HdlValueId: r_mpy_signed
                            HdlStmAssign: if_true
                                HdlOp: SUB
                                    list: ops
                                        HdlValueInt: 80000000
                                        HdlOp: ADD
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r_mpy_a_input
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 31
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r_mpy_b_input
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 31
                                                                HdlValueInt: 0
                                HdlValueId: pp_s
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: pp_s
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: pp_l
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 15
                                            HdlValueInt: 0
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_mpy_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 15
                                            HdlValueInt: 0
                        HdlStmAssign
                            HdlOp: ADD
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlOp: ADD
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 00
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: pp_l
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 31
                                                                            HdlValueInt: 16
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 00
                                                            HdlValueId: pp_oi
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueId: pp_s
                                                    HdlValueInt: 00
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlValueId: pp_f
                                            HdlValueInt: 00
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: r_mpy_result
                                    HdlOp: DOWNTO
                                        list: ops
                                            HdlValueInt: 63
                                            HdlValueInt: 16
            HdlStmAssign
                HdlValueId: r_mpy_result
                HdlValueId: o_result
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS list@@elifs to 


CommitId: d6899f792d8a601a81f58ce2374686abd9eb1339
Fixed the AXI ID WIDTH in AXIOPS
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -113,7 +113,7 @@ module	axiops #(
 		parameter [0:0]		OPT_LOWPOWER = 1'b1,
 		// }}}
 		parameter [3:0]	OPT_QOS = 0,
-		localparam	IW = (C_AXI_ID_WIDTH > 0) ? 1:C_AXI_ID_WIDTH,
+		localparam	IW = (C_AXI_ID_WIDTH > 0) ? C_AXI_ID_WIDTH:1,
 		localparam	AW = C_AXI_ADDR_WIDTH,
 		localparam	DW = C_AXI_DATA_WIDTH,
 		localparam	AXILSB = $clog2(C_AXI_DATA_WIDTH/8)
ParseResult:
UPD HdlIdDef@@IW to IW
    UPD HdlOp@@TERNARY to TERNARY
        INS HdlValueId@@C_AXI_ID_WIDTH to ops

UPD HdlIdDef@@IW to IW
    UPD HdlOp@@TERNARY to TERNARY
        DEL HdlValueId@@C_AXI_ID_WIDTH from ops


CommitId: 1f7f4ebdb67b449b57c60675dd636e5237f79256
FIX: ZipCore divide unit and TB.
--- a/rtl/core/div.v
+++ b/rtl/core/div.v
@@ -290,8 +290,8 @@ module	div #(
 		// absolute value of the dividend
 		if (r_dividend[BW-1])
 		begin
-			r_dividend[2*BW-2:0] <= {(2*BW-1){1'b1}};
-			r_dividend[BW-1:0] <= -r_dividend[BW-1:0];
+			r_dividend[2*BW-2:0] <= {(2*BW-1){1'b0}};
+			r_dividend[BW:0] <= -{ 1'b1, r_dividend[BW-1:0] };
 		end
 	end else if (r_busy)
 	begin
ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@MINUS_UNARY to 
    UPD HdlOp@@MINUS_UNARY to MINUS_UNARY
        INS list@@ops to MINUS_UNARY
        UPD HdlOp@@CONCAT to CONCAT
            INS HdlValueInt@@1 to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
        UPD HdlValueInt@@1 to 0

UPD HdlStmAssign@@ to 
    UPD HdlOp@@MINUS_UNARY to CONCAT
    MOV HdlOp@@MINUS_UNARY to 
    HdlOp: MINUS_UNARY
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: r_dividend
                    HdlOp: DOWNTO
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: BW
                                    HdlValueInt: 1
                            HdlValueInt: 0
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                MOV HdlValueId@@BW to ops
                HdlValueId: BW
                DEL HdlValueInt@@1 from ops
                DEL list@@ops from SUB
            DEL HdlOp@@SUB from ops


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -57,8 +57,9 @@
 `default_nettype	none
 //
 //
-module	prefetch(i_clk, i_reset, i_new_pc, i_clear_cache, i_stalled_n, i_pc,
-			o_insn, o_pc, o_valid, o_illegal,
+module	prefetch(i_clk, i_reset,
+		i_new_pc, i_clear_cache, i_ready, i_pc,
+			o_valid, o_illegal, o_insn, o_pc,
 		o_wb_cyc, o_wb_stb, o_wb_we, o_wb_addr, o_wb_data,
 			i_wb_stall, i_wb_ack, i_wb_err, i_wb_data);
 	parameter		ADDRESS_WIDTH=30, DATA_WIDTH=32;

ParseResult:
MOV HdlIdDef@@o_insn to ports
HdlIdDef: o_insn
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

MOV HdlIdDef@@o_pc to ports
HdlIdDef: o_pc
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

UPD HdlIdDef@@i_stalled_n to i_ready


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -108,7 +109,7 @@ module	prefetch(i_clk, i_reset, i_new_pc, i_clear_cache, i_stalled_n, i_pc,
 			// Start if the last instruction output was
 			// accepted, *and* it wasn't a bus error
 			// response
-			((i_stalled_n)&&(!o_illegal))
+			((i_ready)&&(!o_illegal))
 			// Start if the last bus result ended up
 			// invalid
 			||(invalid)

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@AND_LOG to AND_LOG
                    UPD HdlValueId@@i_stalled_n to i_ready


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -163,7 +164,7 @@ module	prefetch(i_clk, i_reset, i_new_pc, i_clear_cache, i_stalled_n, i_pc,
 	always @(posedge i_clk)
 	if (i_new_pc)
 		o_wb_addr  <= i_pc[AW+1:2];
-	else if ((o_valid)&&(i_stalled_n)&&(!o_illegal))
+	else if ((o_valid)&&(i_ready)&&(!o_illegal))
 		o_wb_addr  <= o_wb_addr + 1'b1;
 
 	// The instruction returned is given by the data returned from the bus.

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@i_stalled_n to i_ready


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -200,7 +201,7 @@ module	prefetch(i_clk, i_reset, i_new_pc, i_clear_cache, i_stalled_n, i_pc,
 		//
 		o_valid   <= 1'b1;
 		o_illegal <= ( i_wb_err);
-	end else if (i_stalled_n)
+	end else if (i_ready)
 	begin
 		// Once the CPU accepts any result we produce, clear
 		// the valid flag, lest we send two identical

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlValueId@@i_stalled_n to i_ready


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -213,7 +214,7 @@ module	prefetch(i_clk, i_reset, i_new_pc, i_clear_cache, i_stalled_n, i_pc,
 		// is given to us, via i_new_pc, or we are asked
 		//  to check again via i_clear_cache
 		//
-		// o_illegal <= (!i_stalled_n);
+		// o_illegal <= (!i_ready);
 	end
 
 	// The o_pc output shares its value with the (last) wishbone address

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlValueId@@i_stalled_n to i_ready


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -229,7 +230,7 @@ module	prefetch(i_clk, i_reset, i_new_pc, i_clear_cache, i_stalled_n, i_pc,
 		always @(posedge i_clk)
 		if (i_new_pc)
 			o_pc <= i_pc;
-		else if (o_valid && !o_illegal && i_stalled_n)
+		else if (o_valid && !o_illegal && i_ready)
 		begin
 			o_pc <= o_pc + 4;
 			o_pc[1:0] <= 2'b00;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@i_stalled_n to i_ready


CommitId: 19112823d4bc5b52b3cfb002cc1d67f9498eb521
Started simplifying the ZipCPU master proof
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -649,14 +649,17 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		// with the current output *may* have a pipeable instruction
 		// following it.
 		// 
-		reg	r_insn_is_pipeable;
 		initial	r_insn_is_pipeable = 1'b0;
 		always @(posedge i_clk)
 		if (i_reset)
 			r_insn_is_pipeable <= 1'b0;
-		else if ((i_ce)&&(!pf_valid)&&(!o_phase))
+		else if ((i_ce)&&((!pf_valid)||(i_illegal))&&(!o_phase))
 			// Pipeline bubble, can't pipe through it
 			r_insn_is_pipeable <= 1'b0;
+		else if (o_ljmp)
+			r_insn_is_pipeable <= 1'b0;
+		else if ((i_ce)&&((!OPT_CIS)&&(i_instruction[`CISBIT])))
+			r_insn_is_pipeable <= 1'b0;
 		else if (i_ce)
 		begin	// This is a valid instruction
 			r_insn_is_pipeable <= (w_mem)&&(w_rB)

ParseResult:
UPD HdlStmIf@@body to body
    INS tuple@@ to elifs
    tuple
        HdlValueId: o_ljmp
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: r_insn_is_pipeable
    INS tuple@@ to elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlValueId: i_ce
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_CIS
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_instruction
                                HdlValueInt: 31
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: r_insn_is_pipeable
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                INS HdlValueId@@i_illegal to ops

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlValueId@@i_ce to ops
            HdlValueId: i_ce
        UPD HdlOp@@AND_LOG to OR_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: i_ce
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: pf_valid


CommitId: 19112823d4bc5b52b3cfb002cc1d67f9498eb521
Started simplifying the ZipCPU master proof
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -714,6 +717,8 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		assign o_pipe = r_pipe;
 	end else begin
 		assign o_pipe = 1'b0;
+		always @(*)
+			r_insn_is_pipeable = 1'b0;
 	end endgenerate
 
 	initial	r_valid = 1'b0;

ParseResult:
INS HdlStmProcess@@ to body
HdlStmProcess
    list: sensitivity
        HdlAll
    HdlOp: ASSIGN
        list: ops
            HdlValueId: r_insn_is_pipeable
            HdlValueInt: 0


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/bench/formal/fdebug.v
+++ b/bench/formal/fdebug.v
@@ -120,7 +120,7 @@ module	fdebug #(
 		assume(i_reset);
 
 	always @(posedge i_clk)
-	if (!f_past_valid || $past(i_reset))
+	if (!f_past_valid || $past(i_reset && !i_cpu_reset))
 		`CPU_ASSUME(i_cpu_reset);
 
 	// Stall checking

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@CALL to CALL
            INS HdlOp@@AND_LOG to ops
            UPD HdlOp@@AND_LOG to AND_LOG
                INS list@@ops to AND_LOG
                INS HdlOp@@NEG_LOG to ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: i_cpu_reset

UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@CALL to CALL
            MOV HdlValueId@@i_reset to ops
            HdlValueId: i_reset


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/bench/formal/fdebug.v
+++ b/bench/formal/fdebug.v
@@ -186,8 +186,7 @@ module	fdebug #(
 
 	// The CPU will always come to a halt on a break
 	always @(posedge i_clk)
-	if (f_past_valid && !$past(i_reset || i_cpu_reset)
-			&& $past(i_dbg_break))
+	if (f_past_valid && $past(!i_reset && !i_cpu_reset && i_dbg_break))
 		`CPU_ASSUME(i_halt || i_reset || i_cpu_reset);
 	////////////////////////////////////////////////////////////////////////
 	//
ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlValueId@@f_past_valid to ops
        UPD HdlOp@@CALL to CALL
            UPD HdlOp@@AND_LOG to AND_LOG
                INS HdlValueId@@i_dbg_break to ops
                UPD HdlOp@@AND_LOG to AND_LOG
                    INS HdlOp@@NEG_LOG to ops
                    UPD HdlOp@@NEG_LOG to NEG_LOG
                        INS list@@ops to NEG_LOG

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to CALL
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@f_past_valid to $past
            UPD HdlOp@@NEG_LOG to AND_LOG
            UPD HdlOp@@NEG_LOG to NEG_LOG
                UPD HdlOp@@CALL to AND_LOG
                UPD HdlOp@@CALL to CALL
                    UPD HdlOp@@OR_LOG to NEG_LOG
                    UPD HdlValueId@@$past to i_reset
                    MOV HdlValueId@@$past to ops
                    HdlValueId: $past
                    UPD HdlOp@@OR_LOG to OR_LOG
                        DEL HdlValueId@@i_reset from ops
        DEL HdlOp@@CALL from ops
        HdlOp: CALL
            list: ops
                HdlValueId: $past
                HdlValueId: i_dbg_break


CommitId: 2e9042bf59cebf0d059dcd3653af8d47418b8ad5
Switched default async flag in fwb_ to synchronous
--- a/rtl/ex/fwb_master.v
+++ b/rtl/ex/fwb_master.v
@@ -99,7 +99,7 @@ module	fwb_master(i_clk, i_reset,
 	// command is present in the yosys script.  If clk2fflogic isn't used,
 	// then setting this parameter to zero will eliminate some formal
 	// tests which would then be inappropriate.
-	parameter	[0:0]	F_OPT_CLK2FFLOGIC = 1'b1;
+	parameter	[0:0]	F_OPT_CLK2FFLOGIC = 1'b0;
 	//
 	localparam [(F_LGDEPTH-1):0] MAX_OUTSTANDING = {(F_LGDEPTH){1'b1}};
 	localparam	MAX_DELAY = (F_MAX_STALL > F_MAX_ACK_DELAY)

ParseResult:
UPD HdlIdDef@@F_OPT_CLK2FFLOGIC to F_OPT_CLK2FFLOGIC
    UPD HdlValueInt@@1 to 0


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -68,7 +68,7 @@ module	zipaxil #(
 		parameter [0:0]	OPT_CIS = 1'b1,
 		parameter [0:0]	OPT_LOWPOWER   = 1'b0,
 		parameter [0:0]	OPT_DISTRIBUTED_REGS = 1'b1,
-		parameter [0:0]	OPT_DBGPORT    = 1'b1,
+		parameter [0:0]	OPT_DBGPORT    = START_HALTED,
 		parameter [0:0]	OPT_TRACE_PORT = 1'b0,
 		parameter [0:0]	OPT_PROFILER   = 1'b0,
 		parameter [0:0]	OPT_USERMODE   = 1'b1,

ParseResult:
UPD HdlIdDef@@OPT_DBGPORT to OPT_DBGPORT
    INS HdlValueId@@START_HALTED to OPT_DBGPORT

UPD HdlIdDef@@OPT_DBGPORT to OPT_DBGPORT
    DEL HdlValueInt@@1 from OPT_DBGPORT


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -467,6 +473,18 @@ module	zipaxil #(
 	assign	dbg_cmd_data = wskd_data;
 	assign	dbg_cmd_strb = wskd_strb;
 
+	assign	reset_request = dbg_cmd_write && dbg_cmd_strb[RESET_BIT/8]
+						&& dbg_cmd_data[RESET_BIT];
+	assign	release_request = dbg_cmd_write && dbg_cmd_strb[HALT_BIT/8]
+						&& !dbg_cmd_data[HALT_BIT];
+	assign	halt_request = dbg_cmd_write && dbg_cmd_strb[HALT_BIT/8]
+						&& dbg_cmd_data[HALT_BIT];
+	assign	step_request = dbg_cmd_write && dbg_cmd_strb[STEP_BIT/8]
+						&& dbg_cmd_data[STEP_BIT];
+	assign	clear_cache_request = dbg_cmd_write
+					&& dbg_cmd_strb[CLEAR_CACHE_BIT/8]
+					&& dbg_cmd_data[CLEAR_CACHE_BIT];
+
 	//
 	// reset_hold: Always start us off with an initial reset
 	// {{{

ParseResult:
INS HdlStmAssign@@ to objs

INS HdlStmAssign@@ to objs

INS HdlStmAssign@@ to objs

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    INS HdlValueId@@reset_request to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: dbg_cmd_write
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_cmd_strb
                        HdlOp: DIV
                            list: ops
                                HdlValueId: RESET_BIT
                                HdlValueInt: 8

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    INS HdlValueId@@release_request to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: dbg_cmd_write
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_cmd_strb
                        HdlOp: DIV
                            list: ops
                                HdlValueId: HALT_BIT
                                HdlValueInt: 8


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -503,23 +521,26 @@ module	zipaxil #(
 	end endgenerate
 	// }}}
 
+	assign	halt_on_fault = dbg_catch;
+
 	// cmd_reset
 	// {{{
+	// Always start us off with an initial reset
 	initial	cmd_reset = 1'b1;
 	always @(posedge S_AXI_ACLK)
 	if (!S_AXI_ARESETN || i_cpu_reset)
 		cmd_reset <= 1'b1;
 	else if (reset_hold)
 		cmd_reset <= 1'b1;
-	else if (cpu_break && !START_HALTED)
+	else if (cpu_break && !halt_on_fault)
 		cmd_reset <= 1'b1;
 	else
-		cmd_reset <= (dbg_cmd_write && dbg_cmd_strb[0]
-					&& dbg_cmd_data[RESET_BIT]);
+		cmd_reset <= reset_request;
 	// }}}
 
 	// cmd_halt
 	// {{{
+	initial	cmd_halt  = START_HALTED;
 	always @(posedge S_AXI_ACLK)
 	if (!S_AXI_ARESETN)
 		cmd_halt <= START_HALTED;

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: cmd_halt
                    HdlValueId: START_HALTED
            HdlStmWait:
                list: val

UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_data
                HdlValueId: RESET_BIT
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@dbg_cmd_write to reset_request
            MOV HdlValueId@@dbg_cmd_write to ops
            HdlValueId: dbg_cmd_write
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_strb
                    HdlValueInt: 0
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from if_false

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            MOV HdlOp@@NEG_LOG to ops
            HdlOp: NEG_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_cmd_data
                            HdlValueId: HALT_BIT
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: STEP_BIT
            DEL list@@ops from OR_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: dbg_write_valid
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: cpu_dbg_stall
                        HdlValueId: dbg_cmd_write
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_cmd_strb
                        HdlValueInt: 0
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@INDEX to OR_LOG
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@dbg_cmd_strb to release_request
                DEL HdlValueInt@@0 from ops
        DEL HdlOp@@OR_LOG from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@START_HALTED to halt_on_fault


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -529,9 +550,12 @@ module	zipaxil #(
 		cmd_halt <= START_HALTED;
 	else begin
 		// {{{
+		// When shall we release from a halt?  Only if we have come to
+		// a full and complete stop.  Even then, we only release if we
+		// aren't being given a command to step the CPU.
+		//
 		if (!dbg_write_valid && !cpu_dbg_stall && dbg_cmd_write
-			&& dbg_cmd_strb[0] && (!dbg_cmd_data[HALT_BIT]
-				|| dbg_cmd_data[STEP_BIT]))
+				&& (release_request || step_request))
 			cmd_halt <= 1'b0;
 
 		// Reasons to halt

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@START_HALTED to halt_on_fault

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: dbg_cmd_write
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_cmd_strb
                            HdlValueInt: 0
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@dbg_cmd_strb to halt_request
                    MOV HdlValueId@@dbg_cmd_strb to ops
                    HdlValueId: dbg_cmd_strb
                    DEL HdlValueInt@@0 from ops
                    DEL list@@ops from INDEX
                DEL HdlOp@@INDEX from ops
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: HALT_BIT
            DEL list@@ops from AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlOp@@INDEX to INDEX
                MOV list@@ops to INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: STEP_BIT
                UPD HdlValueId@@dbg_cmd_data to step_request
                DEL HdlValueId@@STEP_BIT from ops
            DEL HdlOp@@INDEX from ops
            DEL list@@ops from NEG_LOG
        DEL HdlOp@@AND_LOG from ops


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -540,13 +564,12 @@ module	zipaxil #(
 		//	exception must be cured before we can (re)start.
 		//	If the CPU is configured to start immediately on power
 		//	up, we leave it to reset on any exception instead.
-		if (cpu_break && START_HALTED)
+		if (cpu_break && halt_on_fault)
 			cmd_halt <= 1'b1;
 
 		// 2. Halt on any user request to halt.  (Only valid if the
 		//	STEP bit isn't also set)
-		if (dbg_cmd_write && dbg_cmd_strb[0] && dbg_cmd_data[HALT_BIT]
-				&& !dbg_cmd_data[STEP_BIT])
+		if (dbg_cmd_write && halt_request && !step_request)
 			cmd_halt <= 1'b1;
 
 		// 3. Halt on any user request to write to a CPU register

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            INS HdlValueId@@step_request to ops


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -562,7 +585,7 @@ module	zipaxil #(
 			cmd_halt <= 1'b1;
 
 		// 5. Halt on any clear cache bit--independent of any step bit
-		if (dbg_cmd_write && dbg_cmd_strb[0] && dbg_cmd_data[CLEAR_CACHE_BIT])
+		if (clear_cache_request)
 			cmd_halt <= 1'b1;
 		// }}}
 	end

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: HALT_BIT
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@dbg_cmd_data to clear_cache_request
                    MOV HdlValueId@@dbg_cmd_data to ops
                    HdlValueId: dbg_cmd_data
                    DEL HdlValueId@@CLEAR_CACHE_BIT from ops
                    DEL list@@ops from INDEX
                DEL HdlOp@@INDEX from ops
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: dbg_cmd_write
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: dbg_cmd_data
                                HdlValueId: CLEAR_CACHE_BIT
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_cmd_data
                        HdlValueId: HALT_BIT
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 0
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -574,8 +597,7 @@ module	zipaxil #(
 	always @(posedge  S_AXI_ACLK)
 	if (!S_AXI_ARESETN || cmd_reset)
 		cmd_clear_cache <= 1'b0;
-	else if (dbg_cmd_write && dbg_cmd_data[CLEAR_CACHE_BIT]
-			&& dbg_cmd_data[HALT_BIT] && dbg_cmd_strb[0])
+	else if (dbg_cmd_write && clear_cache_request && halt_request)
 		cmd_clear_cache <= 1'b1;
 	else if (cmd_halt && !cpu_dbg_stall)
 		cmd_clear_cache <= 1'b0;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: STEP_BIT
            UPD HdlValueId@@dbg_cmd_write to step_request
            MOV HdlValueId@@dbg_cmd_write to ops
            HdlValueId: dbg_cmd_write
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 0
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -587,12 +609,31 @@ module	zipaxil #(
 	always @(posedge S_AXI_ACLK)
 	if (!S_AXI_ARESETN || i_cpu_reset)
 		cmd_step <= 1'b0;
-	else if (dbg_cmd_write && dbg_cmd_data[STEP_BIT] && dbg_cmd_strb[0])
+	else if (step_request)
 		cmd_step <= 1'b1;
 	else if (!cpu_dbg_stall)
 		cmd_step <= 1'b0;
 	// }}}
 
+	// dbg_catch
+	// {{{
+	generate if (!OPT_DBGPORT)
+	begin
+		assign	dbg_catch = START_HALTED;
+	end else begin
+		reg	r_dbg_catch;
+
+		initial	r_dbg_catch = START_HALTED;
+		always @(posedge S_AXI_ACLK)
+		if (!S_AXI_ARESETN)
+			r_dbg_catch <= START_HALTED;
+		else if (dbg_cmd_write && dbg_cmd_strb[CATCH_BIT/8])
+			r_dbg_catch <= dbg_cmd_data[CATCH_BIT];
+
+		assign	dbg_catch = r_dbg_catch;
+	end endgenerate
+	// }}}
+
 	// cpu_status
 	// {{{
 	//	0xffff_f000 -> (Unused / reserved)

ParseResult:
INS HdlStmIf@@ to objs
HdlStmIf
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: OPT_DBGPORT
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueId: START_HALTED
                HdlValueId: dbg_catch
    list: elifs
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_dbg_catch
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: r_dbg_catch
                                HdlValueId: START_HALTED
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: S_AXI_ACLK
                HdlStmIf: body
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: S_AXI_ARESETN
                    HdlStmAssign: if_true
                        HdlValueId: START_HALTED
                        HdlValueId: r_dbg_catch
                    list: elifs
                        tuple
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: dbg_cmd_write
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: dbg_cmd_strb
                                            HdlOp: DIV
                                                list: ops
                                                    HdlValueId: CATCH_BIT
                                                    HdlValueInt: 8
                            HdlStmAssign
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: dbg_cmd_data
                                        HdlValueId: CATCH_BIT
                                HdlValueId: r_dbg_catch
            HdlStmAssign
                HdlValueId: r_dbg_catch
                HdlValueId: dbg_catch


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -602,7 +643,8 @@ module	zipaxil #(
 	//	0x0000_0200 -> User mode
 	//	0x0000_0100 -> Sleep (CPU is sleeping)
 	//
-	//	0x0000_00e0 -> (Unused/reserved)
+	//	0x0000_00c0 -> (Unused/reserved)
+	//	0x0000_0020 -> dbg_catch
 	//	0x0000_0010 -> cmd_clear_cache
 	//
 	//	0x0000_0008 -> Reset

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlValueId@@halt_request to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@CONCAT to CONCAT
            MOV HdlOp@@CONCAT to ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlOp: CONCAT
                                                                list: ops
                                                                    HdlOp: CONCAT
                                                                        list: ops
                                                                            HdlValueInt: 0
                                                                            HdlValueInt: 0
                                                                    HdlValueId: cpu_break
                                                            HdlValueId: i_interrupt
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: cpu_dbg_cc
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 1
                                                                    HdlValueInt: 0
                                            HdlValueInt: 0
                                    HdlValueInt: 0
                            HdlValueId: cmd_reset
                    HdlValueInt: 0
            UPD HdlOp@@CONCAT to CONCAT
                MOV HdlValueInt@@0 to ops
                HdlValueInt: 0
                UPD HdlOp@@CONCAT to CONCAT
                    MOV HdlValueId@@cmd_reset to ops
                    HdlValueId: cmd_reset
                    UPD HdlOp@@CONCAT to CONCAT
                        MOV HdlValueInt@@0 to ops
                        HdlValueInt: 0


CommitId: 612ba5488528115e076578f621e676a2b03a6a1a
Testbench programs work again!
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -665,6 +713,21 @@ module	zipsystem #(
 	// }}}
 
 	assign	cpu_gie = cpu_dbg_cc[1];
+
+	initial	cmd_write = 0;
+	always @(posedge i_clk)
+	if (i_reset || cpu_reset)
+		cmd_write <= 1'b0;
+	else if (!cmd_write || !cpu_dbg_stall)
+		cmd_write <= dbg_stb && dbg_we && (|i_dbg_sel)
+			&& (dbg_addr[6:5] == DBG_ADDR_CPU);
+
+	always @(posedge i_clk)
+	if ((!cmd_write || !cpu_dbg_stall)&&(dbg_stb && dbg_we && !dbg_addr[5]))
+	begin
+		cmd_waddr <= dbg_addr[4:0];
+		cmd_wdata <= dbg_idata;
+	end
 	// }}}
 	////////////////////////////////////////////////////////////////////////
 	//

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: r_reset_hold
    HdlValueId: reset_hold

INS HdlStmAssign@@ to body


CommitId: 612ba5488528115e076578f621e676a2b03a6a1a
Testbench programs work again!
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -762,7 +825,7 @@ module	zipsystem #(
 		zipcounter
 		mtask_ctr(
 			// {{{
-			i_clk, 1'b0, (!cpu_halt), sys_cyc,
+			i_clk, 1'b0, (!cmd_halt), sys_cyc,
 			(sys_stb)&&(sel_counter)&&(sys_addr[2:0] == 3'b000),
 				sys_we, sys_data,
 			mtc_stall, mtc_ack, mtc_data, mtc_int

ParseResult:
UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    list: elifs
        tuple
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: cmd_reset
                    HdlValueId: START_HALTED
            HdlStmAssign
                HdlValueId: START_HALTED
                HdlValueId: cmd_halt
    INS HdlStmBlock@@SEQ to body
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmWait@@[] to body
HdlStmWait:
    list: val

UPD HdlStmIf@@body to 

MOV HdlStmIf@@body to 
HdlStmIf: body
    HdlValueId: i_reset
    HdlStmAssign: if_true
        HdlValueInt: 1
        HdlValueId: cmd_clear_pf_cache
    list: elifs
    HdlStmAssign: if_false
        HdlOp: AND_LOG
            list: ops
                HdlValueId: dbg_cmd_write
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_idata
                        HdlValueId: CLEAR_CACHE_BIT
        HdlValueId: cmd_clear_pf_cache

UPD HdlStmIf@@body to body
    DEL HdlValueId@@i_reset from body
    DEL list@@elifs from body

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL HdlOp@@ASSIGN from body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: cmd_clear_pf_cache
                HdlValueInt: 1
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

DEL HdlStmProcess@@ from objs

DEL HdlStmProcess@@ from objs


CommitId: 612ba5488528115e076578f621e676a2b03a6a1a
Testbench programs work again!
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -812,7 +875,7 @@ module	zipsystem #(
 		zipcounter
 		utask_ctr(
 			// {{{
-			i_clk,1'b0, (!cpu_halt)&&(cpu_gie), sys_cyc,
+			i_clk,1'b0, (!cmd_halt)&&(cpu_gie), sys_cyc,
 			(sys_stb)&&(sel_counter)&&(sys_addr[2:0] == 3'b100),
 				sys_we, sys_data,
 			utc_stall, utc_ack, utc_data, utc_int

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    HdlOp: OR_LOG
        list: ops
            HdlValueId: i_reset
            HdlValueId: cpu_reset
    INS list@@elifs to body
    INS tuple@@ to elifs
    INS tuple@@ to elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlValueId: cmd_halt
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: cpu_dbg_stall
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: cmd_clear_cache
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: dbg_cmd_write
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_idata
                        HdlValueId: CLEAR_CACHE_BIT


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -218,10 +312,12 @@ module	zipbones #(
 	//
 	//
 
-	assign	dbg_cpu_write = OPT_DBGPORT && (dbg_stb && dbg_we)
+	assign	dbg_cpu_write = OPT_DBGPORT && (dbg_stb && !dbg_stall && dbg_we)
 				&& (dbg_addr[5] == DBG_ADDR_CPU)
 				&& dbg_sel == 4'hf;
-	assign	dbg_cmd_write = (dbg_stb)&&(dbg_we)
+	assign	dbg_cpu_read = (dbg_stb && !dbg_stall && !dbg_we
+				&& dbg_addr[5] == DBG_ADDR_CPU);
+	assign	dbg_cmd_write = (dbg_stb && !dbg_stall && dbg_we)
 					&&(dbg_addr[5] == DBG_ADDR_CTRL);
 	assign	dbg_cmd_data = dbg_idata;
 	assign	dbg_cmd_strb = dbg_sel;

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@EQ to ops
        HdlOp: EQ
            list: ops
                HdlValueId: dbg_sel
                HdlValueInt: f
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@EQ to ops
            HdlOp: EQ
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_addr
                            HdlValueInt: 5
                    HdlValueId: DBG_ADDR_CPU
            DEL HdlOp@@AND_LOG from ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: OPT_DBGPORT
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: dbg_stb
                            HdlValueId: dbg_we
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 
    DEL HdlValueId@@dbg_cpu_write from 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlValueId@@dbg_stb to ops
            HdlValueId: dbg_stb

DEL HdlStmAssign@@ from objs


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -302,11 +398,11 @@ module	zipbones #(
 		cmd_halt <= START_HALTED;
 	else begin
 		// {{{
-		// When shall we release from a halt?  Only if we have come to
-		// a full and complete stop.  Even then, we only release if we
-		// aren't being given a command to step the CPU.
+		// When shall we release from a halt?  Only if we have
+		// come to a full and complete stop.  Even then, we only
+		// release if we aren't being given a command to step the CPU.
 		//
-		if (!cmd_write && !cpu_dbg_stall && dbg_cmd_write
+		if (!cmd_write && cpu_has_halted && dbg_cmd_write
 				&& (release_request || step_request))
 			cmd_halt <= 1'b0;
 

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@NEG_LOG to NEG_LOG
                    UPD HdlValueId@@cpu_dbg_stall to cpu_has_halted
                    MOV HdlValueId@@cpu_dbg_stall to ops
                    HdlValueId: cpu_dbg_stall
                    DEL list@@ops from NEG_LOG
                DEL HdlOp@@NEG_LOG from ops


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -329,14 +425,14 @@ module	zipbones #(
 			cmd_halt <= 1'b1;
 
 		// 4. Halt following any step command
-		if (cmd_step)
+		if (cmd_step && !step_request)
 			cmd_halt <= 1'b1;
 
-		// 4. Halt following any clear cache
+		// 5. Halt following any clear cache
 		if (cmd_clear_cache)
 			cmd_halt <= 1'b1;
 
-		// 5. Halt on any clear cache bit--independent of any step bit
+		// 6. Halt on any clear cache bit--independent of any step bit
 		if (clear_cache_request)
 			cmd_halt <= 1'b1;
 		// }}}

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: cmd_read
                    HdlValueInt: 0
            HdlStmWait:
                list: val

INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmIf: body
        HdlOp: OR_LOG
            list: ops
                HdlOp: OR_LOG
                    list: ops
                        HdlValueId: i_reset
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: dbg_cyc
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: OPT_DBGPORT
        HdlStmAssign: if_true
            HdlValueInt: 0
            HdlValueId: cmd_read
        list: elifs
            tuple
                HdlValueId: dbg_cpu_read
                HdlStmAssign
                    HdlValueInt: 1
                    HdlValueId: cmd_read
            tuple
                HdlOp: EQ
                    list: ops
                        HdlValueId: cmd_read_ack
                        HdlValueInt: 1
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: cmd_read


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -361,10 +457,21 @@ module	zipbones #(
 	always @(posedge i_clk)
 	if (i_reset)
 		cmd_step <= 1'b0;
-	else if (step_request)
+	else if (cmd_reset || cpu_break
+			|| reset_request
+			|| clear_cache_request || cmd_clear_cache
+			|| halt_request || dbg_cpu_write)
+		cmd_step <= 1'b0;
+	else if (!cmd_write && cpu_has_halted && step_request)
 		cmd_step <= 1'b1;
-	else if (!cpu_dbg_stall)
+	else // if (cpu_dbg_stall)
 		cmd_step <= 1'b0;
+`ifdef	FORMAL
+	// While STEP is true, we can't halt
+	always @(*)
+	if (!i_reset && cmd_step)
+		assert(!cmd_halt);
+`endif
 	// }}}
 
 	// dbg_catch

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: OR_LOG
        list: ops
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: cmd_write
                    HdlValueId: cmd_read
            HdlValueId: dbg_cyc
    HdlValueId: cpu_clken


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -411,6 +518,7 @@ module	zipbones #(
 			2'h0, dbg_catch, 1'b0,
 			cmd_reset, 1'b0, !cpu_dbg_stall, cmd_halt
 		};
+
 	// }}}
 
 	// cmd_write

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@cpu_dbg_stall to cpu_has_halted
            MOV HdlValueId@@cpu_dbg_stall to ops
            HdlValueId: cpu_dbg_stall
            DEL list@@ops from NEG_LOG
        DEL HdlOp@@NEG_LOG from ops


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -441,7 +569,7 @@ module	zipbones #(
 	////////////////////////////////////////////////////////////////////////
 	//
 	//
-	assign	cpu_clken = cmd_write || dbg_stb;
+	assign	cpu_clken = cmd_write || cmd_read || dbg_cyc;
 `ifdef	FORMAL
 	// {{{
 	(* anyseq *)	reg	f_cpu_halted, f_cpu_data, f_cpu_stall,

ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmIf@@body to 


CommitId: 2414f9b93038046da588ea193d143e123d56c6c0
ZIPDMA: Speed fixes, to bring it to 200MHz on a Kintex-7
--- a/rtl/zipdma/zipdma.v
+++ b/rtl/zipdma/zipdma.v
@@ -59,8 +59,8 @@ module zipdma #(
 		input	wire [SLV_WIDTH/8-1:0]	i_swb_sel,
 		// Slave/control wishbone outputs
 		output	wire			o_swb_stall,
-		output	reg			o_swb_ack,
-		output	reg	[SLV_WIDTH-1:0]	o_swb_data,
+		output	wire			o_swb_ack,
+		output	wire	[SLV_WIDTH-1:0]	o_swb_data,
 		// }}}
 		// Master/DMA port
 		// {{{
ParseResult:
UPD HdlIdDef@@o_swb_data to o_swb_data
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@reg to wire

UPD HdlIdDef@@o_swb_ack to o_swb_ack
    DEL HdlOp@@PARAMETRIZATION from o_swb_ack
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg


CommitId: 2b8d4ec1d0365b6a737636fb784373bdbc71e12b
Fixed lint errors and warnings generally
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -77,22 +77,22 @@ module	zipbones #(
 		parameter [0:0]	OPT_FPU = 0,
 `endif
 		parameter [0:0]	OPT_LOCK = 1,
-		localparam [0:0] OPT_DMA = 0, OPT_ACCOUNTING = 1'b0,
 		parameter	RESET_DURATION = 10,
 		// }}}
 		// Short-cut names
 		// {{{
 		localparam	// Derived parameters
-				PHYSICAL_ADDRESS_WIDTH=ADDRESS_WIDTH,
+				// PHYSICAL_ADDRESS_WIDTH=ADDRESS_WIDTH,
 				PAW=ADDRESS_WIDTH,
 `ifdef	OPT_MMU
-				VIRTUAL_ADDRESS_WIDTH=30,
+				// VIRTUAL_ADDRESS_WIDTH=30,
 `else
-				VIRTUAL_ADDRESS_WIDTH=PAW,
+				// VIRTUAL_ADDRESS_WIDTH=PAW,
 `endif
-				LGTLBSZ = 6,
-				VAW=VIRTUAL_ADDRESS_WIDTH,
-		localparam	AW=ADDRESS_WIDTH,
+				// LGTLBSZ = 6,
+				// VAW=VIRTUAL_ADDRESS_WIDTH,
+		// localparam	AW=ADDRESS_WIDTH,
+		localparam	DW=32,	// Bus data width
 		// }}}
 		// Debug bit allocations
 		// {{{

ParseResult:
DEL HdlIdDef@@OPT_DMA from params
HdlIdDef: OPT_DMA
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@OPT_ACCOUNTING from params
HdlIdDef: OPT_ACCOUNTING
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@PHYSICAL_ADDRESS_WIDTH from params
HdlIdDef: PHYSICAL_ADDRESS_WIDTH
    HdlValueId: ADDRESS_WIDTH
    HdlDirection: INTERNAL


CommitId: 3d021d0e356128762206e783caaa395ef05e7e34
ZipDMA: MM2S size and increment bits deconflicted w/ trigger and int
--- a/rtl/zipdma/zipdma_ctrl.v
+++ b/rtl/zipdma/zipdma_ctrl.v
@@ -244,8 +244,8 @@ module zipdma_ctrl #(
 				o_s2mm_inc  <= !i_data[22];
 				o_s2mm_size <=  i_data[21:20];
 				//
-				o_mm2s_inc  <= !i_data[26];
-				o_mm2s_size <=  i_data[25:24];
+				o_mm2s_inc  <= !i_data[18];
+				o_mm2s_size <=  i_data[17:16];
 			end
 
 			if (i_sel[3])
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueInt@@26 to 18

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@25 to 17
            UPD HdlValueInt@@24 to 16


CommitId: 3a83ca4c93bc0657b49273e486cdc5caddaf1dea
Fixed pipelinable memory bugs in the instruction decoder
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -615,6 +615,9 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	begin
 		reg	r_pipe;
 
+		wire	[13:0]	pipe_addr_diff;
+		assign		pipe_addr_diff = w_I[13:0] - r_I[13:0];
+
 		initial	r_pipe = 1'b0;
 		always @(posedge i_clk)
 		if (i_reset)

ParseResult:
INS HdlIdDef@@pipe_addr_diff to body
HdlIdDef: pipe_addr_diff
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 13
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: SUB
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: w_I
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 13
                            HdlValueInt: 0
            HdlOp: INDEX
                list: ops
                    HdlValueId: r_I
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 13
                            HdlValueInt: 0
    HdlValueId: pipe_addr_diff

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                MOV HdlOp@@AND_LOG to ops
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: AND_LOG
                                                                    list: ops
                                                                        HdlOp: AND_LOG
                                                                            list: ops
                                                                                HdlValueId: r_valid
                                                                                HdlOp: OR_LOG
                                                                                    list: ops
                                                                                        HdlValueId: pf_valid
                                                                                        HdlValueId: o_phase
                                                                        HdlValueId: w_mem
                                                                HdlValueId: o_M
                                                        HdlOp: EQ
                                                            list: ops
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: o_op
                                                                        HdlValueInt: 0
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: w_cis_op
                                                                        HdlValueInt: 0
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: w_rB
                                                        HdlValueId: o_rB
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: w_dcdB
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: o_dcdB
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: o_op
                                                HdlValueInt: 0
                                        HdlOp: NE
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: w_dcdB
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: o_dcdA
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                        HdlOp: EQ
                            list: ops
                                HdlValueId: i_gie
                                HdlValueId: o_gie
                UPD HdlOp@@AND_LOG to AND_LOG
                    UPD HdlOp@@AND_LOG to AND_LOG
                        MOV HdlOp@@AND_LOG to ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: AND_LOG
                                                                    list: ops
                                                                        HdlValueId: r_valid
                                                                        HdlOp: OR_LOG
                                                                            list: ops
                                                                                HdlValueId: pf_valid
                                                                                HdlValueId: o_phase
                                                                HdlValueId: w_mem
                                                        HdlValueId: o_M
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: o_op
                                                                HdlValueInt: 0
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: w_cis_op
                                                                HdlValueInt: 0
                                        HdlOp: EQ
                                            list: ops
                                                HdlValueId: w_rB
                                                HdlValueId: o_rB
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: w_dcdB
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 0
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: o_dcdB
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 0
        DEL HdlOp@@OR_LOG from ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: w_I
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 13
                                        HdlValueInt: 2
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: r_I
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 13
                                        HdlValueInt: 2
                HdlOp: EQ
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_I
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 13
                                                HdlValueInt: 2
                        HdlOp: ADD
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: r_I
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 13
                                                HdlValueInt: 2
                                HdlValueInt: 1


CommitId: 3a83ca4c93bc0657b49273e486cdc5caddaf1dea
Fixed pipelinable memory bugs in the instruction decoder
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -629,18 +632,24 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 				&&(w_rB == o_rB)
 				// Both must use the same register for B
 				&&(w_dcdB[3:0] == o_dcdB[3:0])
+				// CC or PC registers are not valid addresses
+				&&(w_dcdB[3:1] != 3'h7)
 				// But ... the result can never be B
 				&&((o_op[0])
 					||(w_dcdB[3:0] != o_dcdA[3:0]))
 				// Needs to be to the mode, supervisor or user
 				&&(i_gie == o_gie)
+				// Reads to CC or PC not allowed
+				&&((o_op[0])||(w_dcdR[3:1] != 3'h7))
+				// Prior-reads to CC or PC not allowed
+				&&((o_op[0])||(o_dcdR[3:1] != 3'h7))
 				// Same condition, or no condition before
 				&&((w_cond[2:0]==o_cond[2:0])
 					||(o_cond[2:0] == 3'h0))
 				// Same or incrementing immediate
 				&&(w_I[13]==r_I[13])
-				&&((w_I[13:2]==r_I[13:2])
-					||({1'b0, w_I[13:2]}==(r_I[13:2]+12'h1)));
+				&&((w_I==r_I)
+					||(pipe_addr_diff <= 14'h4));
 		assign o_pipe = r_pipe;
 	end else begin
 		assign o_pipe = 1'b0;

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: EQ
                    list: ops
                        HdlValueId: w_I
                        HdlValueId: r_I
                HdlOp: LE
                    list: ops
                        HdlValueId: pipe_addr_diff
                        HdlValueInt: 4
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                INS HdlOp@@AND_LOG to ops
                UPD HdlOp@@AND_LOG to AND_LOG
                    INS list@@ops to AND_LOG
                    INS HdlOp@@AND_LOG to ops
                    INS HdlOp@@OR_LOG to ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: o_op
                                    HdlValueInt: 0
                            HdlOp: NE
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: o_dcdR
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 3
                                                    HdlValueInt: 1
                                    HdlValueInt: 7
                    UPD HdlOp@@AND_LOG to AND_LOG
                        INS list@@ops to AND_LOG
                        INS HdlOp@@OR_LOG to ops
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: o_op
                                        HdlValueInt: 0
                                HdlOp: NE
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: w_dcdR
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 1
                                        HdlValueInt: 7
                        UPD HdlOp@@AND_LOG to AND_LOG
                            UPD HdlOp@@AND_LOG to AND_LOG
                                INS HdlOp@@AND_LOG to ops
                                UPD HdlOp@@AND_LOG to AND_LOG
                                    INS list@@ops to AND_LOG
                                    INS HdlOp@@NE to ops
                                    HdlOp: NE
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: w_dcdB
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 1
                                            HdlValueInt: 7

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                MOV HdlOp@@AND_LOG to ops
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: AND_LOG
                                                                    list: ops
                                                                        HdlOp: AND_LOG
                                                                            list: ops
                                                                                HdlValueId: r_valid
                                                                                HdlOp: OR_LOG
                                                                                    list: ops
                                                                                        HdlValueId: pf_valid
                                                                                        HdlValueId: o_phase
                                                                        HdlValueId: w_mem
                                                                HdlValueId: o_M
                                                        HdlOp: EQ
                                                            list: ops
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: o_op
                                                                        HdlValueInt: 0
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: w_cis_op
                                                                        HdlValueInt: 0
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: w_rB
                                                        HdlValueId: o_rB
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: w_dcdB
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: o_dcdB
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: o_op
                                                HdlValueInt: 0
                                        HdlOp: NE
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: w_dcdB
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: o_dcdA
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 3
                                                                HdlValueInt: 0
                        HdlOp: EQ
                            list: ops
                                HdlValueId: i_gie
                                HdlValueId: o_gie
                UPD HdlOp@@AND_LOG to AND_LOG
                    UPD HdlOp@@AND_LOG to AND_LOG
                        MOV HdlOp@@AND_LOG to ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: AND_LOG
                                                                    list: ops
                                                                        HdlValueId: r_valid
                                                                        HdlOp: OR_LOG
                                                                            list: ops
                                                                                HdlValueId: pf_valid
                                                                                HdlValueId: o_phase
                                                                HdlValueId: w_mem
                                                        HdlValueId: o_M
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: o_op
                                                                HdlValueInt: 0
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: w_cis_op
                                                                HdlValueInt: 0
                                        HdlOp: EQ
                                            list: ops
                                                HdlValueId: w_rB
                                                HdlValueId: o_rB
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: w_dcdB
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 0
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: o_dcdB
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 0
        DEL HdlOp@@OR_LOG from ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: w_I
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 13
                                        HdlValueInt: 2
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: r_I
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 13
                                        HdlValueInt: 2
                HdlOp: EQ
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_I
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 13
                                                HdlValueInt: 2
                        HdlOp: ADD
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: r_I
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 13
                                                HdlValueInt: 2
                                HdlValueInt: 1


CommitId: 2b8d4ec1d0365b6a737636fb784373bdbc71e12b
Fixed lint errors and warnings generally
--- a/rtl/ex/wbdblpriarb.v
+++ b/rtl/ex/wbdblpriarb.v
@@ -82,12 +82,14 @@ module	wbdblpriarb #(
 		// using VER1LATOR, 'cause zeroing things on idle can make them
 		// stand out all the more when staring at wires and dumps and
 		// such.
-		parameter	[0:0]		OPT_ZERO_ON_IDLE = 1'b0,
+		parameter	[0:0]		OPT_ZERO_ON_IDLE = 1'b0
 		// }}}
+`ifdef FORMAL
 		// Parameters used in the formal proof only
-		parameter	F_LGDEPTH = 3,
+		, parameter	F_LGDEPTH = 3,
 		parameter	F_MAX_STALL = 0,
 		parameter	F_MAX_ACK_DELAY=0
+`endif
 		// }}}
 	) (
 		// {{{
ParseResult:
DEL HdlIdDef@@F_LGDEPTH from params
HdlIdDef: F_LGDEPTH
    HdlValueInt: 3
    HdlDirection: INTERNAL

DEL HdlIdDef@@F_MAX_STALL from params
HdlIdDef: F_MAX_STALL
    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@F_MAX_ACK_DELAY from params
HdlIdDef: F_MAX_ACK_DELAY
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_slave.v
+++ b/rtl/aux/fwb_slave.v
@@ -81,6 +81,15 @@ module	fwb_slave(i_clk, i_reset,
 	parameter	[0:0]	F_OPT_DISCONTINUOUS = 0;
 	//
 	//
+	// If true, insist that there be a minimum of a single clock delay
+	// between request and response.  This defaults to off since the
+	// wishbone specification specifically doesn't require this.  However,
+	// some interfaces do, so we allow it as an option here.
+	parameter	[0:0]	F_OPT_MINCLOCK_DELAY = 0;
+	//
+	//
+	parameter	[0:0]	F_OPT_CLK2FFLOGIC = 1'b1;
+	//
 	localparam [(F_LGDEPTH-1):0] MAX_OUTSTANDING = {(F_LGDEPTH){1'b1}};
 	localparam	MAX_DELAY = (F_MAX_STALL > F_MAX_ACK_DELAY)
 				? F_MAX_STALL : F_MAX_ACK_DELAY;

ParseResult:
INS HdlIdDef@@F_OPT_MINCLOCK_DELAY to params
HdlIdDef: F_OPT_MINCLOCK_DELAY
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@F_OPT_CLK2FFLOGIC to params
HdlIdDef: F_OPT_CLK2FFLOGIC
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_slave.v
+++ b/rtl/aux/fwb_slave.v
@@ -159,18 +168,21 @@ module	fwb_slave(i_clk, i_reset,
 	end
 
 	// Things can only change on the positive edge of the clock
-	always @($global_clock)
-	if ((f_past_valid)&&(!$rose(i_clk)))
+	generate if (F_OPT_CLK2FFLOGIC)
 	begin
-		assert($stable(i_reset));
-		assume($stable(i_wb_cyc));
-		assume($stable(f_request)); // The entire request should b stabl
-		//
-		assert($stable(i_wb_ack));
-		assert($stable(i_wb_stall));
-		assert($stable(i_wb_idata));
-		assert($stable(i_wb_err));
-	end
+		always @($global_clock)
+		if ((f_past_valid)&&(!$rose(i_clk)))
+		begin
+			assert($stable(i_reset));
+			assume($stable(i_wb_cyc));
+			assume($stable(f_request)); // The entire request should b stabl
+			//
+			assert($stable(i_wb_ack));
+			assert($stable(i_wb_stall));
+			assert($stable(i_wb_idata));
+			assert($stable(i_wb_err));
+		end
+	end endgenerate
 
 	//
 	//

ParseResult:
INS HdlStmIf@@ to objs

MOV HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: CALL
            list: ops
                HdlValueId: $global_clock
    HdlStmIf: body
        HdlOp: AND_LOG
            list: ops
                HdlValueId: f_past_valid
                HdlOp: NEG_LOG
                    list: ops
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $rose
                                HdlValueId: i_clk
        HdlStmBlock: SEQ
            list: body
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_reset
                HdlOp: CALL
                    list: ops
                        HdlValueId: assume
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_cyc
                HdlOp: CALL
                    list: ops
                        HdlValueId: assume
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: f_request
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_ack
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_stall
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_idata
                HdlOp: CALL
                    list: ops
                        HdlValueId: assert
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $stable
                                HdlValueId: i_wb_err
        list: elifs


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_slave.v
+++ b/rtl/aux/fwb_slave.v
@@ -196,7 +208,11 @@ module	fwb_slave(i_clk, i_reset,
 			&&($past(i_wb_stall))&&(i_wb_cyc))
 	begin
 		assume(i_wb_stb);
-		assume($stable(f_request));
+		assume(i_wb_we   == $past(i_wb_we));
+		assume(i_wb_addr == $past(i_wb_addr));
+		assume(i_wb_sel  == $past(i_wb_sel));
+		if (i_wb_we)
+			assume(i_wb_data == $past(i_wb_data));
 	end
 
 	// Within any series of STB/requests, the direction of the request

ParseResult:
INS HdlStmIf@@ to body
HdlStmIf
    HdlValueId: i_wb_we
    HdlOp: CALL
        list: ops
            HdlValueId: assume
            HdlOp: EQ
                list: ops
                    HdlValueId: i_wb_data
                    HdlOp: CALL
                        list: ops
                            HdlValueId: $past
                            HdlValueId: i_wb_data
    list: elifs

UPD HdlStmIf@@body to body
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@CALL to CALL
            MOV HdlOp@@CALL to ops
            HdlOp: CALL
                list: ops
                    HdlValueId: $stable
                    HdlValueId: f_request
            UPD HdlOp@@CALL to CALL
                UPD HdlValueId@@$stable to $past
                UPD HdlValueId@@f_request to i_wb_we


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_slave.v
+++ b/rtl/aux/fwb_slave.v
@@ -271,7 +287,8 @@ module	fwb_slave(i_clk, i_reset,
 		initial	f_ackwait_count = 0;
 		always @(posedge i_clk)
 			if ((!i_reset)&&(i_wb_cyc)&&(!i_wb_stb)
-					&&(!i_wb_ack)&&(!i_wb_err))
+					&&(!i_wb_ack)&&(!i_wb_err)
+					&&(f_outstanding > 0))
 			begin
 				f_ackwait_count <= f_ackwait_count + 1'b1;
 				assert(f_ackwait_count < F_MAX_ACK_DELAY);

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_reset
                                    HdlValueId: i_wb_cyc
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_wb_stb
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: i_wb_ack
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: i_wb_err


CommitId: 5077278a2610ece5ccd08d5b639d98ccd2038f5a
Updated formal WB specifications
--- a/rtl/aux/fwb_slave.v
+++ b/rtl/aux/fwb_slave.v
@@ -325,10 +342,16 @@ module	fwb_slave(i_clk, i_reset,
 			// no acknowledgements ... however, an acknowledgement
 			// *can* come back on the same clock as the stb is
 			// going out.
-			assert((!i_wb_ack)||((i_wb_stb)&&(!i_wb_stall)));
-			// The same is true of errors.  They may not be
-			// created before the request gets through
-			assert((!i_wb_err)||((i_wb_stb)&&(!i_wb_stall)));
+			if (F_OPT_MINCLOCK_DELAY)
+			begin
+				assert(!i_wb_ack);
+				assert(!i_wb_err);
+			end else begin
+				assert((!i_wb_ack)||((i_wb_stb)&&(!i_wb_stall)));
+				// The same is true of errors.  They may not be
+				// created before the request gets through
+				assert((!i_wb_err)||((i_wb_stb)&&(!i_wb_stall)));
+			end
 		end
 
 	generate if (!F_OPT_RMW_BUS_OPTION)
ParseResult:
INS HdlStmIf@@ to body

UPD HdlStmIf@@body to body
    MOV HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlOp: CALL
                list: ops
                    HdlValueId: assert
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_wb_ack
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_wb_stb
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_wb_stall
            HdlOp: CALL
                list: ops
                    HdlValueId: assert
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_wb_err
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: i_wb_stb
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: i_wb_stall


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -360,7 +368,7 @@ module	zipsystem(i_clk, i_rst,
 	assign	cpu_reset = (cmd_reset)||(wdt_reset)||(i_rst);
 
 	wire	cpu_halt, cpu_dbg_stall;
-	assign	cpu_halt = (i_rst)||((cmd_halt)&&(~cmd_step));
+	assign	cpu_halt = (cmd_halt);
 	wire	[31:0]	pic_data;
 	wire	[31:0]	cmd_data;
 	// Values:

ParseResult:
INS HdlStmAssign@@ to objs

INS HdlStmProcess@@ to objs

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    INS HdlValueId@@dbg_cmd_write to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: dbg_stb
                HdlValueId: dbg_we

INS HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: dbg_cmd_write
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_dbg_data
                    HdlValueInt: 6
    HdlValueId: cmd_reset

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG to NEG_LOG
        MOV HdlOp@@NEG to ops
        HdlOp: NEG
            list: ops
                HdlValueId: dbg_addr
        DEL HdlOp@@AND_LOG from ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: dbg_cyc
                        HdlValueId: dbg_stb
                HdlValueId: dbg_we
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 
    DEL HdlValueId@@dbg_cmd_write from 

DEL HdlStmAssign@@ from objs

DEL HdlStmProcess@@ from objs


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -380,11 +388,11 @@ module	zipsystem(i_clk, i_rst,
 		assign	cmd_data = { {(16-EXTERNAL_INTERRUPTS){1'b0}},
 					i_ext_int,
 				cpu_dbg_cc,	// 4 bits
-				1'b0, cmd_halt, (~cpu_dbg_stall), 1'b0,
+				1'b0, cmd_halt, (!cpu_dbg_stall), 1'b0,
 				pic_data[15], cpu_reset, cmd_addr };
 	else
 		assign	cmd_data = { i_ext_int[15:0], cpu_dbg_cc,
-				1'b0, cmd_halt, (~cpu_dbg_stall), 1'b0,
+				1'b0, cmd_halt, (!cpu_dbg_stall), 1'b0,
 				pic_data[15], cpu_reset, cmd_addr };
 	endgenerate
 

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

INS HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: dbg_cmd_write
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_dbg_data
                    HdlValueInt: 11
    HdlValueId: cmd_clear_pf_cache

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_rst to body
    INS list@@elifs to body
    INS tuple@@ to elifs
    tuple
        HdlValueId: dbg_cmd_write
        HdlStmAssign
            HdlOp: AND_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_dbg_data
                            HdlValueInt: 10
                    HdlOp: NEG_LOG
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: i_dbg_data
                                    HdlValueInt: 8
            HdlValueId: cmd_halt

DEL HdlStmAssign@@body from 
HdlStmAssign: body
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG
                        list: ops
                            HdlValueId: i_rst
                    HdlValueId: dbg_cmd_write
            HdlOp: OR_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_idata
                            HdlValueInt: 11
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_idata
                            HdlValueInt: 6
    HdlValueId: cmd_clear_pf_cache

DEL HdlStmProcess@@ from objs


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -92,13 +92,13 @@ module	prefetch(i_clk, i_rst, i_new_pc, i_clear_cache, i_stalled_n, i_pc,
 		begin
 			o_wb_cyc <= 1'b0;
 			o_wb_stb <= 1'b0;
-		end else if ((!o_wb_cyc)&&((i_stalled_n)||(!o_valid)))
+		end else if ((!o_wb_cyc)&&((i_stalled_n)||(!o_valid)||(i_new_pc)))
 		begin // Initiate a bus cycle
 			o_wb_cyc <= 1'b1;
 			o_wb_stb <= 1'b1;
 		end else if (o_wb_cyc) // Independent of ce
 		begin
-			if (~i_wb_stall)
+			if (!i_wb_stall)
 				o_wb_stb <= 1'b0;
 		end
 

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlValueId@@i_new_pc to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG to NEG_LOG

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: i_stalled_n
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: o_valid


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -108,7 +108,7 @@ module	prefetch(i_clk, i_rst, i_new_pc, i_clear_cache, i_stalled_n, i_pc,
 		if (!o_wb_cyc)
 			invalid <= 1'b0;
 		else if ((i_new_pc)||(i_clear_cache))
-			invalid <= (!o_wb_stb);
+			invalid <= 1'b1;
 
 	always @(posedge i_clk)
 		if (i_new_pc)

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlValueInt@@1 to 

UPD HdlStmAssign@@ to 
    DEL HdlOp@@NEG_LOG from 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: o_wb_stb


CommitId: 2f686fe62486a5abedd81331d083c86016350803
Fixed the ZipCPU's problems with running the testbench
--- a/rtl/core/prefetch.v
+++ b/rtl/core/prefetch.v
@@ -123,15 +123,15 @@ module	prefetch(i_clk, i_rst, i_new_pc, i_clear_cache, i_stalled_n, i_pc,
 	initial o_valid   = 1'b0;
 	initial o_illegal = 1'b0;
 	always @(posedge i_clk)
-		if (i_rst)
+		if ((i_rst)||(i_new_pc))
 		begin
 			o_valid   <= 1'b0;
 			o_illegal <= 1'b0;
-		end else if ((o_wb_cyc)&&(i_wb_ack))
+		end else if ((o_wb_cyc)&&((i_wb_ack)||(i_wb_err)))
 		begin
-			o_valid   <= (!i_wb_err)&&(!invalid);
+			o_valid   <= (!invalid);
 			o_illegal <= ( i_wb_err)&&(!invalid);
-		end else if ((i_stalled_n)||(i_clear_cache))
+		end else if ((i_stalled_n)||(i_clear_cache)||(i_new_pc))
 		begin
 			o_valid <= 1'b0;
 			o_illegal <= 1'b0;
ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlValueId@@i_new_pc to ops
    INS HdlOp@@OR_LOG to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlValueId@@i_new_pc to ops
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlValueId@@i_wb_err to ops

UPD HdlStmIf@@body to body
    MOV HdlValueId@@i_rst to body
    HdlValueId: i_rst
    MOV HdlOp@@OR_LOG to 
    HdlOp: OR_LOG
        list: ops
            HdlValueId: i_stalled_n
            HdlValueId: i_clear_cache
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@i_wb_ack to ops
        HdlValueId: i_wb_ack

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: invalid
        DEL HdlOp@@NEG_LOG from ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: i_wb_err
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 


CommitId: c20ffe060413d056fdb5973a92a63efe4e58ca7b
Verilator lint updates: ffetch and f_idecode
--- a/bench/formal/ffetch.v
+++ b/bench/formal/ffetch.v
@@ -87,14 +87,14 @@ module	ffetch #(
 	reg	[(AW+1):0]	f_next_address;
 	reg		f_past_valid;
 
-	reg		need_new_pc, past_stalled, past_illegal, past_new_pc,
-			past_valid;
+	reg		need_new_pc, past_stalled, past_illegal;
 	reg	[31:0]	past_insn;
-	reg [AW+1:0]	last_pc, next_pc, prior_pc;
 
+	// Verilator lint_off UNDRIVEN
 	(* anyconst *)	reg	[(AW+1):0]	r_fc_pc;
 	(* anyconst *)	reg			r_fc_illegal;
 	(* anyconst *)	reg	[BUSW-1:0]	r_fc_insn;
+	// Verilator lint_on  UNDRIVEN
 
 	assign	fc_pc		= r_fc_pc;
 	assign	fc_illegal	= r_fc_illegal;

ParseResult:
DEL HdlIdDef@@past_new_pc from objs
HdlIdDef: past_new_pc
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

DEL HdlIdDef@@past_valid from objs
HdlIdDef: past_valid
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

DEL HdlIdDef@@last_pc from objs
HdlIdDef: last_pc
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@next_pc from objs
HdlIdDef: next_pc
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@prior_pc from objs
HdlIdDef: prior_pc
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: c20ffe060413d056fdb5973a92a63efe4e58ca7b
Verilator lint updates: ffetch and f_idecode
--- a/bench/formal/ffetch.v
+++ b/bench/formal/ffetch.v
@@ -175,19 +175,6 @@ module	ffetch #(
 		`CPU_ASSUME(!pf_illegal);
 	end
 
-	always @(posedge i_clk)
-		past_new_pc <= cpu_new_pc;
-
-	always @(posedge i_clk)
-		last_pc <= cpu_pc;
-
-	always @(*)
-	begin
-		next_pc  <= last_pc + 4;
-		next_pc[1:0] <= 2'b00;
-		prior_pc <= last_pc - 4;
-	end
-
 	initial	need_new_pc = 1'b1;
 	always @(posedge i_clk)
 		need_new_pc <= (i_reset || cpu_clear_cache);

ParseResult:
DEL HdlStmProcess@@ from objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmAssign: body
        HdlValueId: cpu_new_pc
        HdlValueId: past_new_pc

DEL HdlStmProcess@@ from objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmAssign: body
        HdlValueId: cpu_pc
        HdlValueId: last_pc

DEL HdlStmProcess@@ from objs
HdlStmProcess
    list: sensitivity
        HdlAll
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: ADD
                    list: ops
                        HdlValueId: last_pc
                        HdlValueInt: 4
                HdlValueId: next_pc
            HdlStmAssign
                HdlValueInt: 00
                HdlOp: INDEX
                    list: ops
                        HdlValueId: next_pc
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 1
                                HdlValueInt: 0
            HdlStmAssign
                HdlOp: SUB
                    list: ops
                        HdlValueId: last_pc
                        HdlValueInt: 4
                HdlValueId: prior_pc


CommitId: c20ffe060413d056fdb5973a92a63efe4e58ca7b
Verilator lint updates: ffetch and f_idecode
--- a/bench/formal/ffetch.v
+++ b/bench/formal/ffetch.v
@@ -203,9 +190,6 @@ module	ffetch #(
 	always @(posedge i_clk)
 		past_insn <= pf_insn;
 
-	always @(posedge i_clk)
-		past_valid <= pf_valid;
-
 	always @(*)
 	if (need_new_pc)
 	begin

ParseResult:
DEL HdlStmProcess@@ from objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmAssign: body
        HdlValueId: pf_valid
        HdlValueId: past_valid


CommitId: c20ffe060413d056fdb5973a92a63efe4e58ca7b
Verilator lint updates: ffetch and f_idecode
--- a/bench/formal/ffetch.v
+++ b/bench/formal/ffetch.v
@@ -247,15 +231,17 @@ module	ffetch #(
 
 	always @(posedge i_clk)
 	if (!f_past_valid || $past(i_reset || cpu_clear_cache))
+	begin
 		`CPU_ASSUME(!pf_valid);
-	else if ((f_past_valid)&&(!$past(pf_illegal && !cpu_new_pc))&&(pf_illegal))
+	end else if ((f_past_valid)&&(!$past(pf_illegal && !cpu_new_pc))&&(pf_illegal))
 		// pf_illegal can only rise if pf_valid is true
 		`CPU_ASSUME(pf_valid);
 
 	always @(posedge i_clk)
 	if ((f_past_valid)&&($past(i_reset || cpu_new_pc || cpu_clear_cache)))
+	begin
 		`CPU_ASSUME(!pf_illegal || pf_valid);
-	else if (f_past_valid && $past(pf_illegal))
+	end else if (f_past_valid && $past(pf_illegal))
 		`CPU_ASSUME(pf_illegal);
 
 	always @(*)

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlStmBlock@@SEQ to body
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmIf@@body to body
    MOV HdlOp@@CALL to body
    HdlOp: CALL
        list: ops
            HdlValueId: assert
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: pf_valid

UPD HdlStmIf@@body to body
    MOV HdlOp@@CALL to body
    HdlOp: CALL
        list: ops
            HdlValueId: assert
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: pf_illegal
                    HdlValueId: pf_valid


CommitId: c20ffe060413d056fdb5973a92a63efe4e58ca7b
Verilator lint updates: ffetch and f_idecode
--- a/bench/formal/ffetch.v
+++ b/bench/formal/ffetch.v
@@ -282,8 +268,9 @@ module	ffetch #(
 		if (pf_valid && fc_pc[AW+1:2] == f_address[AW+1:2])
 		begin
 			if (fc_illegal)
+			begin
 				`CPU_ASSUME(pf_illegal);
-			else if (!pf_illegal)
+			end else if (!pf_illegal)
 				`CPU_ASSUME(fc_insn == pf_insn);
 		end
 
ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlOp@@CALL to 
    HdlOp: CALL
        list: ops
            HdlValueId: assert
            HdlValueId: pf_illegal


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/peripherals/ziptimer.v
+++ b/rtl/peripherals/ziptimer.v
@@ -123,12 +123,9 @@ module	ziptimer(i_clk, i_reset, i_ce,
 
 		// If setting auto-reload mode, and the value to other
 		// than zero, set the auto-reload value
-		initial	r_reload_value = 0;
 		always @(posedge i_clk)
-			if (i_reset)
-				r_reload_value <= 0;
-			else if (wb_write)
-				r_reload_value <= i_wb_data[(VW-1):0];
+		if (wb_write)
+			r_reload_value <= i_wb_data[(VW-1):0];
 		assign	reload_value = r_reload_value;
 	end else begin
 		assign	auto_reload = 1'b0;

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlValueId@@wb_write to 
    HdlValueId: wb_write
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: i_wb_data
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: VW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueId: r_reload_value

UPD HdlStmIf@@body to body
    INS list@@elifs to body

DEL HdlStmProcess@@ from body
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: r_reload_value
                    HdlValueInt: 0
            HdlStmWait:
                list: val

DEL HdlStmAssign@@if_true from body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_reload_value


CommitId: defc51282266f9b655e7ea024e094b8de6cec875
Fixed abstrace MPY busy flag
--- a/bench/formal/abs_mpy.v
+++ b/bench/formal/abs_mpy.v
@@ -93,7 +93,7 @@ module	abs_mpy(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result,
 			r_busy <= 1'b0;
 		else if (i_stb)
 			r_busy <= (next_delay_to_valid != 0);
-		else
+		else if (r_busy)
 			r_busy <= (delay_to_valid != 3'h1);
 
 		always @(posedge i_clk)
ParseResult:
UPD HdlStmIf@@body to body
    INS tuple@@ to elifs
    INS HdlValueId@@r_busy to 

UPD HdlStmAssign@@if_false to 

MOV HdlStmAssign@@if_false to body
HdlStmAssign: if_false
    HdlOp: NE
        list: ops
            HdlValueId: delay_to_valid
            HdlValueInt: 1
    HdlValueId: r_busy


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -44,7 +44,8 @@ module	mpyop #(
 		// {{{
 		// The following parameter selects which multiply algorithm we
 		// use.  Timing performance is strictly dependent upon it.
-		parameter	IMPLEMENT_MPY = 1
+		parameter	OPT_MPY = 1,
+		parameter [0:0]	OPT_LOWPOWER  = 1'b0
 		// }}}
 	) (
 		// {{{

ParseResult:
UPD HdlIdDef@@IMPLEMENT_MPY to OPT_MPY

INS HdlIdDef@@OPT_LOWPOWER to params
HdlIdDef: OPT_LOWPOWER
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -75,7 +76,7 @@ module	mpyop #(
 // o_busy
 // o_done
 	generate
-	if (IMPLEMENT_MPY == 0)
+	if (OPT_MPY == 0)
 	begin : MPYNONE // No multiply support.
 		// {{{
 		assign	o_result   = 64'h00;

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -91,7 +92,7 @@ module	mpyop #(
 `endif
 		// }}}
 	end else begin : IMPY
-	if (IMPLEMENT_MPY == 1)
+	if (OPT_MPY == 1)
 	begin : MPY1CK // Our single clock option (no extra clocks)
 		// {{{
 		wire	signed	[63:0]	w_mpy_a_input, w_mpy_b_input;

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmAssign@@ to 
    INS HdlOp@@TERNARY to 
    UPD HdlOp@@TERNARY to TERNARY
        INS list@@ops to TERNARY
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: OPT_LOWPOWER
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: i_stb
        INS HdlValueInt@@0 to ops

UPD HdlStmAssign@@ to 
    MOV HdlOp@@MUL to 
    HdlOp: MUL
        list: ops
            HdlValueId: w_mpy_a_input
            HdlValueId: w_mpy_b_input


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -99,7 +100,7 @@ module	mpyop #(
 		assign	w_mpy_a_input = {{(32){(i_a[31])&(i_op[0])}},i_a[31:0]};
 		assign	w_mpy_b_input = {{(32){(i_b[31])&(i_op[0])}},i_b[31:0]};
 
-		assign	o_result = w_mpy_a_input * w_mpy_b_input;
+		assign	o_result = (OPT_LOWPOWER && !i_stb) ? 0 : (w_mpy_a_input * w_mpy_b_input);
 
 		assign	o_busy  = 1'b0;
 		assign	o_valid = i_stb;

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmAssign@@ to 
    INS HdlOp@@TERNARY to 
    UPD HdlOp@@TERNARY to TERNARY
        INS list@@ops to TERNARY
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: OPT_LOWPOWER
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: i_stb
        INS HdlValueInt@@0 to ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -113,18 +114,26 @@ module	mpyop #(
 `endif
 		// }}}
 	end else begin: MPN1
-	if (IMPLEMENT_MPY == 2)
+	if (OPT_MPY == 2)
 	begin : MPY2CK // Our two clock option (ALU must pause for 1 clock)
 		// {{{
+
+		// Declarations
+		// {{{
 		reg	signed	[63:0]	r_mpy_a_input, r_mpy_b_input;
-		reg	mpypipe;
+		reg			mpypipe, r_hi;
+		// }}}
 
 		// r_mpy_?_input: Register the inputs
 		// {{{
 		always @(posedge i_clk)
+		if (!OPT_LOWPOWER || i_stb)
 		begin
 			r_mpy_a_input <={{(32){(i_a[31])&(i_op[0])}},i_a[31:0]};
 			r_mpy_b_input <={{(32){(i_b[31])&(i_op[0])}},i_b[31:0]};
+		end else begin
+			r_mpy_a_input <= 0;
+			r_mpy_b_input <= 0;
 		end
 		// }}}
 

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    HdlOp: OR_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: OPT_LOWPOWER
            HdlValueId: i_stb
    INS list@@elifs to body
    INS HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: r_mpy_a_input
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: r_mpy_b_input

UPD HdlStmProcess@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_a
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_a
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: r_mpy_a_input
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueInt: 32
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_b
                                                HdlValueInt: 31
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_op
                                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_b
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 31
                                        HdlValueInt: 0
                HdlValueId: r_mpy_b_input


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -145,8 +154,6 @@ module	mpyop #(
 
 		// o_hi
 		// {{{
-		reg	r_hi;
-
 		always @(posedge i_clk)
 		if (i_stb)
 			r_hi  <= i_op[1];

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -155,7 +162,7 @@ module	mpyop #(
 		// }}}
 		// }}}
 	end else begin : MPN2
-	if (IMPLEMENT_MPY == 3)
+	if (OPT_MPY == 3)
 	begin : MPY3CK // Our three clock option (ALU pauses for 2 clocks)
 		// {{{
 

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -166,6 +173,7 @@ module	mpyop #(
 		reg	signed	[31:0]	r_mpy_a_input, r_mpy_b_input;
 		reg		[1:0]	mpypipe;
 		reg		[1:0]	r_sgn;
+		reg			r_hi;
 		// }}}
 
 		// mpypipe (FSM state)

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

INS HdlStmProcess@@ to body

UPD HdlStmProcess@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_a
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlValueId: r_mpy_a_input
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_b
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 0
                HdlValueId: r_mpy_b_input
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: r_sgn
                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_op
                                HdlValueInt: 0
                HdlValueId: r_sgn


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -181,10 +189,17 @@ module	mpyop #(
 		// First clock : register r_mpy_?_input, r_sgn
 		// {{{
 		always @(posedge i_clk)
+			r_sgn <= { r_sgn[0],
+				(i_op[0] && (!OPT_LOWPOWER || i_stb)) };
+
+		always @(posedge i_clk)
+		if (!OPT_LOWPOWER || i_stb)
 		begin
 			r_mpy_a_input <= i_a[31:0];
 			r_mpy_b_input <= i_b[31:0];
-			r_sgn <= { r_sgn[0], i_op[0] };
+		end else begin
+			r_mpy_a_input <= 0;
+			r_mpy_b_input <= 0;
 		end
 		// }}}
 

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

INS HdlStmIf@@body to 

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    HdlOp: OR_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: OPT_LOWPOWER
            HdlValueId: i_stb
    INS list@@elifs to body
    INS HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: r_mpy_a_input
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: r_mpy_b_input

UPD HdlStmAssign@@body to if_true

MOV HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: MUL
        list: ops
            HdlValueId: r_mpy_a_input
            HdlValueId: r_mpy_b_input
    HdlValueId: r_smpy_result

UPD HdlStmAssign@@body to body
    UPD HdlOp@@CONCAT to CONCAT
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlOp@@OR_LOG to ops
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: OPT_LOWPOWER
                    HdlValueId: i_stb


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -201,8 +216,10 @@ module	mpyop #(
 		assign	u_mpy_a_input = {32'h00,r_mpy_a_input};
 		assign	u_mpy_b_input = {32'h00,r_mpy_b_input};
 		always @(posedge i_clk)
+		if (!OPT_LOWPOWER || mpypipe[0])
 			r_smpy_result <= s_mpy_a_input * s_mpy_b_input;
 		always @(posedge i_clk)
+		if (!OPT_LOWPOWER || mpypipe[0])
 			r_umpy_result <= u_mpy_a_input * u_mpy_b_input;
 		// }}}
 `else

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    HdlOp: OR_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: OPT_LOWPOWER
            HdlOp: INDEX
                list: ops
                    HdlValueId: mpypipe
                    HdlValueInt: 0
    INS list@@elifs to body

UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    HdlOp: OR_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: OPT_LOWPOWER
            HdlOp: INDEX
                list: ops
                    HdlValueId: mpypipe
                    HdlValueInt: 0
    INS list@@elifs to body


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -214,13 +231,14 @@ module	mpyop #(
 		assign	u_mpy_b_input = r_mpy_b_input;
 
 		always @(posedge i_clk)
+		if (!OPT_LOWPOWER || mpypipe[0])
 			r_smpy_result <= r_mpy_a_input * r_mpy_b_input;
 		always @(posedge i_clk)
+		if (!OPT_LOWPOWER || mpypipe[0])
 			r_umpy_result <= u_mpy_a_input * u_mpy_b_input;
 		// }}}
 `endif
 
-		reg	r_hi;
 		always @(posedge i_clk)
 		if (i_stb)
 			r_hi  <= i_op[1];

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -234,7 +252,7 @@ module	mpyop #(
 		// Results are then available and registered on the third clock
 		// }}}
 	end else begin : MPN3
-	if (IMPLEMENT_MPY == 4)
+	if (OPT_MPY == 4)
 	begin : MPY4CK // The four clock option, polynomial multiplication
 		// {{{
 		// Declarations

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -281,6 +299,12 @@ module	mpyop #(
 
 			if (i_stb)
 				r_hi  <= i_op[1];
+			else if (OPT_LOWPOWER)
+			begin
+				r_mpy_a_input <= 0;
+				r_mpy_b_input <= 0;
+				r_mpy_signed  <= 0;
+			end
 		end
 		// }}}
 

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -322,6 +346,7 @@ module	mpyop #(
 		//		- 2^31 (2^16 bh+bl + 2^16 ah+al + 2^31)
 		//
 		always @(posedge i_clk)
+		if (!OPT_LOWPOWER || mpypipe[0])
 		begin
 			pp_f<=r_mpy_a_input[31:16]*r_mpy_b_input[31:16];
 			pp_oi<=r_mpy_a_input[31:16]*r_mpy_b_input[15: 0]

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    HdlOp: OR_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: OPT_LOWPOWER
            HdlOp: INDEX
                list: ops
                    HdlValueId: mpypipe
                    HdlValueInt: 0
    INS list@@elifs to body

UPD HdlStmProcess@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: INDEX
                    list: ops
                        HdlValueId: pp_l
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 0
                HdlOp: INDEX
                    list: ops
                        HdlValueId: r_mpy_result
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 0
            HdlStmAssign
                HdlOp: ADD
                    list: ops
                        HdlOp: ADD
                            list: ops
                                HdlOp: ADD
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueInt: 00
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: pp_l
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 31
                                                                HdlValueInt: 16
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueInt: 00
                                                HdlValueId: pp_oi
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: pp_s
                                        HdlValueInt: 00
                        HdlOp: CONCAT
                            list: ops
                                HdlValueId: pp_f
                                HdlValueInt: 00
                HdlOp: INDEX
                    list: ops
                        HdlValueId: r_mpy_result
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 63
                                HdlValueInt: 16


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -340,6 +365,7 @@ module	mpyop #(
 		// Third clock, add the results and get a product: r_mpy_result
 		// {{{
 		always @(posedge i_clk)
+		if (!OPT_LOWPOWER || mpypipe[1])
 		begin
 			r_mpy_result[15:0] <= pp_l[15:0];
 			r_mpy_result[63:16] <=

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        UPD HdlValueId@@IMPLEMENT_MPY to OPT_MPY

UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    HdlOp: OR_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: OPT_LOWPOWER
            HdlOp: INDEX
                list: ops
                    HdlValueId: mpypipe
                    HdlValueInt: 1
    INS list@@elifs to body


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -277,14 +280,16 @@ module	zipaxi #(
 	wire	[2:0]	cpu_dbg_cc;
 	// }}}
 
-	reg	reset_hold;
+	wire	reset_hold;
 	wire	cpu_clken, cpu_clock, clk_gate;
 
 	// CPU control registers
 	// {{{
 	reg		cmd_halt, cmd_reset, cmd_step, cmd_clear_cache;
 	wire	[31:0]	cpu_status;
-	wire		dbg_cmd_write;
+	wire		dbg_cmd_write, dbg_cpu_write;
+	wire	[31:0]	dbg_cmd_data;
+	wire	[3:0]	dbg_cmd_strb;
 	// }}}
 
 	// Fetch

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        MOV HdlValueId@@reset_hold to ops
        HdlValueId: reset_hold
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from ASSIGN
    DEL list@@sensitivity from 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 

UPD HdlStmAssign@@if_true to if_true
    UPD HdlValueId@@reset_hold to r_reset_hold

UPD HdlStmAssign@@if_false to if_false
    UPD HdlValueId@@reset_hold to r_reset_hold

DEL HdlStmProcess@@ from body


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -348,9 +353,9 @@ module	zipaxi #(
 		.i_clk(S_AXI_ACLK), .i_reset(!S_AXI_ARESETN),
 		.i_valid(S_DBG_WVALID),
 		.o_ready(S_DBG_WREADY),
-		.i_data({ S_DBG_WDATA, S_DBG_WSTRB }),
+		.i_data({ S_DBG_WSTRB, S_DBG_WDATA }),
 		.o_valid(wskd_valid), .i_ready(dbg_write_ready),
-			.o_data({ wskd_data, wskd_strb })
+			.o_data({ wskd_strb, wskd_data })
 		// }}}
 	);
 

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@wskd_strb to dbg_cmd_strb
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@wskd_data to dbg_cmd_data
            UPD HdlOp@@NEG_LOG to NEG_LOG
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@wskd_data to dbg_cmd_data


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipaxi.v
+++ b/rtl/zipaxi.v
@@ -736,15 +745,15 @@ module	zipaxi #(
 		// Memory unit interface
 		// {{{
 		.o_clear_dcache(clear_dcache), .o_mem_ce(mem_ce),
-		.o_bus_lock(bus_lock), .o_mem_op(mem_op),
-			.o_mem_addr(mem_cpu_addr),
+			.o_bus_lock(bus_lock),
+			.o_mem_op(mem_op), .o_mem_addr(mem_cpu_addr),
 			.o_mem_data(mem_wdata),
 			.o_mem_lock_pc(mem_lock_pc),
 			.o_mem_reg(mem_reg),
 			.i_mem_busy(mem_busy),
 			.i_mem_rdbusy(mem_rdbusy),
 			.i_mem_pipe_stalled(mem_pipe_stalled),
-			.i_mem_valid(mem_valid),
+		.i_mem_valid(mem_valid),
 			.i_bus_err(mem_bus_err),
 			.i_mem_wreg(mem_wreg),
 			.i_mem_result(mem_result),

ParseResult:
MOV HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: M_INSN_AWVALID


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/fmem.v
+++ b/bench/formal/fmem.v
@@ -119,13 +119,13 @@
 // }}}
 module	fmem #(
 		// {{{
-		// IMPLEMENT_LOCK
+		// OPT_LOCK
 		// {{{
 		// If false, forces the i_lock parameter to be zero and
 		// guarantees no bus locking.  Can be set to 1'b1 to test both
 		// with and without bus locking.
 		// }}}
-		parameter [0:0]	IMPLEMENT_LOCK = 1'b0,
+		parameter [0:0]	OPT_LOCK = 1'b0,
 		// F_LGDEPTH
 		// {{{
 		// This is the number of bits required to hold our internal

ParseResult:
UPD HdlIdDef@@IMPLEMENT_LOCK to OPT_LOCK


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/fmem.v
+++ b/bench/formal/fmem.v
@@ -319,11 +319,11 @@ module	fmem #(
 	// }}}
 
 	always @(*)
-	if (!IMPLEMENT_LOCK)
+	if (!OPT_LOCK)
 		`CPU_ASSERT(!i_stb || !i_lock);
 
 	always @(posedge i_clk)
-	if (IMPLEMENT_LOCK && f_past_valid && !$past(i_cpu_reset))
+	if (OPT_LOCK && f_past_valid && !$past(i_cpu_reset))
 	begin
 	//	if ($past(!i_lock && (!i_stb || i_busy)))
 	//		`CPU_ASSERT(!i_lock);

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@IMPLEMENT_LOCK to OPT_LOCK

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@IMPLEMENT_LOCK to OPT_LOCK


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/fmem.v
+++ b/bench/formal/fmem.v
@@ -476,7 +476,7 @@ module	fmem #(
 	if (i_stb && !i_pipe_stalled)
 	begin
 		f_last_reg <= i_oreg;
-		if (IMPLEMENT_LOCK && f_check_axi_lock && i_op[0] && i_lock)
+		if (OPT_LOCK && f_check_axi_lock && i_op[0] && i_lock)
 			f_last_reg[3:0] <= 4'hf;
 	end
 

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlValueId@@IMPLEMENT_LOCK to OPT_LOCK


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/fmem.v
+++ b/bench/formal/fmem.v
@@ -604,7 +604,7 @@ module	fmem #(
 	//
 
 	always @(*)
-	if (OPT_AXI_LOCK == 0 || !IMPLEMENT_LOCK)
+	if (OPT_AXI_LOCK == 0 || !OPT_LOCK)
 	begin
 		assume(f_check_axi_lock == 1'b0);
 	end else if (OPT_AXI_LOCK == 1)
ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@IMPLEMENT_LOCK to OPT_LOCK


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -58,6 +58,7 @@ module	zipcore #(
 		parameter	[0:0]	OPT_START_HALTED = 1'b1,
 		parameter	[0:0]	OPT_DBGPORT = 1'b1,
 		parameter	[0:0]	OPT_TRACE_PORT = 1'b0,
+		parameter	[0:0]	OPT_PROFILER = 1'b0,
 
 		localparam	AW=ADDRESS_WIDTH
 `ifdef	FORMAL

ParseResult:
INS HdlIdDef@@OPT_PROFILER to params
HdlIdDef: OPT_PROFILER
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -115,8 +116,14 @@ module	zipcore #(
 		// }}}
 		// Debug data for on-line/live tracing
 		// {{{
-		output	wire	[31:0]	o_debug
+		output	wire	[31:0]	o_debug,
 		//}}}
+		// (Optional) Profiler data
+		// {{{
+		output	wire		o_prof_stb,
+		output	wire [AW+1:0]	o_prof_addr,
+		output	wire [31:0]	o_prof_ticks
+		// }}}
 		// }}}
 	);
 

ParseResult:
INS HdlIdDef@@o_prof_stb to ports
HdlIdDef: o_prof_stb
    HdlDirection: OUT

INS HdlIdDef@@o_prof_addr to ports
HdlIdDef: o_prof_addr
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

INS HdlIdDef@@o_prof_ticks to ports
HdlIdDef: o_prof_ticks
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: OUT


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -163,7 +170,8 @@ module	zipcore #(
 	reg	[3:0]	flags, iflags;
 	wire	[15:0]	w_uflags, w_iflags;
 	reg		break_en, step, sleep, r_halted;
-	wire		break_pending, trap, gie, ubreak, pending_interrupt;
+	wire		break_pending, trap, gie, ubreak, pending_interrupt,
+			stepped;
 	wire		ill_err_u;
 	reg		ill_err_i;
 	reg		ibus_err_flag;

ParseResult:
INS HdlIdDef@@stepped to objs
HdlIdDef: stepped
    HdlDirection: INTERNAL


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -575,6 +583,7 @@ module	zipcore #(
 	// Master stall condition
 	// {{{
 	assign	master_stall = (!master_ce)||(!op_valid)||(ill_err_i)
+			||(step && stepped)
 			||(ibus_err_flag)||(idiv_err_flag)
 			||(pending_interrupt && !o_bus_lock)&&(!alu_phase)
 			||(alu_busy)||(div_busy)||(fpu_busy)||(op_break)

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    UPD HdlOp@@OR_LOG to OR_LOG
                        UPD HdlOp@@OR_LOG to OR_LOG
                            INS HdlOp@@OR_LOG to ops
                            UPD HdlOp@@OR_LOG to OR_LOG
                                INS list@@ops to OR_LOG
                                INS HdlValueId@@idiv_err_flag to ops
                                UPD HdlOp@@OR_LOG to OR_LOG
                                    UPD HdlOp@@OR_LOG to OR_LOG
                                        INS HdlOp@@AND_LOG to ops
                                        UPD HdlOp@@AND_LOG to AND_LOG
                                            INS list@@ops to AND_LOG
                                            INS HdlValueId@@stepped to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    UPD HdlOp@@OR_LOG to OR_LOG
                        UPD HdlOp@@OR_LOG to OR_LOG
                            MOV HdlOp@@OR_LOG to ops
                            HdlOp: OR_LOG
                                list: ops
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlOp: OR_LOG
                                                list: ops
                                                    HdlOp: OR_LOG
                                                        list: ops
                                                            HdlOp: NEG_LOG
                                                                list: ops
                                                                    HdlValueId: master_ce
                                                            HdlOp: NEG_LOG
                                                                list: ops
                                                                    HdlValueId: op_valid
                                                    HdlValueId: ill_err_i
                                            HdlValueId: ibus_err_flag
                                    HdlValueId: idiv_err_flag
                            UPD HdlOp@@OR_LOG to OR_LOG
                                UPD HdlValueId@@idiv_err_flag to ibus_err_flag
                                UPD HdlOp@@OR_LOG to OR_LOG
                                    UPD HdlValueId@@ibus_err_flag to step
                                    MOV HdlValueId@@ibus_err_flag to ops
                                    HdlValueId: ibus_err_flag


CommitId: 136697cb2922a1f0b42d0071064a18c8ab4df451
FIX: Named generate blocks
--- a/rtl/peripherals/ziptimer.v
+++ b/rtl/peripherals/ziptimer.v
@@ -215,12 +215,12 @@ module	ziptimer #(
 
 	// o_wb_data
 	// {{{
-	generate
-	if (VW < BW-1)
+	generate if (VW < BW-1)
+	begin : GEN_TRIM
 		assign	o_wb_data = { auto_reload, {(BW-1-VW){1'b0}}, r_value };
-	else
+	end else begin : NO_TRIM
 		assign	o_wb_data = { auto_reload, r_value };
-	endgenerate
+	end endgenerate
 	// }}}
 
 	// Make verilator happy
ParseResult:
UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlOp: CONCAT
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlValueId: auto_reload
                    HdlOp: REPL_CONCAT
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: BW
                                            HdlValueInt: 1
                                    HdlValueId: VW
                            HdlValueInt: 0
            HdlValueId: r_value
    HdlValueId: o_wb_data

UPD HdlStmAssign@@if_false to 

MOV HdlStmAssign@@if_false to 
HdlStmAssign: if_false
    HdlOp: CONCAT
        list: ops
            HdlValueId: auto_reload
            HdlValueId: r_value
    HdlValueId: o_wb_data


CommitId: 5c08358b2bdee804bc6a091bcf1c5fb87fd8f7c2
Fixed AxSIZE in DCACHE to never be more than 32'bits
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -228,7 +228,7 @@ module	axidcache #(
 	assign	M_AXI_AWID = AXI_ID;
 	assign	M_AXI_ARID = AXI_ID;
 	assign	M_AXI_AWLEN = 0;	// All writes are one beat only
-	assign	M_AXI_AWSIZE = (SWAP_WSTRB) ? AXILSB[2:0] : 2;	// Write thru cache: All writes are 32-b
+	assign	M_AXI_AWSIZE = 3'b010;	// Write thru cache: All writes are 32-b
 
 	assign	M_AXI_AWBURST = 2'b01;	// INCR addressing only
 	assign	M_AXI_ARBURST = 2'b01;

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueInt: 010
    HdlValueId: M_AXI_AWSIZE

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlValueId: SWAP_WSTRB
            HdlOp: INDEX
                list: ops
                    HdlValueId: AXILSB
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 2
                            HdlValueInt: 0
            HdlValueInt: 2
    HdlValueId: M_AXI_AWSIZE


CommitId: 5c08358b2bdee804bc6a091bcf1c5fb87fd8f7c2
Fixed AxSIZE in DCACHE to never be more than 32'bits
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -593,8 +593,8 @@ module	axidcache #(
 
 			if (SWAP_WSTRB)
 			begin
-				axi_araddr[AXILSB-1:0] <= 0;
-				axi_arsize <= AXILSB[2:0];
+				axi_araddr[1:0] <= 0;
+				axi_arsize <= 3'b010;
 			end
 			// }}}
 		end

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@0 to 010
            MOV HdlValueInt@@0 to ops
            HdlValueInt: 0
            DEL HdlValueInt@@2 from ops
            DEL list@@ops from DOWNTO
        DEL HdlValueId@@AXILSB from ops
        DEL HdlOp@@DOWNTO from ops
        DEL list@@ops from INDEX
    DEL HdlOp@@INDEX from 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                MOV HdlValueInt@@1 to ops
                HdlValueInt: 1
                DEL HdlValueId@@AXILSB from ops
                DEL list@@ops from SUB
            DEL HdlOp@@SUB from ops


CommitId: 5c08358b2bdee804bc6a091bcf1c5fb87fd8f7c2
Fixed AxSIZE in DCACHE to never be more than 32'bits
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -648,7 +648,7 @@ module	axidcache #(
 		axi_awaddr <= i_addr;
 
 		if (SWAP_WSTRB)
-			axi_awaddr[AXILSB-1:0] <= 0;
+			axi_awaddr[1:0] <= 0;
 
 		if (!i_pipe_stb || !i_op[0] || misaligned)
 			axi_awaddr <= 0;

ParseResult:
UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                MOV HdlValueInt@@1 to ops
                HdlValueInt: 1
                DEL HdlValueId@@AXILSB from ops
                DEL list@@ops from SUB
            DEL HdlOp@@SUB from ops


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -115,15 +115,7 @@
 module wbdmac #(
 		// {{{
 		parameter	ADDRESS_WIDTH=30, LGMEMLEN = 10, DW=32,
-		localparam	LGDV=5,
-		localparam	AW=ADDRESS_WIDTH,
-		localparam [2:0]	DMA_IDLE	= 3'b000,
-		localparam [2:0]	DMA_WAIT	= 3'b001,
-		localparam [2:0]	DMA_READ_REQ	= 3'b010,
-		localparam [2:0]	DMA_READ_ACK	= 3'b011,
-		localparam [2:0]	DMA_PRE_WRITE	= 3'b100,
-		localparam [2:0]	DMA_WRITE_REQ	= 3'b101,
-		localparam [2:0]	DMA_WRITE_ACK	= 3'b110
+		localparam	AW=ADDRESS_WIDTH
 		// }}}
 	) (
 		// {{{

ParseResult:
MOV HdlIdDef@@LGDV to params
HdlIdDef: LGDV
    HdlValueInt: 5
    HdlDirection: INTERNAL

MOV HdlIdDef@@DMA_IDLE to params
HdlIdDef: DMA_IDLE
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlValueInt: 000
    HdlDirection: INTERNAL

MOV HdlIdDef@@DMA_WAIT to params
HdlIdDef: DMA_WAIT
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlValueInt: 001
    HdlDirection: INTERNAL

MOV HdlIdDef@@DMA_READ_REQ to params
HdlIdDef: DMA_READ_REQ
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlValueInt: 010
    HdlDirection: INTERNAL

MOV HdlIdDef@@DMA_READ_ACK to params
HdlIdDef: DMA_READ_ACK
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlValueInt: 011
    HdlDirection: INTERNAL

MOV HdlIdDef@@DMA_PRE_WRITE to params
HdlIdDef: DMA_PRE_WRITE
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlValueInt: 100
    HdlDirection: INTERNAL

MOV HdlIdDef@@DMA_WRITE_REQ to params
HdlIdDef: DMA_WRITE_REQ
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlValueInt: 101
    HdlDirection: INTERNAL

MOV HdlIdDef@@DMA_WRITE_ACK to params
HdlIdDef: DMA_WRITE_ACK
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlValueInt: 110
    HdlDirection: INTERNAL


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -582,13 +583,15 @@ module wbdmac #(
 	// o_mwb_data
 	// {{{
 	always @(posedge i_clk)
-	if (i_reset)
-		o_mwb_data <= 0;
-	else if ((dma_state != DMA_WRITE_REQ)||(!i_mwb_stall))
+	// if (i_reset)
+	//	o_mwb_data <= 0;
+	// else
+	if ((dma_state != DMA_WRITE_REQ)||(!i_mwb_stall))
 		o_mwb_data <= dma_mem[rdaddr];
+
 	always @(posedge i_clk)
-		if((dma_state == DMA_READ_REQ)||(dma_state == DMA_READ_ACK))
-			dma_mem[nread[(LGMEMLEN-1):0]] <= i_mwb_data;
+	if((dma_state == DMA_READ_REQ)||(dma_state == DMA_READ_ACK))
+		dma_mem[nread[(LGMEMLEN-1):0]] <= i_mwb_data;
 	// }}}
 
 	// o_swb_data
ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlOp@@OR_LOG to 
    HdlOp: OR_LOG
        list: ops
            HdlOp: NE
                list: ops
                    HdlValueId: dma_state
                    HdlValueId: DMA_WRITE_REQ
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: i_mwb_stall
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: dma_mem
            HdlValueId: rdaddr
    HdlValueId: o_mwb_data

UPD HdlStmIf@@body to body
    INS list@@elifs to body

DEL HdlStmAssign@@if_true from body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: o_mwb_data


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/abs_div.v
+++ b/bench/formal/abs_div.v
@@ -103,6 +103,9 @@
 module	abs_div #(
 		// {{{
 		parameter		BW=32, LGBW = 5,
+		// Verilator lint_off UNUSED
+		parameter	[0:0]	OPT_LOWPOWER = 1'b0,
+		// Verilator lint_on  UNUSED
 		parameter	[4:0]	MAXDELAY = 3
 		// }}}
 	) (
ParseResult:
INS HdlIdDef@@OPT_LOWPOWER to params
HdlIdDef: OPT_LOWPOWER
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/fdebug.v
+++ b/bench/formal/fdebug.v
@@ -80,7 +80,8 @@ module	fdebug #(
 		//	1. Address valid, 2. (wait state), 3. Data available
 		// Set OPT_DISTRIBUTED_RAM to 1'b0 if such a wait state is
 		// required.
-		parameter [0:0]	OPT_DISTRIBUTED_RAM = 1'b1
+		parameter [0:0]	OPT_DISTRIBUTED_RAM = 1'b1,
+		parameter [0:0]	OPT_START_HALTED = 1'b1
 		// }}}
 	) (
 		// {{{

ParseResult:
INS HdlIdDef@@OPT_START_HALTED to params
HdlIdDef: OPT_START_HALTED
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/fdebug.v
+++ b/bench/formal/fdebug.v
@@ -205,7 +206,10 @@ module	fdebug #(
 	// A halted CPU won't restart without being released
 	// {{{
 	always @(posedge i_clk)
-	if (f_past_valid && $past(i_halt && i_halted))
+	if (!f_past_valid || $past(i_reset))
+	begin
+		`CPU_ASSERT(i_halted == OPT_START_HALTED);
+	end else if (f_past_valid && $past(i_halt && i_halted))
 		`CPU_ASSERT(i_halted);
 	// }}}
 
ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@OR_LOG to body
    HdlOp: OR_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: f_past_valid
            HdlOp: CALL
                list: ops
                    HdlValueId: $past
                    HdlValueId: i_reset
    INS HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlOp: CALL
                list: ops
                    HdlValueId: assume
                    HdlOp: EQ
                        list: ops
                            HdlValueId: i_halted
                            HdlValueId: OPT_START_HALTED
    INS list@@elifs to body
    INS tuple@@ to elifs

UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: f_past_valid
            HdlOp: CALL
                list: ops
                    HdlValueId: $past
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: i_halt
                            HdlValueId: i_halted
    MOV HdlOp@@CALL to body
    HdlOp: CALL
        list: ops
            HdlValueId: assume
            HdlValueId: i_halted
    DEL list@@elifs from body


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -90,10 +90,12 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 			LGNLINES=5, // Log of the number of separate cache lines
 			NAUX=5;	// # of aux d-wires to keep aligned w/memops
 	parameter [0:0]	OPT_LOCAL_BUS=1'b1;
+	parameter [0:0]	OPT_PIPE=1'b1;
 	parameter [0:0]	OPT_LOCK=1'b1;
-	localparam 	SDRAM_BIT = 26;
-	localparam	FLASH_BIT = 22;
-	localparam	BLKRAM_BIT= 15;
+	parameter [AW-1:0] 	SDRAM_ADDR  = 0, SDRAM_MASK = 0;
+	parameter [AW-1:0] 	BLKRAM_ADDR = 30'h4000000,
+				BLKRAM_MASK = 30'h4000000;
+	parameter [AW-1:0] 	FLASH_ADDR  = 0, FLASH_MASK  = 0;
 	localparam	AW = ADDRESS_WIDTH; // Just for ease of notation below
 	localparam	CS = LGCACHELEN; // Number of bits in a cache address
 	localparam	LS = CS-LGNLINES; // Bits to spec position w/in cline

ParseResult:
INS HdlIdDef@@OPT_PIPE to params
HdlIdDef: OPT_PIPE
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 1
    HdlDirection: INTERNAL

INS HdlIdDef@@SDRAM_ADDR to params
HdlIdDef: SDRAM_ADDR
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@SDRAM_MASK to params
HdlIdDef: SDRAM_MASK
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@BLKRAM_ADDR to params
HdlIdDef: BLKRAM_ADDR
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 4000000
    HdlDirection: INTERNAL

INS HdlIdDef@@BLKRAM_MASK to params
HdlIdDef: BLKRAM_MASK
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 4000000
    HdlDirection: INTERNAL

INS HdlIdDef@@FLASH_ADDR to params
HdlIdDef: FLASH_ADDR
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@FLASH_MASK to params
HdlIdDef: FLASH_MASK
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@SDRAM_BIT from objs
HdlIdDef: SDRAM_BIT
    HdlValueInt: 26
    HdlDirection: INTERNAL

DEL HdlIdDef@@FLASH_BIT from objs
HdlIdDef: FLASH_BIT
    HdlValueInt: 22
    HdlDirection: INTERNAL

DEL HdlIdDef@@BLKRAM_BIT from objs
HdlIdDef: BLKRAM_BIT
    HdlValueInt: 15
    HdlDirection: INTERNAL


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -160,10 +162,10 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 					||(last_tag != i_addr[(AW+1):LS+2])
 					||(!c_v[i_cline]);
 	assign	w_cachable = ((!OPT_LOCAL_BUS)||(i_addr[(DW-1):(DW-8)]!=8'hff))
-				&&((!i_lock)||(!OPT_LOCK))
-				&&(((SDRAM_BIT>0)&&(i_addr[SDRAM_BIT]))
-				  ||((FLASH_BIT>0)&&(i_addr[FLASH_BIT]))
-				  ||((BLKRAM_BIT>0)&&(i_addr[BLKRAM_BIT])));
+		&&((!i_lock)||(!OPT_LOCK))
+		&&(((SDRAM_ADDR  != 0)&&((i_addr[AW+1:2] & SDRAM_MASK) ==SDRAM_ADDR))
+		  ||((FLASH_ADDR != 0)&&((i_addr[AW+1:2] & FLASH_MASK) ==FLASH_ADDR))
+		  ||((BLKRAM_ADDR!= 0)&&((i_addr[AW+1:2] & BLKRAM_MASK)==BLKRAM_ADDR)));
 
 	reg	r_cachable, r_svalid, r_dvalid, r_rd, r_cache_miss,
 		r_rd_pending;

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    INS HdlValueId@@w_cachable to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: NE
                                    list: ops
                                        HdlValueId: SDRAM_ADDR
                                        HdlValueInt: 0
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_addr
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlOp: ADD
                                                                    list: ops
                                                                        HdlValueId: AW
                                                                        HdlValueInt: 1
                                                                HdlValueInt: 2
                                                HdlValueId: SDRAM_MASK
                                        HdlValueId: SDRAM_ADDR
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: NE
                                    list: ops
                                        HdlValueId: FLASH_ADDR
                                        HdlValueInt: 0
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: AND
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_addr
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlOp: ADD
                                                                    list: ops
                                                                        HdlValueId: AW
                                                                        HdlValueInt: 1
                                                                HdlValueInt: 2
                                                HdlValueId: FLASH_MASK
                                        HdlValueId: FLASH_ADDR
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NE
                            list: ops
                                HdlValueId: BLKRAM_ADDR
                                HdlValueInt: 0
                        HdlOp: EQ
                            list: ops
                                HdlOp: AND
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_addr
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlOp: ADD
                                                            list: ops
                                                                HdlValueId: AW
                                                                HdlValueInt: 1
                                                        HdlValueInt: 2
                                        HdlValueId: BLKRAM_MASK
                                HdlValueId: BLKRAM_ADDR


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -220,19 +222,21 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 		//
 		// Some preliminaries that needed to be calculated on the first
 		// clock
+		if ((!o_pipe_stalled)&&(!r_rd_pending))
+			r_addr <= i_addr[(AW+1):2];
 		if (!o_busy)
 		begin
 			r_iv   <= c_v[i_cline];
 			r_itag <= c_vtags[i_cline];
-			r_addr <= i_addr[(AW+1):2];
 			r_cachable <= (!i_op[0])&&(w_cachable)&&(i_pipe_stb);
 			o_wreg <= i_oreg;
 			r_rd_pending <= (i_pipe_stb)&&(!i_op[0]);
 		end else begin
 			r_iv   <= c_v[r_cline];
 			r_itag <= c_vtags[r_cline];
-			r_rd_pending <= (r_rd_pending)&&((r_itag != r_ctag)
-				||(!r_iv)||(!r_cachable))&&(!r_svalid);
+			r_rd_pending <= (r_rd_pending)&&(!r_svalid)
+					&&(!r_dvalid)
+					&&((r_cachable)||(!i_wb_ack));
 		end
 		r_rd <= (i_pipe_stb)&&(!i_op[0]);
 		// r_itag contains the tag we didn't have available to us on the

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_pipe_stalled
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: r_rd_pending
    INS list@@elifs to 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: r_cachable
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: i_wb_ack

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                MOV list@@ops to OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NE
                                list: ops
                                    HdlValueId: r_itag
                                    HdlValueId: r_ctag
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: r_iv
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: r_cachable
                UPD HdlOp@@OR_LOG to AND_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    UPD HdlOp@@NE to NE
                        UPD HdlValueId@@r_itag to r_rd_pending
                        MOV HdlValueId@@r_itag to ops
                        HdlValueId: r_itag
                        DEL HdlValueId@@r_ctag from ops
                        DEL list@@ops from NE
                    DEL HdlOp@@NE from ops
                    DEL HdlOp@@NEG_LOG from ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: r_iv
                UPD HdlOp@@NEG_LOG to NEG_LOG
                    UPD HdlValueId@@r_cachable to r_dvalid
            DEL HdlValueId@@r_rd_pending from ops
            DEL HdlOp@@OR_LOG from ops
            DEL list@@ops from AND_LOG
        MOV HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: r_svalid


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -295,8 +299,9 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 		endcase
 	end
 
-	reg	[1:0]	state;
-
+	reg			set_vflag;
+	reg	[1:0]		state;
+	reg	[LS+1:0]	npending;
 	reg	[(CS-1):0]	wr_addr;
 
 	initial	r_wb_cyc_gbl = 0;

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: stb
                    HdlValueInt: 0
            HdlStmWait:
                list: val


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -321,16 +327,18 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 		last_line_stb <= 1'b0;
 		end_of_line <= 1'b0;
 		state <= `DC_IDLE;
-		last_ack <= 1'b0;
 		cyc <= 1'b0;
+		stb <= 1'b0;
 		state <= `DC_IDLE;
+		set_vflag <= 1'b0;
 	end else begin
 		// By default, update the cache from the write 1-clock ago
 		// c_wr <= (wr_cstb)&&(wr_wtag == wr_vtag);
 		// c_waddr <= wr_addr[(CS-1):0];
 		c_wr <= 0;
 
-		if ((c_wr)&&(!cyc))
+		set_vflag <= 1'b0;
+		if ((!cyc)&&(set_vflag))
 			c_v[c_waddr[(CS-1):LS]] <= 1'b1;
 
 		wr_cstb <= 1'b0;

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: set_vflag

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        DEL HdlValueId@@c_wr from ops


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -450,11 +455,7 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 			c_waddr <= ((i_wb_ack)?(c_waddr+1'b1):c_waddr);
 			c_wsel  <= 4'hf;
 
-			if (i_wb_ack)
-				last_ack <= last_ack || (&wr_addr[LS-1:1]);
-			else
-				last_ack <= last_ack || (&wr_addr[LS-1:0]);
-
+			set_vflag <= 1'b1;
 			if ((i_wb_ack)&&(!end_of_line))
 				c_vtags[r_addr[(CS-1):LS]]
 						<= r_addr[(AW-1):LS];

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: stb


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -512,13 +515,16 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 
 			wr_cstb  <= (stb)&&(!i_wb_stall)&&(in_cache);
 
-			if ((stb)&&(!i_wb_stall)&&(i_pipe_stb))
+			if ((stb)&&(!i_wb_stall))
 				o_wb_addr <= i_addr[(AW+1):2];
 
-			if (((i_wb_ack)&&(last_ack))||(i_wb_err))
+			if (((i_wb_ack)&&(last_ack)
+						&&((!OPT_PIPE)||(!i_pipe_stb)))
+				||(i_wb_err))
 			begin
 				state        <= `DC_IDLE;
 				cyc          <= 1'b0;
+				stb          <= 1'b0;
 				r_wb_cyc_gbl <= 1'b0;
 				r_wb_cyc_lcl <= 1'b0;
 				o_wb_stb_gbl <= 1'b0;

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmIf: body
        HdlOp: OR_LOG
            list: ops
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlValueId: i_reset
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: OPT_PIPE
                                HdlValueId: i_wb_err
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: cyc
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: i_pipe_stb
                HdlOp: EQ
                    list: ops
                        HdlValueId: state
                        HdlValueInt: 11
        HdlStmAssign: if_true
            HdlValueInt: 0
            HdlValueId: npending
        list: elifs
        HdlStmCase: {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops':}]} 
            HdlStmCaseType: CASE
            HdlOp: CONCAT
                list: ops
                    HdlValueId: i_pipe_stb
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: cyc
                            HdlValueId: i_wb_ack
            list: cases
                tuple
                    HdlValueInt: 01
                    HdlStmAssign
                        HdlOp: SUB
                            list: ops
                                HdlValueId: npending
                                HdlValueInt: 1
                        HdlValueId: npending
                tuple
                    HdlValueInt: 10
                    HdlStmAssign
                        HdlOp: ADD
                            list: ops
                                HdlValueId: npending
                                HdlValueInt: 1
                        HdlValueId: npending
            HdlStmBlock: SEQ
                list: body

UPD HdlStmIf@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlOp@@OR_LOG to ops
            HdlOp: OR_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: OPT_PIPE
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: i_pipe_stb

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: stb

UPD HdlStmIf@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: i_wb_ack
                HdlValueId: last_ack


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/dcache.v
+++ b/rtl/core/dcache.v
@@ -622,7 +661,13 @@ module	dcache(i_clk, i_reset, i_pipe_stb, i_lock,
 	// to be the last_noncachable_ack.
 
 
-	assign o_pipe_stalled= o_busy;
+	always @(*)
+	if (OPT_PIPE)
+		o_pipe_stalled = (cyc)&&((!o_wb_we)||(i_wb_stall))
+					||(r_rd_pending)||(r_svalid)||(r_dvalid)
+					||(o_valid);
+	else
+		o_pipe_stalled = o_busy;
 
 	reg	lock_gbl, lock_lcl;
 	initial	lock_gbl = 0;

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlAll
    HdlStmIf: body
        HdlValueId: OPT_PIPE
        HdlOp: ASSIGN
            list: ops
                HdlValueId: o_pipe_stalled
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: OR_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlValueId: cyc
                                                        HdlOp: OR_LOG
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: o_wb_we
                                                                HdlValueId: i_wb_stall
                                                HdlValueId: r_rd_pending
                                        HdlValueId: r_svalid
                                HdlValueId: r_dvalid
                        HdlValueId: o_valid
        list: elifs
        HdlOp: ASSIGN
            list: ops
                HdlValueId: o_pipe_stalled
                HdlValueId: o_busy


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/axiicache.v
+++ b/rtl/core/axiicache.v
@@ -78,6 +78,7 @@ module	axiicache #(
 		parameter	C_AXI_ID_WIDTH = 1,
 		parameter	C_AXI_ADDR_WIDTH = 32,
 		parameter	C_AXI_DATA_WIDTH = 32,
+		parameter [0:0]	OPT_LOWPOWER = 1'b0,
 		//
 		// SWAP_ENDIANNESS
 		parameter [0:0]	SWAP_ENDIANNESS = 1'b0,

ParseResult:
INS HdlIdDef@@OPT_LOWPOWER to params
HdlIdDef: OPT_LOWPOWER
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -217,16 +217,21 @@ module	idecode #(
 	assign	w_sto    = (w_mem)&&( w_cis_op[0]);
 	assign	w_div    = (!iword[CISBIT])&&(w_op[4:1] == 4'h7);
 	assign	w_fpu    = (!iword[CISBIT])&&(w_op[4:3] == 2'b11)
-				&&(w_dcdR[3:1] != 3'h7)&&(w_op[2:1] != 2'b00);
+				&&(w_dcdR[3:1] != 3'h7)
+				&&(w_op[2:1] != 2'b00);
 	// If the result register is either CC or PC, and this would otherwise
 	// be a floating point instruction with floating point opcode of 0,
 	// then this is a NOOP.
-	assign	w_special= (!iword[CISBIT])&&((!OPT_FPU)||(w_dcdR[3:1]==3'h7))
+	assign	w_special= (!iword[CISBIT])&&(w_dcdR[3:1]==3'h7)
 			&&(w_op[4:2] == 3'b111);
 	assign	w_break = (w_special)&&(w_op[4:0]==5'h1c);
 	assign	w_lock  = (w_special)&&(w_op[4:0]==5'h1d);
 	assign	w_sim   = (w_special)&&(w_op[4:0]==5'h1e);
 	assign	w_noop  = (w_special)&&(w_op[4:1]==4'hf); // Must include w_sim
+`ifdef	FORMAL
+	always @(*)
+		assert(!w_special || !w_fpu);
+`endif
 	// }}}
 
 	// w_dcdR, w_dcdA

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: iword
                                HdlValueId: CISBIT
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_FPU
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_dcdR
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueInt: 1
                                HdlValueInt: 7
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@OR_LOG to AND_LOG
            MOV HdlOp@@NEG_LOG to ops
            HdlOp: NEG_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: iword
                            HdlValueId: CISBIT
            UPD HdlOp@@OR_LOG to OR_LOG
                DEL HdlOp@@NEG_LOG from ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: OPT_FPU
        MOV HdlOp@@EQ to ops
        HdlOp: EQ
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: w_op
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 4
                                HdlValueInt: 2
                HdlValueInt: 111
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -277,7 +282,7 @@ module	idecode #(
 	// rA - do we need to read register A?
 	// {{{
 	assign	w_rA = // Floating point reads reg A
-			((w_fpu)&&(OPT_FPU))
+			(w_fpu)
 			// Divide's read A
 			||(w_div)
 			// ALU ops read A,

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    UPD HdlOp@@AND_LOG to AND_LOG
                        MOV HdlValueId@@w_fpu to ops
                        HdlValueId: w_fpu
                        DEL HdlValueId@@OPT_FPU from ops
                        DEL list@@ops from AND_LOG
                    DEL HdlOp@@AND_LOG from ops


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -314,7 +319,7 @@ module	idecode #(
 	// wF -- do we write flags when we are done?
 	// {{{
 	assign	w_wF     = (w_cmptst)
-			||((w_cond[3])&&(((w_fpu)&&(OPT_FPU))||(w_div)
+			||((w_cond[3])&&(w_fpu||w_div
 				||((w_ALU)&&(!w_mov)&&(!w_ldilo)&&(!w_brev)
 					&&(w_dcdR[3:1] != 3'h7))));
 	// }}}

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    UPD HdlOp@@AND_LOG to AND_LOG
                        MOV HdlValueId@@w_fpu to ops
                        HdlValueId: w_fpu
                        DEL HdlValueId@@OPT_FPU from ops
                        DEL list@@ops from AND_LOG
                    DEL HdlOp@@AND_LOG from ops


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -45,7 +45,7 @@
 module	pipemem #(
 		// {{{
 		parameter	ADDRESS_WIDTH=30,
-		parameter [0:0]	IMPLEMENT_LOCK=1'b1,
+		parameter [0:0]	OPT_LOCK=1'b1,
 				WITH_LOCAL_BUS=1'b1,
 				OPT_ZERO_ON_IDLE=1'b0,
 				// OPT_ALIGNMENT_ERR

ParseResult:
UPD HdlIdDef@@IMPLEMENT_LOCK to OPT_LOCK


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -352,7 +354,7 @@ module	pipemem #(
 	// lock_gbl, lock_lcl
 	// {{{
 	generate
-	if (IMPLEMENT_LOCK != 0)
+	if (OPT_LOCK)
 	begin : LOCK_REGISTER
 		// {{{
 		reg	lock_gbl, lock_lcl;

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@NE to NE
        UPD HdlValueId@@IMPLEMENT_LOCK to OPT_LOCK
        MOV HdlValueId@@IMPLEMENT_LOCK to ops
        HdlValueId: IMPLEMENT_LOCK
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from NE
    DEL HdlOp@@NE from 


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -60,7 +60,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 			i_illegal,
 		o_valid,
 		o_phase, o_illegal,
-		o_pc, o_gie,
+		o_pc,
 		o_dcdR, o_dcdA, o_dcdB, o_I, o_zI,
 		o_cond, o_wF,
 		o_op, o_ALU, o_M, o_DV, o_FP, o_break, o_lock,

ParseResult:
DEL HdlIdDef@@o_gie from ports
HdlIdDef: o_gie
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: OUT


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -75,11 +75,12 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	parameter		ADDRESS_WIDTH=24;
 	parameter	[0:0]	OPT_MPY = 1'b1;
 	parameter	[0:0]	OPT_EARLY_BRANCHING = 1'b1;
-	parameter	[0:0]	OPT_DIVIDE = 1'b1;
+	parameter	[0:0]	OPT_PIPELINED = 1'b0;
+	parameter	[0:0]	OPT_DIVIDE = (OPT_PIPELINED);
 	parameter	[0:0]	OPT_FPU    = 1'b0;
 	parameter	[0:0]	OPT_CIS    = 1'b1;
-	parameter	[0:0]	OPT_LOCK   = 1'b1;
-	parameter	[0:0]	OPT_OPIPE  = 1'b1;
+	parameter	[0:0]	OPT_LOCK   = (OPT_PIPELINED);
+	parameter	[0:0]	OPT_OPIPE  = (OPT_PIPELINED);
 	parameter	[0:0]	OPT_SIM    = 1'b0;
 	localparam		AW = ADDRESS_WIDTH;
 	//

ParseResult:
INS HdlIdDef@@OPT_PIPELINED to params

UPD HdlIdDef@@OPT_PIPELINED to OPT_PIPELINED
    INS HdlOp@@PARAMETRIZATION to OPT_PIPELINED
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    INS HdlDirection@@INTERNAL to OPT_PIPELINED

UPD HdlIdDef@@OPT_DIVIDE to OPT_DIVIDE
    UPD HdlValueInt@@1 to 0
    MOV HdlValueInt@@1 to OPT_DIVIDE
    HdlValueInt: 1

UPD HdlIdDef@@OPT_DIVIDE to OPT_DIVIDE
    INS HdlValueId@@OPT_PIPELINED to OPT_DIVIDE

UPD HdlIdDef@@OPT_LOCK to OPT_LOCK
    INS HdlValueId@@OPT_PIPELINED to OPT_LOCK

UPD HdlIdDef@@OPT_OPIPE to OPT_OPIPE
    INS HdlValueId@@OPT_PIPELINED to OPT_OPIPE

UPD HdlIdDef@@OPT_LOCK to OPT_LOCK
    DEL HdlValueInt@@1 from OPT_LOCK

UPD HdlIdDef@@OPT_OPIPE to OPT_OPIPE
    DEL HdlValueInt@@1 from OPT_OPIPE


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -382,12 +382,14 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 
 	initial	o_illegal = 1'b0;
 	always @(posedge i_clk)
-		if (i_reset)
-			o_illegal <= 1'b0;
-		else if (i_ce)
+		if (i_ce)
 		begin
-			o_illegal <= (i_illegal)&&((!o_phase)||(!o_valid))
-				||((o_illegal)&&(o_phase)&&(o_valid));
+			if (OPT_PIPELINED)
+				o_illegal <= ((i_illegal)
+						&&((!o_phase)||(!o_valid)))
+					||((o_illegal)&&(o_phase)&&(o_valid));
+			else
+				o_illegal <= (i_illegal)&&(!o_phase);
 			if ((!OPT_CIS)&&(i_instruction[`CISBIT]))
 				o_illegal <= 1'b1;
 			if ((!OPT_MPY)&&(w_mpy))

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlValueId@@i_ce to 
    HdlValueId: i_ce
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: i_illegal
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: o_phase
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: o_valid
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: o_illegal
                                        HdlValueId: o_phase
                                HdlValueId: o_valid
                HdlValueId: o_illegal
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_CIS
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_instruction
                                HdlValueInt: 31
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_MPY
                        HdlValueId: w_mpy
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_DIVIDE
                        HdlValueId: w_div
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
                    tuple
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: OPT_DIVIDE
                                        HdlValueId: w_div
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: w_dcdR
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 1
                                        HdlValueInt: 7
                        HdlStmAssign
                            HdlValueInt: 1
                            HdlValueId: o_illegal
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_FPU
                        HdlValueId: w_fpu
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_SIM
                        HdlValueId: w_sim
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_dcdR
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueInt: 1
                                HdlValueInt: 7
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_cis_op
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 4
                                                HdlValueInt: 1
                                HdlValueInt: 1101
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_LOCK
                        HdlValueId: w_lock
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmIf@@body to body
    INS list@@elifs to body

INS HdlStmIf@@ to body

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_PIPELINED to 
    INS list@@elifs to 

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: OR_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: i_illegal
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: o_phase
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: o_valid
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlValueId: o_illegal
                            HdlValueId: o_phase
                    HdlValueId: o_valid
    HdlValueId: o_illegal

INS HdlStmAssign@@if_false to 

UPD HdlStmAssign@@if_false to if_false
    INS HdlValueId@@o_illegal to if_false

DEL HdlStmAssign@@if_true from body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: o_illegal


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -418,22 +420,9 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 				o_illegal <= 1'b1;
 		end
 
-	initial	o_gie = 0;
-	always @(posedge i_clk)
-	if (i_reset)
-		o_gie <= i_gie;
-	else if (OPT_CIS)
-	begin
-		if ((i_ce)&&(!o_phase))
-			o_gie <= i_gie;
-	end else if (i_ce)
-		o_gie <= i_gie;
-
 	initial	o_pc = 0;
 	always @(posedge i_clk)
-	if (i_reset)
-		o_pc <= 0;
-	else if ((i_ce)&&((o_phase)||(i_pf_valid)))
+	if ((i_ce)&&((o_phase)||(i_pf_valid)))
 	begin
 		o_pc[0] <= 1'b0;
 

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlValueId@@i_ce to 
    HdlValueId: i_ce
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlValueId: i_illegal
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: o_phase
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: o_valid
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: o_illegal
                                        HdlValueId: o_phase
                                HdlValueId: o_valid
                HdlValueId: o_illegal
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_CIS
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: i_instruction
                                HdlValueInt: 31
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_MPY
                        HdlValueId: w_mpy
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_DIVIDE
                        HdlValueId: w_div
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
                    tuple
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: OPT_DIVIDE
                                        HdlValueId: w_div
                                HdlOp: EQ
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: w_dcdR
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 3
                                                        HdlValueInt: 1
                                        HdlValueInt: 7
                        HdlStmAssign
                            HdlValueInt: 1
                            HdlValueId: o_illegal
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_FPU
                        HdlValueId: w_fpu
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_SIM
                        HdlValueId: w_sim
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_dcdR
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueInt: 1
                                HdlValueInt: 7
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: w_cis_op
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 4
                                                HdlValueInt: 1
                                HdlValueInt: 1101
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: OPT_LOCK
                        HdlValueId: w_lock
                HdlStmAssign: if_true
                    HdlValueInt: 1
                    HdlValueId: o_illegal
                list: elifs
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmIf@@body to body
    INS list@@elifs to body

UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_ce
            HdlOp: OR_LOG
                list: ops
                    HdlValueId: o_phase
                    HdlValueId: i_pf_valid
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlOp: INDEX
                    list: ops
                        HdlValueId: o_pc
                        HdlValueInt: 0
            HdlStmIf
                HdlValueId: OPT_CIS
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: iword
                                    HdlValueInt: 31
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlValueId: o_phase
                                        HdlStmAssign: if_true
                                            HdlOp: ADD
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: o_pc
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlOp: ADD
                                                                        list: ops
                                                                            HdlValueId: AW
                                                                            HdlValueInt: 1
                                                                    HdlValueInt: 1
                                                    HdlValueInt: 1
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: o_pc
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlOp: ADD
                                                                list: ops
                                                                    HdlValueId: AW
                                                                    HdlValueInt: 1
                                                            HdlValueInt: 1
                                        list: elifs
                                        HdlStmAssign: if_false
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_pc
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlOp: ADD
                                                                                list: ops
                                                                                    HdlValueId: AW
                                                                                    HdlValueInt: 1
                                                                            HdlValueInt: 2
                                                            HdlValueInt: 1
                                                    HdlValueInt: 0
                                            HdlValueId: o_pc
                            list: elifs
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmAssign
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: ADD
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: i_pc
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlOp: ADD
                                                                            list: ops
                                                                                HdlValueId: AW
                                                                                HdlValueInt: 1
                                                                        HdlValueInt: 2
                                                        HdlValueInt: 1
                                                HdlValueInt: 00
                                        HdlValueId: o_pc
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: ADD
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: i_pc
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlOp: ADD
                                                                list: ops
                                                                    HdlValueId: AW
                                                                    HdlValueInt: 1
                                                            HdlValueInt: 2
                                            HdlValueInt: 1
                                    HdlValueInt: 00
                            HdlValueId: o_pc
    DEL HdlValueId@@i_reset from body
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmIf@@body to body
    INS list@@elifs to body

MOV HdlStmWait@@[] to body
HdlStmWait:
    list: val

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmIf@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_ce
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_phase
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@i_ce to i_illegal
    DEL list@@elifs from 

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL HdlOp@@ASSIGN from body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: o_gie
                HdlValueInt: 0
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

DEL HdlStmProcess@@ from objs

UPD HdlStmIf@@body to body
    DEL HdlValueId@@i_reset from body
    DEL HdlValueId@@OPT_CIS from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL tuple@@ from elifs
    DEL tuple@@ from elifs
    tuple
        HdlValueId: i_ce
        HdlStmAssign
            HdlValueId: i_gie
            HdlValueId: o_gie
    DEL list@@elifs from body

DEL HdlStmAssign@@if_true from body
HdlStmAssign: if_true
    HdlValueId: i_gie
    HdlValueId: o_gie

DEL HdlStmAssign@@if_true from 
HdlStmAssign: if_true
    HdlValueId: i_gie
    HdlValueId: o_gie

DEL HdlStmIf@@ from body

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs

DEL HdlStmAssign@@if_true from body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: o_pc


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -460,6 +449,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	initial	o_dcdB = 0;
 	initial	o_DV   = 0;
 	initial	o_FP   = 0;
+	initial	o_lock = 0;
 	always @(posedge i_clk)
 		if (i_ce)
 		begin

ParseResult:
INS HdlStmProcess@@ to objs


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -483,7 +473,9 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 			// o_FP plus these four bits uniquely defines the FP
 			// instruction, o_DV plus the bottom of these defines
 			// the divide, etc.
-			o_op <= ((w_ldi)||(w_noop))? 4'hd : w_cis_op[3:0];
+			o_op <= w_cis_op[3:0];
+			if ((w_ldi)||(w_noop)||(w_lock))
+				o_op <= 4'hd;
 
 			// Default values
 			o_dcdR <= { w_dcdR_cc, w_dcdR_pc, w_dcdR};

ParseResult:
INS HdlStmIf@@ to body

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: w_cis_op
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 3
                        HdlValueInt: 0
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlValueId: w_ldi
                HdlValueId: w_noop
        DEL HdlValueInt@@d from ops
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from 

UPD HdlStmIf@@ to 
    INS HdlOp@@OR_LOG to 
    INS list@@elifs to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlValueId@@w_lock to ops

INS HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueInt: d
    HdlValueId: o_op


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -500,7 +492,8 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 			// as it doesn't take longer than one clock.  Note
 			// also that this depends upon not setting any registers
 			// or flags, which should already be true.
-			o_ALU  <=  (w_ALU)||(w_ldi)||(w_cmptst)||(w_noop);
+			o_ALU  <=  (w_ALU)||(w_ldi)||(w_cmptst)||(w_noop)
+					||((!OPT_LOCK)&&(w_lock));
 			o_M    <=  w_mem;
 			o_DV   <=  (OPT_DIVIDE)&&(w_div);
 			o_FP   <=  (OPT_FPU)&&(w_fpu);

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@OR_LOG to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: OPT_LOCK
                HdlValueId: w_lock

UPD HdlStmAssign@@ to 
    MOV HdlOp@@OR_LOG to 
    HdlOp: OR_LOG
        list: ops
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlValueId: w_ALU
                            HdlValueId: w_ldi
                    HdlValueId: w_cmptst
            HdlValueId: w_noop


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -616,6 +609,11 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 		assign	o_early_branch_stb = 1'b0;
 		assign	o_branch_pc = {(AW+2){1'b0}};
 		assign	o_ljmp = 1'b0;
+
+		// verilator lint_off UNUSED
+		wire	early_branch_unused;
+		assign	early_branch_unused = w_add;
+		// verilator lint_on  UNUSED
 	end endgenerate
 
 

ParseResult:
INS HdlIdDef@@early_branch_unused to body
HdlIdDef: early_branch_unused
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: w_add
    HdlValueId: early_branch_unused


CommitId: b2188af8d11cd5d00d76e3891d33f26f5e1ae044
Changes to get ZBasic and S6Soc building and working under test
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -676,14 +672,29 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 	end endgenerate
 
 	initial	r_valid = 1'b0;
-	always @(posedge i_clk)
+	generate if (OPT_PIPELINED)
+	begin : GEN_DCD_VALID
+
+		always @(posedge i_clk)
+			if (i_reset)
+				r_valid <= 1'b0;
+			else if (i_ce)
+				r_valid <= ((pf_valid)||(o_phase))&&(!o_ljmp);
+			else if (!i_stalled)
+				r_valid <= 1'b0;
+
+	end else begin : GEN_DCD_VALID
+
+		always @(posedge i_clk)
 		if (i_reset)
 			r_valid <= 1'b0;
-		else if (i_ce)
-			r_valid <= ((pf_valid)||(o_phase))&&(!o_ljmp);
 		else if (!i_stalled)
+			r_valid <= ((pf_valid)||(o_phase))&&(!o_ljmp);
+		else
 			r_valid <= 1'b0;
 
+	end endgenerate
+
 	assign	o_valid = r_valid;
 
 

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_PIPELINED to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmIf: body
        HdlValueId: i_reset
        HdlStmAssign: if_true
            HdlValueInt: 0
            HdlValueId: r_valid
        list: elifs
            tuple
                HdlValueId: i_ce
                HdlStmAssign
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: OR_LOG
                                list: ops
                                    HdlValueId: pf_valid
                                    HdlValueId: o_phase
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: o_ljmp
                    HdlValueId: r_valid
            tuple
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: i_stalled
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: r_valid

INS HdlStmProcess@@ to body

INS HdlStmIf@@body to 
HdlStmIf: body
    HdlValueId: i_reset
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: r_valid
    list: elifs
        tuple
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: i_stalled
            HdlStmAssign
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: OR_LOG
                            list: ops
                                HdlValueId: pf_valid
                                HdlValueId: o_phase
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: o_ljmp
                HdlValueId: r_valid
    HdlStmAssign: if_false
        HdlValueInt: 0
        HdlValueId: r_valid


CommitId: 9af52786b0b0f50eeecb3d77de9283df0c696728
DCACHE: Minor fixes, removed unused code, blocking vs non-blocking, etc.
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -1235,7 +1183,7 @@ module	axidcache #(
 		if (!S_AXI_ARESETN)
 		begin
 			r_pipe_stalled <= 1'b0;
-			r_pipe_code = 4'h0;
+			r_pipe_code <= 4'h0;
 		end else begin
 			// Clear any stall on the last outstanding bus response
 			if ((!OPT_WRAP && r_dvalid)

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            MOV HdlValueId@@r_pipe_code to ops
            HdlValueId: r_pipe_code
            DEL HdlValueInt@@0 from ops
            DEL list@@ops from ASSIGN
        DEL HdlOp@@ASSIGN from body


CommitId: 9af52786b0b0f50eeecb3d77de9283df0c696728
DCACHE: Minor fixes, removed unused code, blocking vs non-blocking, etc.
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -1328,6 +1276,10 @@ module	axidcache #(
 		assign	w_pipe_stalled = r_pipe_stalled;
 		assign	o_pipe_stalled = pipe_stalled;
 
+		// Verilator lint_off UNUSED
+		wire	unused_pipe;
+		assign	unused_pipe = &{ 1'b0, r_pipe_code };
+		// Verilator lint_on  UNUSED
 `ifdef	FORMAL
 		always @(*)
 		if (S_AXI_ARESETN && locked_write_in_progress)
ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: AND_UNARY
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlValueInt: 0
                    HdlValueId: r_pipe_code
    HdlValueId: unused_pipe


CommitId: 258d09a37506b2636adc49c93a9682831afad258
Fixed an errant blocking assignmeent in the updated ziptimer.v
--- a/rtl/peripherals/ziptimer.v
+++ b/rtl/peripherals/ziptimer.v
@@ -156,7 +156,7 @@ module	ziptimer(i_clk, i_reset, i_ce,
 	reg	r_zero  = 1'b1;
 	always @(posedge i_clk)
 		if (i_reset)
-			r_zero = 1'b1;
+			r_zero <= 1'b1;
 		else if (wb_write)
 			r_zero <= (i_wb_data[(VW-1):0] == 0);
 		else if ((r_running)&&(i_ce))
ParseResult:
INS HdlStmAssign@@if_true to body

UPD HdlStmAssign@@if_true to if_true
    INS HdlValueInt@@1 to if_true

UPD HdlStmIf@@body to body
    UPD HdlOp@@ASSIGN to ASSIGN
        MOV HdlValueId@@r_zero to ops
        HdlValueId: r_zero
        DEL HdlValueInt@@1 from ops
        DEL list@@ops from ASSIGN
    DEL HdlOp@@ASSIGN from body


CommitId: 612ba5488528115e076578f621e676a2b03a6a1a
Testbench programs work again!
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -56,6 +56,7 @@ module	zipcore #(
 `endif
 		parameter [0:0]	OPT_EARLY_BRANCHING = 1,
 		parameter [0:0]	OPT_CIS = 1'b1,
+		parameter [0:0]	OPT_SIM = 1'b0,
 		parameter	[0:0]	OPT_PIPELINED = 1'b1,
 		parameter	[0:0]	OPT_PIPELINED_BUS_ACCESS = (OPT_PIPELINED),
 		parameter	[0:0]	IMPLEMENT_LOCK=1,

ParseResult:
INS HdlIdDef@@OPT_SIM to params
HdlIdDef: OPT_SIM
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 612ba5488528115e076578f621e676a2b03a6a1a
Testbench programs work again!
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -277,14 +278,10 @@ module	zipcore #(
 	wire	op_break;
 	wire	op_lock;
 
-`ifdef	VERILATOR
-	reg		op_sim		/* verilator public_flat */;
-	reg	[22:0]	op_sim_immv	/* verilator public_flat */;
-	reg		alu_sim		/* verilator public_flat */;
-	reg	[22:0]	alu_sim_immv	/* verilator public_flat */;
-`else
-	wire	op_sim = 1'b0;
-`endif
+	wire		op_sim		/* verilator public_flat */;
+	wire	[22:0]	op_sim_immv	/* verilator public_flat */;
+	wire		alu_sim		/* verilator public_flat */;
+	wire	[22:0]	alu_sim_immv	/* verilator public_flat */;
 	// }}}
 
 

ParseResult:
INS HdlIdDef@@alu_sim_immv to objs
HdlIdDef: alu_sim_immv
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 22
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 73c6fae1aac6cf941fb44b6612f2a66038917b22
BUF FIX: assert/else/asserts replaced
--- a/rtl/ex/skidbuffer.v
+++ b/rtl/ex/skidbuffer.v
@@ -96,21 +96,20 @@ module skidbuffer #(
 		// {{{
 		input	wire			i_clk, i_reset,
 		input	wire			i_valid,
-		output	reg			o_ready,
+		output	wire			o_ready,
 		input	wire	[DW-1:0]	i_data,
-		output	reg			o_valid,
+		output	wire			o_valid,
 		input	wire			i_ready,
 		output	reg	[DW-1:0]	o_data
 		// }}}
 	);
 
-	reg	[DW-1:0]	r_data;
+	wire	[DW-1:0]	w_data;
 
 	generate if (OPT_PASSTHROUGH)
 	begin : PASSTHROUGH
 		// {{{
-		always @(*)
-			{ o_valid, o_ready } = { i_valid, i_ready };
+		assign	{ o_valid, o_ready } = { i_valid, i_ready };
 
 		always @(*)
 		if (!i_valid && OPT_LOWPOWER)

ParseResult:
INS HdlIdDef@@w_data to objs
HdlIdDef: w_data
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@o_ready to ports
HdlIdDef: o_ready
    HdlDirection: OUT

INS HdlStmAssign@@ to body

MOV HdlIdDef@@r_data to objs
HdlIdDef: r_data
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        MOV HdlOp@@CONCAT to ops
        HdlOp: CONCAT
            list: ops
                HdlValueId: i_valid
                HdlValueId: i_ready
        MOV HdlOp@@CONCAT to ops
        HdlOp: CONCAT
            list: ops
                HdlValueId: o_valid
                HdlValueId: o_ready
        DEL list@@ops from ASSIGN
    DEL list@@sensitivity from 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 

UPD HdlIdDef@@o_ready to ro_valid

MOV HdlIdDef@@o_ready to ports
HdlIdDef: o_ready
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: OUT

UPD HdlIdDef@@o_ready to o_ready
    UPD HdlDirection@@OUT to INTERNAL

UPD HdlIdDef@@o_valid to o_valid
    DEL HdlOp@@PARAMETRIZATION from o_valid
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg

DEL HdlStmProcess@@ from body


CommitId: 73c6fae1aac6cf941fb44b6612f2a66038917b22
BUF FIX: assert/else/asserts replaced
--- a/rtl/ex/skidbuffer.v
+++ b/rtl/ex/skidbuffer.v
@@ -118,13 +117,13 @@ module skidbuffer #(
 		else
 			o_data = i_data;
 
-		always @(*)
-			r_data = 0;
+		assign	w_data = 0;
 		// }}}
 	end else begin : LOGIC
 		// We'll start with skid buffer itself
 		// {{{
 		reg			r_valid;
+		reg	[DW-1:0]	r_data;
 
 		// r_valid
 		// {{{

ParseResult:
INS HdlStmAssign@@ to body

UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        MOV HdlValueInt@@0 to ops
        HdlValueInt: 0
        DEL HdlValueId@@r_data from ops
        DEL list@@ops from ASSIGN
    DEL list@@sensitivity from 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 

UPD HdlStmAssign@@ to 
    INS HdlValueId@@w_data to 

DEL HdlStmProcess@@ from body


CommitId: 73c6fae1aac6cf941fb44b6612f2a66038917b22
BUF FIX: assert/else/asserts replaced
--- a/rtl/ex/skidbuffer.v
+++ b/rtl/ex/skidbuffer.v
@@ -149,12 +148,13 @@ module skidbuffer #(
 			r_data <= 0;
 		else if ((!OPT_LOWPOWER || !OPT_OUTREG || i_valid) && o_ready)
 			r_data <= i_data;
+
+		assign	w_data = r_data;
 		// }}}
 
 		// o_ready
 		// {{{
-		always @(*)
-			o_ready = !r_valid;
+		assign o_ready = !r_valid;
 		// }}}
 
 		//

ParseResult:
INS HdlStmAssign@@ to body

INS HdlStmAssign@@ to body

UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@o_ready to r_data
        MOV HdlValueId@@o_ready to ops
        HdlValueId: o_ready
        MOV HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: r_valid
        DEL list@@ops from ASSIGN
    DEL list@@sensitivity from 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 

UPD HdlStmAssign@@ to 
    INS HdlValueId@@w_data to 

UPD HdlStmAssign@@ to 
    INS HdlValueId@@o_ready to 

DEL HdlStmProcess@@ from body


CommitId: 73c6fae1aac6cf941fb44b6612f2a66038917b22
BUF FIX: assert/else/asserts replaced
--- a/rtl/ex/skidbuffer.v
+++ b/rtl/ex/skidbuffer.v
@@ -166,8 +166,7 @@ module skidbuffer #(
 			// {{{
 			// o_valid
 			// {{{
-			always @(*)
-				o_valid = !i_reset && (i_valid || r_valid);
+			assign	o_valid = !i_reset && (i_valid || r_valid);
 			// }}}
 
 			// o_data

ParseResult:
INS HdlStmAssign@@ to body

UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: i_reset
                HdlOp: OR_LOG
                    list: ops
                        HdlValueId: i_valid
                        HdlValueId: r_valid
        DEL HdlValueId@@o_valid from ops
        DEL list@@ops from ASSIGN
    DEL list@@sensitivity from 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 

UPD HdlStmAssign@@ to 
    INS HdlValueId@@o_valid to 

DEL HdlStmProcess@@ from body


CommitId: 73c6fae1aac6cf941fb44b6612f2a66038917b22
BUF FIX: assert/else/asserts replaced
--- a/rtl/ex/skidbuffer.v
+++ b/rtl/ex/skidbuffer.v
@@ -186,12 +185,16 @@ module skidbuffer #(
 			// {{{
 			// o_valid
 			// {{{
-			initial if (OPT_INITIAL) o_valid = 0;
+			reg	ro_valid;
+
+			initial if (OPT_INITIAL) ro_valid = 0;
 			always @(posedge i_clk)
 			if (i_reset)
-				o_valid <= 0;
+				ro_valid <= 0;
 			else if (!o_valid || i_ready)
-				o_valid <= (i_valid || r_valid);
+				ro_valid <= (i_valid || r_valid);
+
+			assign	o_valid = ro_valid;
 			// }}}
 
 			// o_data

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: ro_valid
    HdlValueId: o_valid

UPD HdlStmAssign@@if_true to if_true
    UPD HdlValueId@@o_valid to ro_valid

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@o_valid to ro_valid

UPD HdlStmIf@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@o_valid to ro_valid


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -49,15 +48,9 @@ module	axilops #(
 		localparam	AW = C_AXI_ADDR_WIDTH,
 		localparam	DW = C_AXI_DATA_WIDTH,
 		//
-		// AXI locks are a challenge, and require support from the
-		// CPU.  Specifically, we have to be able to unroll and re-do
-		// the load instruction on any atomic access failure.  For that
-		// reason, we'll ignore the lock request initially.
-		//
-		// parameter [0:0]	IMPLEMENT_LOCK=1'b1,
-		parameter [0:0]	OPT_ALIGNMENT_ERR = 1'b1,
-		parameter [0:0]	OPT_ZERO_ON_IDLE = 1'b0,
-		localparam	AXILLSB = $clog2(C_AXI_ADDR_WIDTH/8)
+		parameter [0:0]		OPT_ALIGNMENT_ERR = 1'b1,
+		parameter [0:0]		OPT_LOWPOWER = 1'b0,
+		localparam	AXILSB = $clog2(C_AXI_ADDR_WIDTH/8)
 		// }}}
 	) (
 		// {{{

ParseResult:
UPD HdlIdDef@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER

UPD HdlIdDef@@AXILLSB to AXILSB


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -86,29 +79,29 @@ module	axilops #(
 		// {{{
 		output	reg				M_AXI_AWVALID,
 		input	wire				M_AXI_AWREADY,
-		output	reg [C_AXI_ADDR_WIDTH-1:0]	M_AXI_AWADDR,
-		output	reg	[2:0]			M_AXI_AWPROT,
+		output	reg	[AW-1:0]		M_AXI_AWADDR,
+		output	wire	[2:0]			M_AXI_AWPROT,
 		//
 		output	reg				M_AXI_WVALID,
 		input	wire				M_AXI_WREADY,
-		output	reg [C_AXI_DATA_WIDTH-1:0]	M_AXI_WDATA,
-		output	reg [C_AXI_DATA_WIDTH/8-1:0]	M_AXI_WSTRB,
+		output	reg	[DW-1:0]		M_AXI_WDATA,
+		output	reg	[DW/8-1:0]		M_AXI_WSTRB,
 		//
 		input	wire				M_AXI_BVALID,
 		output	reg				M_AXI_BREADY,
-		input	wire [1:0]			M_AXI_BRESP,
+		input	wire	[1:0]			M_AXI_BRESP,
 		// }}}
 		// Reads
 		// {{{
 		output	reg				M_AXI_ARVALID,
 		input	wire				M_AXI_ARREADY,
-		output	reg [C_AXI_ADDR_WIDTH-1:0]	M_AXI_ARADDR,
-		output	reg	[2:0]			M_AXI_ARPROT,
+		output	reg	[AW-1:0]		M_AXI_ARADDR,
+		output	wire	[2:0]			M_AXI_ARPROT,
 		//
 		input	wire				M_AXI_RVALID,
 		output	reg				M_AXI_RREADY,
-		input	wire [C_AXI_DATA_WIDTH-1:0]	M_AXI_RDATA,
-		input	wire [1:0]			M_AXI_RRESP
+		input	wire	[DW-1:0]		M_AXI_RDATA,
+		input	wire	[1:0]			M_AXI_RRESP
 		// }}}
 		// }}}
 	);

ParseResult:
UPD HdlIdDef@@M_AXI_AWPROT to M_AXI_AWPROT
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@reg to wire

UPD HdlIdDef@@M_AXI_ARPROT to M_AXI_ARPROT
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@reg to wire

UPD HdlIdDef@@M_AXI_AWADDR to M_AXI_AWADDR
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@C_AXI_ADDR_WIDTH to AW

UPD HdlIdDef@@M_AXI_WDATA to M_AXI_WDATA
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@C_AXI_DATA_WIDTH to DW

UPD HdlIdDef@@M_AXI_ARADDR to M_AXI_ARADDR
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@C_AXI_ADDR_WIDTH to AW

UPD HdlIdDef@@M_AXI_RDATA to M_AXI_RDATA
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@C_AXI_DATA_WIDTH to DW

UPD HdlIdDef@@M_AXI_WSTRB to M_AXI_WSTRB
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlOp@@DIV to DIV
                    UPD HdlValueId@@C_AXI_DATA_WIDTH to DW


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -116,27 +109,32 @@ module	axilops #(
 	// Declarations
 	// {{{
 	wire	i_clk = S_AXI_ACLK;
-	wire	i_reset = !S_AXI_ARESETN;
+	// wire	i_reset = !S_AXI_ARESETN;
 
 	reg	misaligned_request, w_misaligned, misaligned_aw_request,
-		misaligned_response_pending,pending_err, misaligned_read;
+		misaligned_response_pending,pending_err, misaligned_read,
+		w_misalignment_err;
 	reg	r_flushing;
 	reg	[3:0]			r_op;
-	reg	[C_AXI_DATA_WIDTH-1:0]	next_wdata;
-	reg [C_AXI_DATA_WIDTH/8-1:0]	next_wstrb;
+	reg	[DW-1:0]		next_wdata;
+	reg	[DW/8-1:0]		next_wstrb;
 	reg	[31:0]			last_result;
-	reg	[31:0]			endian_swapped_wdata;
+	// reg	[31:0]			endian_swapped_wdata;
 	// reg	[31:0]			endian_swapped_result;
-	reg [2*C_AXI_DATA_WIDTH/8-1:0]	shifted_wstrb_word,
+	reg	[2*DW/8-1:0]		shifted_wstrb_word,
 					shifted_wstrb_halfword,
 					shifted_wstrb_byte;
-	reg [2*C_AXI_DATA_WIDTH/8-1:0]	swapped_wstrb_word,
+	reg	[2*DW/8-1:0]		swapped_wstrb_word,
 					swapped_wstrb_halfword,
 					swapped_wstrb_byte;
-	reg	[C_AXI_DATA_WIDTH-1:0]	axi_wdata;
-	reg [C_AXI_DATA_WIDTH/8-1:0]	axi_wstrb;
+	reg	[DW-1:0]		axi_wdata;
+	reg	[DW/8-1:0]		axi_wstrb;
+	reg	[AXILSB-1:0]		swapaddr;
+
 	// }}}
 
+	// xVALID, and xREADY
+	// {{{
 	initial	M_AXI_AWVALID = 1'b0;
 	initial	M_AXI_WVALID = 1'b0;
 	initial	M_AXI_ARVALID = 1'b0;

ParseResult:
INS HdlIdDef@@w_misalignment_err to objs
HdlIdDef: w_misalignment_err
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

INS HdlIdDef@@next_wdata to objs
HdlIdDef: next_wdata
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@next_wstrb to objs
HdlIdDef: next_wstrb
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@shifted_wstrb_word to objs
HdlIdDef: shifted_wstrb_word
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueId: DW
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@shifted_wstrb_halfword to objs
HdlIdDef: shifted_wstrb_halfword
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueId: DW
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@shifted_wstrb_byte to objs
HdlIdDef: shifted_wstrb_byte
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueId: DW
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@swapped_wstrb_word to objs
HdlIdDef: swapped_wstrb_word
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueId: DW
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@swapped_wstrb_halfword to objs
HdlIdDef: swapped_wstrb_halfword
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueId: DW
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@swapped_wstrb_byte to objs
HdlIdDef: swapped_wstrb_byte
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueId: DW
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@axi_wdata to objs
HdlIdDef: axi_wdata
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@axi_wstrb to objs
HdlIdDef: axi_wstrb
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DW
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@swapaddr to objs
HdlIdDef: swapaddr
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: AXILSB
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@i_reset from objs
HdlIdDef: i_reset
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: S_AXI_ARESETN
    HdlDirection: INTERNAL

DEL HdlIdDef@@next_wdata from objs
HdlIdDef: next_wdata
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: C_AXI_DATA_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@next_wstrb from objs
HdlIdDef: next_wstrb
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: C_AXI_DATA_WIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@endian_swapped_wdata from objs
HdlIdDef: endian_swapped_wdata
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@shifted_wstrb_word from objs
HdlIdDef: shifted_wstrb_word
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueId: C_AXI_DATA_WIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@shifted_wstrb_halfword from objs
HdlIdDef: shifted_wstrb_halfword
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueId: C_AXI_DATA_WIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@shifted_wstrb_byte from objs
HdlIdDef: shifted_wstrb_byte
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueId: C_AXI_DATA_WIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@swapped_wstrb_word from objs
HdlIdDef: swapped_wstrb_word
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueId: C_AXI_DATA_WIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@swapped_wstrb_halfword from objs
HdlIdDef: swapped_wstrb_halfword
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueId: C_AXI_DATA_WIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@swapped_wstrb_byte from objs
HdlIdDef: swapped_wstrb_byte
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueInt: 2
                                            HdlValueId: C_AXI_DATA_WIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@axi_wdata from objs
HdlIdDef: axi_wdata
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: C_AXI_DATA_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@axi_wstrb from objs
HdlIdDef: axi_wstrb
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: C_AXI_DATA_WIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -178,8 +176,7 @@ module	axilops #(
 		M_AXI_BREADY  <=  i_op[0];
 		M_AXI_RREADY  <= !i_op[0];
 
-		if (i_cpu_reset || o_err || !i_stb
-				|| (OPT_ALIGNMENT_ERR && w_misaligned))
+		if (i_cpu_reset || o_err || !i_stb || w_misalignment_err)
 		begin
 			M_AXI_AWVALID <= 0;
 			M_AXI_WVALID  <= 0;

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: OPT_ALIGNMENT_ERR
                HdlValueId: w_misaligned


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -190,6 +187,7 @@ module	axilops #(
 		end
 		// }}}
 	end
+	// }}}
 
 	// r_flushing
 	// {{{

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: OPT_ALIGNMENT_ERR
                HdlValueId: w_misaligned


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -213,28 +211,31 @@ module	axilops #(
 	// {{{
 	initial	M_AXI_AWADDR = 0;
 	always @(posedge i_clk)
-	if (!S_AXI_ARESETN && OPT_ZERO_ON_IDLE)
+	if (!S_AXI_ARESETN && OPT_LOWPOWER)
 		M_AXI_AWADDR <= 0;
 	else if (!M_AXI_BREADY && !M_AXI_RREADY)
-	begin
-		M_AXI_AWADDR <= (i_stb && OPT_ZERO_ON_IDLE) ? 0 : i_addr;
+	begin // Initial address
+		// {{{
+		M_AXI_AWADDR <= i_addr;
 
-		if (OPT_ZERO_ON_IDLE && !i_stb)
+		if (OPT_LOWPOWER && !i_stb)
 			M_AXI_AWADDR <= 0;
 
 		if (SWAP_WSTRB)
-			M_AXI_AWADDR[1:0] <= 2'b00;
-
+			M_AXI_AWADDR[AXILSB-1:0] <= 0;
+		// }}}
 	end else if ((M_AXI_AWVALID && M_AXI_AWREADY)
 			||(M_AXI_ARVALID && M_AXI_ARREADY))
-	begin
-		M_AXI_AWADDR[C_AXI_ADDR_WIDTH-1:AXILLSB]
-			<= M_AXI_AWADDR[C_AXI_ADDR_WIDTH-1:AXILLSB] + 1;
-		M_AXI_AWADDR[AXILLSB-1:0] <= 0;
+	begin // Subsequent addresses
+		// {{{
+		M_AXI_AWADDR[C_AXI_ADDR_WIDTH-1:AXILSB]
+			<= M_AXI_AWADDR[C_AXI_ADDR_WIDTH-1:AXILSB] + 1;
+		M_AXI_AWADDR[AXILSB-1:0] <= 0;
 
-		if (OPT_ZERO_ON_IDLE && ((M_AXI_RREADY && !misaligned_request)
+		if (OPT_LOWPOWER && ((M_AXI_RREADY && !misaligned_request)
 			|| (M_AXI_BREADY && !misaligned_aw_request)))
 			M_AXI_AWADDR <= 0;
+		// }}}
 	end
 
 	always @(*)

ParseResult:
UPD HdlStmProcess@@ to 
    INS HdlOp@@ASSIGN to 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: shifted_wstrb_word
            HdlOp: SLL
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: REPL_CONCAT
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlOp: DIV
                                                list: ops
                                                    HdlOp: MUL
                                                        list: ops
                                                            HdlValueInt: 2
                                                            HdlValueId: DW
                                                    HdlValueInt: 8
                                            HdlValueInt: 4
                                    HdlValueInt: 0
                            HdlValueInt: 1111
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AXILSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER

UPD HdlStmAssign@@if_true to if_true
    MOV HdlOp@@INDEX to if_true
    HdlOp: INDEX
        list: ops
            HdlValueId: M_AXI_AWADDR
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0
    UPD HdlValueInt@@00 to 0
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@M_AXI_AWADDR to swapaddr

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlValueId@@i_addr to ops
        HdlValueId: i_addr
        DEL HdlOp@@AND_LOG from ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: i_stb
                HdlValueId: OPT_ZERO_ON_IDLE
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from 

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueId@@AXILLSB to AXILSB
    UPD HdlOp@@ADD to ADD
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlValueId@@AXILLSB to AXILSB

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@AXILLSB to AXILSB


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -243,26 +244,26 @@ module	axilops #(
 
 	// AxPROT
 	// {{{
-	always @(*)
-	begin
-		M_AXI_AWPROT = 3'b000;
-		M_AXI_ARPROT = 3'b000;
-	end
+	localparam [2:0]	AXI_UNPRIVILEGED_NONSECURE_DATA_ACCESS = 3'h0;
+	localparam [2:0]	OPT_PROT=AXI_UNPRIVILEGED_NONSECURE_DATA_ACCESS;
+
+	assign	M_AXI_AWPROT  = OPT_PROT;
+	assign	M_AXI_ARPROT  = OPT_PROT;
 	// }}}
 
 	// shifted_wstrb_*
 	// {{{
 	always @(*)
-		shifted_wstrb_word = { {(C_AXI_DATA_WIDTH/8-4){1'b0}},
-						4'b1111} << i_addr[AXILLSB-1:0];
+		shifted_wstrb_word = { {(2*DW/8-4){1'b0}},
+						4'b1111} << i_addr[AXILSB-1:0];
 
 	always @(*)
-		shifted_wstrb_halfword = { {(C_AXI_DATA_WIDTH/8-4){1'b0}},
-						4'b0011} << i_addr[AXILLSB-1:0];
+		shifted_wstrb_halfword = { {(2*DW/8-4){1'b0}},
+						4'b0011} << i_addr[AXILSB-1:0];
 
 	always @(*)
-		shifted_wstrb_byte = { {(C_AXI_DATA_WIDTH/8-4){1'b0}},
-						4'b0001} << i_addr[AXILLSB-1:0];
+		shifted_wstrb_byte = { {(2*DW/8-4){1'b0}},
+						4'b0001} << i_addr[AXILSB-1:0];
 	// }}}
 
 	// Swapping WSTRB bits

ParseResult:
INS HdlIdDef@@AXI_UNPRIVILEGED_NONSECURE_DATA_ACCESS to objs
HdlIdDef: AXI_UNPRIVILEGED_NONSECURE_DATA_ACCESS
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@OPT_PROT to objs
HdlIdDef: OPT_PROT
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlValueId: AXI_UNPRIVILEGED_NONSECURE_DATA_ACCESS
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: OPT_PROT
    HdlValueId: M_AXI_AWPROT

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: OPT_PROT
    HdlValueId: M_AXI_ARPROT

INS HdlStmProcess@@ to objs

INS HdlStmProcess@@ to objs

INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: shifted_wstrb_word
            HdlOp: SLL
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: REPL_CONCAT
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlOp: DIV
                                                list: ops
                                                    HdlValueId: C_AXI_DATA_WIDTH
                                                    HdlValueInt: 8
                                            HdlValueInt: 4
                                    HdlValueInt: 0
                            HdlValueInt: 1111
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AXILLSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0

UPD HdlStmProcess@@ to 
    INS HdlOp@@ASSIGN to 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: shifted_wstrb_word
            HdlOp: SLL
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: REPL_CONCAT
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlOp: DIV
                                                list: ops
                                                    HdlOp: MUL
                                                        list: ops
                                                            HdlValueInt: 2
                                                            HdlValueId: DW
                                                    HdlValueInt: 8
                                            HdlValueInt: 4
                                    HdlValueInt: 0
                            HdlValueInt: 1111
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AXILSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: shifted_wstrb_halfword
            HdlOp: SLL
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: REPL_CONCAT
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlOp: DIV
                                                list: ops
                                                    HdlValueId: C_AXI_DATA_WIDTH
                                                    HdlValueInt: 8
                                            HdlValueInt: 4
                                    HdlValueInt: 0
                            HdlValueInt: 0011
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AXILLSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0

UPD HdlStmProcess@@ to 
    INS HdlOp@@ASSIGN to 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: shifted_wstrb_halfword
            HdlOp: SLL
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: REPL_CONCAT
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlOp: DIV
                                                list: ops
                                                    HdlOp: MUL
                                                        list: ops
                                                            HdlValueInt: 2
                                                            HdlValueId: DW
                                                    HdlValueInt: 8
                                            HdlValueInt: 4
                                    HdlValueInt: 0
                            HdlValueInt: 0011
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AXILSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: shifted_wstrb_byte
            HdlOp: SLL
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: REPL_CONCAT
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlOp: DIV
                                                list: ops
                                                    HdlValueId: C_AXI_DATA_WIDTH
                                                    HdlValueInt: 8
                                            HdlValueInt: 4
                                    HdlValueInt: 0
                            HdlValueInt: 0001
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AXILLSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0

UPD HdlStmProcess@@ to 
    INS HdlOp@@ASSIGN to 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: shifted_wstrb_byte
            HdlOp: SLL
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: REPL_CONCAT
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlOp: DIV
                                                list: ops
                                                    HdlOp: MUL
                                                        list: ops
                                                            HdlValueInt: 2
                                                            HdlValueId: DW
                                                    HdlValueInt: 8
                                            HdlValueInt: 4
                                    HdlValueInt: 0
                            HdlValueInt: 0001
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_addr
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: AXILSB
                                            HdlValueInt: 1
                                    HdlValueInt: 0

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll
    DEL HdlStmBlock@@SEQ from 
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: M_AXI_AWPROT
                    HdlValueInt: 000
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: M_AXI_ARPROT
                    HdlValueInt: 000

UPD HdlStmFor@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlOp@@LT to LT
        UPD HdlOp@@DIV to DIV
            INS HdlOp@@MUL to ops
            UPD HdlOp@@MUL to MUL
                INS list@@ops to MUL
                INS HdlValueInt@@2 to ops

UPD HdlStmFor@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

DEL HdlStmProcess@@ from objs

DEL HdlStmProcess@@ from objs

DEL HdlStmProcess@@ from objs

DEL HdlStmProcess@@ from objs


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -272,8 +273,11 @@ module	axilops #(
 		// {{{
 		genvar	gw, gb;
 
-		for(gw=0; gw<C_AXI_DATA_WIDTH/32; gw=gw+1)
+		for(gw=0; gw<2*DW/32; gw=gw+1)
+		begin : FOREACH_32B_WORD
 		for(gb=0; gb<32/8; gb=gb+1)
+		begin : FOREACH_BYTE
+
 		always @(*)
 		begin
 			swapped_wstrb_word[gw*4+gb]

ParseResult:
UPD HdlStmFor@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
    UPD HdlOp@@LT to LT
        UPD HdlOp@@DIV to DIV
            INS HdlOp@@MUL to ops
            UPD HdlOp@@MUL to MUL
                INS list@@ops to MUL
                INS HdlValueInt@@2 to ops

UPD HdlStmFor@@body to 

MOV HdlStmFor@@body to 
HdlStmFor: body
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: gb
    HdlOp: LT
        list: ops
            HdlValueId: gb
            HdlOp: DIV
                list: ops
                    HdlValueInt: 32
                    HdlValueInt: 8
    HdlOp: ASSIGN
        list: ops
            HdlValueId: gb
            HdlOp: ADD
                list: ops
                    HdlValueId: gb
                    HdlValueInt: 1
    HdlStmProcess: body
        list: sensitivity
            HdlAll
        HdlStmBlock: SEQ
            list: body
                HdlOp: ASSIGN
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: swapped_wstrb_word
                                HdlOp: ADD
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueId: gw
                                                HdlValueInt: 4
                                        HdlValueId: gb
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: shifted_wstrb_word
                                HdlOp: ADD
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueId: gw
                                                HdlValueInt: 4
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueId: gb
                HdlOp: ASSIGN
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: swapped_wstrb_halfword
                                HdlOp: ADD
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueId: gw
                                                HdlValueInt: 4
                                        HdlValueId: gb
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: shifted_wstrb_halfword
                                HdlOp: ADD
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueId: gw
                                                HdlValueInt: 4
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueId: gb
                HdlOp: ASSIGN
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: swapped_wstrb_byte
                                HdlOp: ADD
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueId: gw
                                                HdlValueInt: 4
                                        HdlValueId: gb
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: shifted_wstrb_byte
                                HdlOp: ADD
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueId: gw
                                                HdlValueInt: 4
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueId: gb

UPD HdlStmFor@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmProcess@@body to 

MOV HdlStmProcess@@body to body
HdlStmProcess: body
    list: sensitivity
        HdlAll
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: swapped_wstrb_word
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueId: gw
                                            HdlValueInt: 4
                                    HdlValueId: gb
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: shifted_wstrb_word
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueId: gw
                                            HdlValueInt: 4
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueInt: 3
                                            HdlValueId: gb
            HdlOp: ASSIGN
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: swapped_wstrb_halfword
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueId: gw
                                            HdlValueInt: 4
                                    HdlValueId: gb
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: shifted_wstrb_halfword
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueId: gw
                                            HdlValueInt: 4
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueInt: 3
                                            HdlValueId: gb
            HdlOp: ASSIGN
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: swapped_wstrb_byte
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueId: gw
                                            HdlValueInt: 4
                                    HdlValueId: gb
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: shifted_wstrb_byte
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueId: gw
                                            HdlValueInt: 4
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueInt: 3
                                            HdlValueId: gb

UPD HdlStmFor@@ to 
    UPD HdlOp@@LT to LT
        UPD HdlOp@@DIV to DIV
            UPD HdlValueId@@C_AXI_DATA_WIDTH to DW
            MOV HdlValueId@@C_AXI_DATA_WIDTH to ops
            HdlValueId: C_AXI_DATA_WIDTH


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -282,7 +286,7 @@ module	axilops #(
 					= shifted_wstrb_halfword[gw*4+(3-gb)];
 			swapped_wstrb_byte[gw*4+gb]
 					= shifted_wstrb_byte[gw*4+(3-gb)];
-		end
+		end end end
 		// }}}
 	end else begin : KEEP_WSTRB
 		// {{{

ParseResult:
UPD HdlStmFor@@body to 

MOV HdlStmFor@@body to 
HdlStmFor: body
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: gb
    HdlOp: LT
        list: ops
            HdlValueId: gb
            HdlOp: DIV
                list: ops
                    HdlValueInt: 32
                    HdlValueInt: 8
    HdlOp: ASSIGN
        list: ops
            HdlValueId: gb
            HdlOp: ADD
                list: ops
                    HdlValueId: gb
                    HdlValueInt: 1
    HdlStmProcess: body
        list: sensitivity
            HdlAll
        HdlStmBlock: SEQ
            list: body
                HdlOp: ASSIGN
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: swapped_wstrb_word
                                HdlOp: ADD
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueId: gw
                                                HdlValueInt: 4
                                        HdlValueId: gb
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: shifted_wstrb_word
                                HdlOp: ADD
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueId: gw
                                                HdlValueInt: 4
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueId: gb
                HdlOp: ASSIGN
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: swapped_wstrb_halfword
                                HdlOp: ADD
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueId: gw
                                                HdlValueInt: 4
                                        HdlValueId: gb
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: shifted_wstrb_halfword
                                HdlOp: ADD
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueId: gw
                                                HdlValueInt: 4
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueId: gb
                HdlOp: ASSIGN
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: swapped_wstrb_byte
                                HdlOp: ADD
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueId: gw
                                                HdlValueInt: 4
                                        HdlValueId: gb
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: shifted_wstrb_byte
                                HdlOp: ADD
                                    list: ops
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueId: gw
                                                HdlValueInt: 4
                                        HdlOp: SUB
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueId: gb

UPD HdlStmProcess@@body to 

MOV HdlStmProcess@@body to body
HdlStmProcess: body
    list: sensitivity
        HdlAll
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: swapped_wstrb_word
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueId: gw
                                            HdlValueInt: 4
                                    HdlValueId: gb
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: shifted_wstrb_word
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueId: gw
                                            HdlValueInt: 4
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueInt: 3
                                            HdlValueId: gb
            HdlOp: ASSIGN
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: swapped_wstrb_halfword
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueId: gw
                                            HdlValueInt: 4
                                    HdlValueId: gb
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: shifted_wstrb_halfword
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueId: gw
                                            HdlValueInt: 4
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueInt: 3
                                            HdlValueId: gb
            HdlOp: ASSIGN
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: swapped_wstrb_byte
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueId: gw
                                            HdlValueInt: 4
                                    HdlValueId: gb
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: shifted_wstrb_byte
                            HdlOp: ADD
                                list: ops
                                    HdlOp: MUL
                                        list: ops
                                            HdlValueId: gw
                                            HdlValueInt: 4
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueInt: 3
                                            HdlValueId: gb

UPD HdlStmFor@@ to 
    UPD HdlOp@@LT to LT
        UPD HdlOp@@DIV to DIV
            UPD HdlValueId@@C_AXI_DATA_WIDTH to DW
            MOV HdlValueId@@C_AXI_DATA_WIDTH to ops
            HdlValueId: C_AXI_DATA_WIDTH


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -301,12 +305,19 @@ module	axilops #(
 
 	// wdata, wstrb
 	// {{{
+	always @(*)
+	begin
+		swapaddr = i_addr[AXILSB-1:0];
+		if (SWAP_WSTRB)
+			swapaddr[1:0] = 3 - i_addr[1:0];
+	end
+
 	initial	axi_wdata = 0;
 	initial	axi_wstrb = 0;
 	initial	next_wdata  = 0;
 	initial	next_wstrb  = 0;
 	always @(posedge i_clk)
-	if (OPT_ZERO_ON_IDLE && !S_AXI_ARESETN)
+	if (OPT_LOWPOWER && !S_AXI_ARESETN)
 	begin
 		// {{{
 		axi_wdata <= 0;

ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmIf@@ to body

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -320,34 +331,19 @@ module	axilops #(
 	end else if (i_stb)
 	begin
 		// {{{
-		if (OPT_ZERO_ON_IDLE && SWAP_WSTRB)
-		begin
-			// {{{
-			casez(i_op[2:1])
-			2'b10: { next_wdata, axi_wdata }
-				<= { {(2*C_AXI_DATA_WIDTH-16){1'b0}},
-				    i_data[15:0] } << (8*(3-i_addr[AXILLSB-1:0]));
-			2'b11: { next_wdata, axi_wdata }
-				<= { {(2*C_AXI_DATA_WIDTH-8){1'b0}},
-				    i_data[7:0] } << (8*(3-i_addr[AXILLSB-1:0]));
-			default: { next_wdata, axi_wdata }
-				<= { {(2*C_AXI_DATA_WIDTH-32){1'b0}},
-				    i_data } << (8*(3-i_addr[AXILLSB-1:0]));
-			endcase
-			// }}}
-		end else if (OPT_ZERO_ON_IDLE && !SWAP_WSTRB)
+		if (OPT_LOWPOWER)
 		begin
 			// {{{
 			casez(i_op[2:1])
 			2'b10: { next_wdata, axi_wdata }
 				<= { {(2*C_AXI_DATA_WIDTH-16){1'b0}},
-				    i_data[15:0] } << (8*i_addr[AXILLSB-1:0]);
+				    i_data[15:0] } << (8*swapaddr);
 			2'b11: { next_wdata, axi_wdata }
 				<= { {(2*C_AXI_DATA_WIDTH-8){1'b0}},
-				    i_data[7:0] } << (8*i_addr[AXILLSB-1:0]);
+				    i_data[7:0] } << (8*swapaddr);
 			default: { next_wdata, axi_wdata }
 				<= { {(2*C_AXI_DATA_WIDTH-32){1'b0}},
-				    i_data } << (8*i_addr[AXILLSB-1:0]);
+				    i_data } << (8*swapaddr);
 			endcase
 			// }}}
 		end else begin

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER
        MOV HdlValueId@@OPT_ZERO_ON_IDLE to ops
        HdlValueId: OPT_ZERO_ON_IDLE
        DEL HdlValueId@@SWAP_WSTRB from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 
    DEL tuple@@ from elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlValueId: OPT_ZERO_ON_IDLE
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: SWAP_WSTRB
        HdlStmBlock: SEQ
            list: body
                HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
                    HdlStmCaseType: CASEZ
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_op
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 2
                                    HdlValueInt: 1
                    list: cases
                        tuple
                            HdlValueInt: 10
                            HdlStmAssign
                                HdlOp: SLL
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: REPL_CONCAT
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlOp: MUL
                                                                    list: ops
                                                                        HdlValueInt: 2
                                                                        HdlValueId: C_AXI_DATA_WIDTH
                                                                HdlValueInt: 16
                                                        HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_data
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 15
                                                                HdlValueInt: 0
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueInt: 8
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_addr
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlValueId: AXILLSB
                                                                        HdlValueInt: 1
                                                                HdlValueInt: 0
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: next_wdata
                                        HdlValueId: axi_wdata
                        tuple
                            HdlValueInt: 11
                            HdlStmAssign
                                HdlOp: SLL
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: REPL_CONCAT
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlOp: MUL
                                                                    list: ops
                                                                        HdlValueInt: 2
                                                                        HdlValueId: C_AXI_DATA_WIDTH
                                                                HdlValueInt: 8
                                                        HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_data
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        HdlOp: MUL
                                            list: ops
                                                HdlValueInt: 8
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_addr
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlValueId: AXILLSB
                                                                        HdlValueInt: 1
                                                                HdlValueInt: 0
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: next_wdata
                                        HdlValueId: axi_wdata
                    HdlStmAssign: default
                        HdlOp: SLL
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: REPL_CONCAT
                                            list: ops
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlOp: MUL
                                                            list: ops
                                                                HdlValueInt: 2
                                                                HdlValueId: C_AXI_DATA_WIDTH
                                                        HdlValueInt: 32
                                                HdlValueInt: 0
                                        HdlValueId: i_data
                                HdlOp: MUL
                                    list: ops
                                        HdlValueInt: 8
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: i_addr
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlValueId: AXILLSB
                                                                HdlValueInt: 1
                                                        HdlValueInt: 0
                        HdlOp: CONCAT
                            list: ops
                                HdlValueId: next_wdata
                                HdlValueId: axi_wdata

UPD HdlStmAssign@@default to default
    UPD HdlOp@@SLL to SLL
        UPD HdlOp@@MUL to MUL
            UPD HdlOp@@SUB to SUB
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@i_addr to swapaddr
                    MOV HdlValueId@@i_addr to ops
                    HdlValueId: i_addr
                    DEL HdlOp@@DOWNTO from ops
                    HdlOp: DOWNTO
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: AXILLSB
                                    HdlValueInt: 1
                            HdlValueInt: 0
                    DEL list@@ops from INDEX
                DEL HdlValueInt@@3 from ops
                DEL HdlOp@@INDEX from ops
                DEL list@@ops from SUB
            DEL HdlOp@@SUB from ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@SLL to SLL
        UPD HdlOp@@MUL to MUL
            UPD HdlOp@@SUB to SUB
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@i_addr to swapaddr
                    MOV HdlValueId@@i_addr to ops
                    HdlValueId: i_addr
                    DEL HdlOp@@DOWNTO from ops
                    HdlOp: DOWNTO
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: AXILLSB
                                    HdlValueInt: 1
                            HdlValueInt: 0
                    DEL list@@ops from INDEX
                DEL HdlValueInt@@3 from ops
                DEL HdlOp@@INDEX from ops
                DEL list@@ops from SUB
            DEL HdlOp@@SUB from ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@SLL to SLL
        UPD HdlOp@@MUL to MUL
            UPD HdlOp@@SUB to SUB
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@i_addr to swapaddr
                    MOV HdlValueId@@i_addr to ops
                    HdlValueId: i_addr
                    DEL HdlOp@@DOWNTO from ops
                    HdlOp: DOWNTO
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: AXILLSB
                                    HdlValueInt: 1
                            HdlValueInt: 0
                    DEL list@@ops from INDEX
                DEL HdlValueInt@@3 from ops
                DEL HdlOp@@INDEX from ops
                DEL list@@ops from SUB
            DEL HdlOp@@SUB from ops


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -372,23 +368,23 @@ module	axilops #(
 		endcase
 		// }}}
 
-		r_op <= { i_op[2:1] , i_addr[AXILLSB-1:0] };
+		r_op <= { i_op[2:1] , i_addr[AXILSB-1:0] };
 
-		// On a read set everything to zero but only if OPT_ZERO_ON_IDLE
+		// On a read set everything to zero but only if OPT_LOWPOWER
 		// is set
 		// {{{
-		if (OPT_ZERO_ON_IDLE && !i_op[0])
+		if (OPT_LOWPOWER && !i_op[0])
 			{ next_wstrb, next_wdata, axi_wstrb, axi_wdata } <= 0;
 
 		if (OPT_ALIGNMENT_ERR)
 			{ next_wstrb, next_wdata } <= 0;
-		if (OPT_ZERO_ON_IDLE)
+		if (OPT_LOWPOWER)
 		begin
-			if (OPT_ALIGNMENT_ERR && w_misaligned)
+			if (w_misalignment_err)
 				{ axi_wdata, axi_wstrb } <= 0;
 			if (o_err || i_cpu_reset)
 				{ next_wdata, next_wstrb,
-				axi_wdata, axi_wstrb } <= 0;
+					axi_wdata, axi_wstrb } <= 0;
 		end
 		// }}}
 		// }}}

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER

UPD HdlStmIf@@ to 
    UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@w_misaligned to w_misalignment_err
        MOV HdlValueId@@w_misaligned to ops
        HdlValueId: w_misaligned
        DEL HdlValueId@@OPT_ALIGNMENT_ERR from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlOp@@SUB to SUB
                    UPD HdlValueId@@AXILLSB to AXILSB


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -398,10 +394,10 @@ module	axilops #(
 		// {{{
 		axi_wdata <= OPT_ALIGNMENT_ERR ? 0 : next_wdata;
 		axi_wstrb <= OPT_ALIGNMENT_ERR ? 0 : next_wstrb;
-		if (OPT_ZERO_ON_IDLE)
+		if (OPT_LOWPOWER)
 			{ next_wdata, next_wstrb } <= 0;
 		// }}}
-	end else if ((OPT_ZERO_ON_IDLE)&&(M_AXI_WREADY))
+	end else if (OPT_LOWPOWER && M_AXI_WREADY)
 	begin
 		// {{{
 		axi_wdata <= 0;

ParseResult:
UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    INS HdlStmCaseType@@CASEZ to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    INS list@@cases to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    INS tuple@@ to cases
    tuple
        HdlValueInt: 0?
        HdlOp: ASSIGN
            list: ops
                HdlValueId: w_misaligned
                HdlOp: GE
                    list: ops
                        HdlOp: ADD
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_addr
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlValueId: AXILSB
                                                        HdlValueInt: 1
                                                HdlValueInt: 0
                                HdlValueInt: 3
                        HdlOp: SLL
                            list: ops
                                HdlValueInt: 1
                                HdlValueId: AXILSB
    INS tuple@@ to cases
    tuple
        HdlValueInt: 10
        HdlOp: ASSIGN
            list: ops
                HdlValueId: w_misaligned
                HdlOp: GE
                    list: ops
                        HdlOp: ADD
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_addr
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlValueId: AXILSB
                                                        HdlValueInt: 1
                                                HdlValueInt: 0
                                HdlValueInt: 1
                        HdlOp: SLL
                            list: ops
                                HdlValueInt: 1
                                HdlValueId: AXILSB

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER

UPD HdlStmIf@@ to 
    UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -438,14 +434,20 @@ module	axilops #(
 	always @(*)
 	casez(i_op[2:1])
 	// Full word
-	2'b0?: w_misaligned = (i_addr[AXILLSB-1:0]+3) >= (1<<AXILLSB);
+	2'b0?: w_misaligned = (i_addr[AXILSB-1:0]+3) >= (1<<AXILSB);
 	// Half word
-	2'b10: w_misaligned = (i_addr[AXILLSB-1:0]+1) >= (1<<AXILLSB);
+	2'b10: w_misaligned = (i_addr[AXILSB-1:0]+1) >= (1<<AXILSB);
 	// Bytes are always aligned
 	2'b11: w_misaligned = 1'b0;
 	endcase
 	// }}}
 
+	// w_misalignment_err
+	// {{{
+	always @(*)
+		w_misalignment_err = OPT_ALIGNMENT_ERR && w_misaligned;
+	// }}}
+
 	// misaligned_[aw_|]request, pending_err, misaligned_response_pending
 	// {{{
 	generate if (OPT_ALIGNMENT_ERR)

ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll

INS HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  to 

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    MOV HdlOp@@INDEX to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    HdlOp: INDEX
        list: ops
            HdlValueId: i_op
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 1
    MOV tuple@@ to cases
    tuple
        HdlValueInt: 11
        HdlOp: ASSIGN
            list: ops
                HdlValueId: w_misaligned
                HdlValueInt: 0
    DEL HdlStmCaseType@@CASEZ from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    DEL tuple@@ from cases
    tuple
        HdlValueInt: 0?
        HdlOp: ASSIGN
            list: ops
                HdlValueId: w_misaligned
                HdlOp: GE
                    list: ops
                        HdlOp: ADD
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_addr
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlValueId: AXILLSB
                                                        HdlValueInt: 1
                                                HdlValueInt: 0
                                HdlValueInt: 3
                        HdlOp: SLL
                            list: ops
                                HdlValueInt: 1
                                HdlValueId: AXILLSB
    DEL tuple@@ from cases
    tuple
        HdlValueInt: 10
        HdlOp: ASSIGN
            list: ops
                HdlValueId: w_misaligned
                HdlOp: GE
                    list: ops
                        HdlOp: ADD
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: i_addr
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlOp: SUB
                                                    list: ops
                                                        HdlValueId: AXILLSB
                                                        HdlValueInt: 1
                                                HdlValueInt: 0
                                HdlValueInt: 1
                        HdlOp: SLL
                            list: ops
                                HdlValueInt: 1
                                HdlValueId: AXILLSB
    DEL list@@cases from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: w_misalignment_err

DEL HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  from 

DEL HdlStmProcess@@ from objs


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -528,7 +551,7 @@ module	axilops #(
 	always @(posedge i_clk)
 	if (r_flushing || i_cpu_reset || o_err)
 		o_err <= 1'b0;
-	else if (OPT_ALIGNMENT_ERR && i_stb && w_misaligned)
+	else if (i_stb && w_misalignment_err)
 		o_err <= 1'b1;
 	else if ((M_AXI_BVALID || M_AXI_RVALID) && !misaligned_response_pending)
 		o_err <= (M_AXI_BVALID && M_AXI_BRESP[1])

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlValueId@@i_stb to ops
            HdlValueId: i_stb
            DEL HdlValueId@@OPT_ALIGNMENT_ERR from ops
            DEL list@@ops from AND_LOG
        UPD HdlValueId@@w_misaligned to w_misalignment_err
        DEL HdlOp@@AND_LOG from ops


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -557,12 +580,12 @@ module	axilops #(
 	// last_result, o_result
 	// {{{
 	always @(posedge i_clk)
-	if ((OPT_ZERO_ON_IDLE)&&(!M_AXI_RREADY || !S_AXI_ARESETN))
+	if (OPT_LOWPOWER &&(!M_AXI_RREADY || !S_AXI_ARESETN))
 		{ last_result, o_result } <= 0;
 	else if (M_AXI_RVALID)
 	begin
 		// {{{
-		if (!misaligned_response_pending && OPT_ZERO_ON_IDLE)
+		if (!misaligned_response_pending && OPT_LOWPOWER)
 			last_result <= 0;
 		else
 			last_result <= M_AXI_RDATA;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER


CommitId: b0d4944b13ad6b3b447172dd3f9d27dc86388907
AXILOPS: New alignment error signal, renamed zero on idle OPT_LOWPOWER
--- a/rtl/core/axilops.v
+++ b/rtl/core/axilops.v
@@ -573,13 +596,13 @@ module	axilops #(
 		// Verilator lint_off WIDTH
 		if (misaligned_read && !OPT_ALIGNMENT_ERR)
 			o_result <= { M_AXI_RDATA, last_result }
-						>> (8*r_op[AXILLSB-1:0]);
+						>> (8*r_op[AXILSB-1:0]);
 		else
 			o_result <= { 32'h0, M_AXI_RDATA }
-						>> (8*r_op[AXILLSB-1:0]);
+						>> (8*r_op[AXILSB-1:0]);
 		// Verilator lint_on WIDTH
 
-		casez(r_op[AXILLSB +: 2])
+		casez(r_op[AXILSB +: 2])
 		2'b10: o_result[31:16] <= 0;
 		2'b11: o_result[31: 8] <= 0;
 		default: begin end

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@OPT_ZERO_ON_IDLE to OPT_LOWPOWER

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['r_op',          {'__class__': 'HdlOp',           'fn': 'PART_SELECT_POST',           'ops': ['AXILLSB',                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '2'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['r_op',          {'__class__': 'HdlOp',           'fn': 'PART_SELECT_POST',           'ops': ['AXILSB',                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '2'}]}]} 

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['r_op',          {'__class__': 'HdlOp',           'fn': 'PART_SELECT_POST',           'ops': ['AXILLSB',                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '2'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['r_op',          {'__class__': 'HdlOp',           'fn': 'PART_SELECT_POST',           'ops': ['AXILLSB',                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '2'}]}]} 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@PART_SELECT_POST to PART_SELECT_POST
            UPD HdlValueId@@AXILLSB to AXILSB

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@SRL to SRL
        UPD HdlOp@@MUL to MUL
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    UPD HdlOp@@SUB to SUB
                        UPD HdlValueId@@AXILLSB to AXILSB

UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@SRL to SRL
        UPD HdlOp@@MUL to MUL
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    UPD HdlOp@@SUB to SUB
                        UPD HdlValueId@@AXILLSB to AXILSB


CommitId: 367e7f546ed9b9680bb205c53b8c0c9544584fd7
Fixed the broken flag signals from the multiply when it isn't present
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -70,7 +70,7 @@ module	mpyop(i_clk,i_reset, i_stb, i_op, i_a, i_b, o_valid, o_busy, o_result, o_
 
 		assign	o_result   = 64'h00;
 		assign	o_busy     = 1'b0;
-		assign	o_valid    = 1'b1;
+		assign	o_valid    = i_stb;
 		always @(*) o_hi = 1'b0; // Not needed
 
 `ifdef	VERILATOR
ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlValueId@@i_stb to 

UPD HdlStmAssign@@ to 
    DEL HdlValueInt@@1 from 


CommitId: a786b962322405c33fceea56cf205f727eaf1d7e
Fixed the broken misaligned data bus detection, now poss. with SymbiYosys scripts
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -101,7 +101,8 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 	reg			r_wb_cyc_gbl, r_wb_cyc_lcl, fifo_full;
 	reg	[(FLN-1):0]		rdaddr, wraddr;
 	wire	[(FLN-1):0]		nxt_rdaddr, fifo_fill;
-	reg	[(4+5-1):0]	fifo_oreg [0:15];
+	reg	[(3+5-1):0]	fifo_oreg [0:15];
+	reg			fifo_gie;
 	initial	rdaddr = 0;
 	initial	wraddr = 0;
 

ParseResult:
INS HdlIdDef@@fifo_oreg to objs

INS HdlIdDef@@fifo_gie to objs
HdlIdDef: fifo_gie
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

INS HdlStmProcess@@ to objs

UPD HdlIdDef@@fifo_oreg to fifo_oreg
    INS HdlOp@@INDEX to fifo_oreg
    INS HdlDirection@@INTERNAL to fifo_oreg
    UPD HdlOp@@INDEX to INDEX
        INS list@@ops to INDEX
        INS HdlOp@@PARAMETRIZATION to ops
        HdlOp: PARAMETRIZATION
            list: ops
                HdlValueId: reg
                HdlOp: DOWNTO
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlOp: ADD
                                    list: ops
                                        HdlValueInt: 3
                                        HdlValueInt: 5
                                HdlValueInt: 1
                        HdlValueInt: 0

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll

UPD HdlIdDef@@fifo_oreg to fifo_oreg
    UPD HdlOp@@INDEX to INDEX
        MOV HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlValueInt: 0
                HdlValueInt: 15
        DEL HdlOp@@PARAMETRIZATION from ops
        HdlOp: PARAMETRIZATION
            list: ops
                HdlValueId: reg
                HdlOp: DOWNTO
                    list: ops
                        HdlOp: SUB
                            list: ops
                                HdlOp: ADD
                                    list: ops
                                        HdlValueInt: 4
                                        HdlValueInt: 5
                                HdlValueInt: 1
                        HdlValueInt: 0
        DEL list@@ops from INDEX
    DEL HdlOp@@INDEX from fifo_oreg
    DEL HdlDirection@@INTERNAL from fifo_oreg

DEL HdlIdDef@@fifo_oreg from objs

DEL HdlStmProcess@@ from objs


CommitId: a786b962322405c33fceea56cf205f727eaf1d7e
Fixed the broken misaligned data bus detection, now poss. with SymbiYosys scripts
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -111,16 +112,20 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 	if (OPT_ALIGNMENT_ERR)
 	begin
 		casez({ i_op[2:1], i_addr[1:0] })
-		4'b01?1: misaligned = 1'b1;
-		4'b0110: misaligned = 1'b1;
-		4'b10?1: misaligned = 1'b1;
-		default: misaligned = 1'b0;
+		4'b01?1: misaligned = i_pipe_stb;
+		4'b0110: misaligned = i_pipe_stb;
+		4'b10?1: misaligned = i_pipe_stb;
+		default: misaligned = i_pipe_stb;
 		endcase
 	end else
 		misaligned = 1'b0;
 
 	always @(posedge i_clk)
-		fifo_oreg[wraddr] <= { i_oreg, i_op[2:1], i_addr[1:0] };
+		fifo_oreg[wraddr] <= { i_oreg[3:0], i_op[2:1], i_addr[1:0] };
+
+	always @(posedge i_clk)
+	if (i_pipe_stb)
+		fifo_gie <= i_oreg[4];
 
 	initial	wraddr = 0;
 	always @(posedge i_clk)

ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmIf: body
        HdlValueId: i_pipe_stb
        HdlStmAssign: if_true
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_oreg
                    HdlValueInt: 4
            HdlValueId: fifo_gie
        list: elifs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlAll

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlValueId@@OPT_ALIGNMENT_ERR to body
    INS HdlStmBlock@@SEQ to body
    INS list@@elifs to body
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    MOV HdlOp@@ASSIGN to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: misaligned
            HdlValueInt: 0
    MOV HdlOp@@CONCAT to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    HdlOp: CONCAT
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_op
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 2
                            HdlValueInt: 1
            HdlOp: INDEX
                list: ops
                    HdlValueId: i_addr
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 1
                            HdlValueInt: 0
    DEL HdlStmCaseType@@CASEZ from {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    DEL list@@cases from {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    list: cases
        tuple
            HdlValueInt: 01?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueInt: 1
        tuple
            HdlValueInt: 0110
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueInt: 1
        tuple
            HdlValueInt: 10?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueInt: 1

INS HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  to body

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    INS HdlStmCaseType@@CASEZ to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    INS list@@cases to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    list: cases
        tuple
            HdlValueInt: 01?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueId: i_pipe_stb
        tuple
            HdlValueInt: 0110
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueId: i_pipe_stb
        tuple
            HdlValueInt: 10?1
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: misaligned
                    HdlValueId: i_pipe_stb
    INS HdlOp@@ASSIGN to {'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]} 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: misaligned
            HdlValueId: i_pipe_stb

UPD HdlStmAssign@@body to body
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@CONCAT to CONCAT
            INS HdlOp@@INDEX to ops
            UPD HdlOp@@INDEX to INDEX
                INS list@@ops to INDEX
                INS HdlOp@@DOWNTO to ops
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 3
                        HdlValueInt: 0

UPD HdlStmAssign@@body to body
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@CONCAT to CONCAT
            MOV HdlValueId@@i_oreg to ops
            HdlValueId: i_oreg

UPD HdlStmIf@@body to body
    DEL HdlValueId@@OPT_ALIGNMENT_ERR from body
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from body
    DEL list@@elifs from body
    DEL HdlOp@@ASSIGN from body
    HdlOp: ASSIGN
        list: ops
            HdlValueId: misaligned
            HdlValueInt: 0

DEL HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'CONCAT',  'ops': [{'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_op',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '1'}]}]},          {'__class__': 'HdlOp',           'fn': 'INDEX',           'ops': ['i_addr',                   {'__class__': 'HdlOp',                    'fn': 'DOWNTO',                    'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '1'},                            {'__class__': 'HdlValueInt',                             'base': 10,                             'val': '0'}]}]}]}  from body

DEL HdlStmIf@@body from 

DEL HdlStmProcess@@ from objs


CommitId: a786b962322405c33fceea56cf205f727eaf1d7e
Fixed the broken misaligned data bus detection, now poss. with SymbiYosys scripts
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -256,10 +261,10 @@ module	pipemem(i_clk, i_reset, i_pipe_stb, i_lock,
 		o_err <= ((cyc)&&(i_wb_err))||((i_pipe_stb)&&(misaligned));
 	assign	o_busy = cyc;
 
-	wire	[8:0]	w_wreg;
+	wire	[7:0]	w_wreg;
 	assign	w_wreg = fifo_oreg[rdaddr];
 	always @(posedge i_clk)
-		o_wreg <= w_wreg[8:4];
+		o_wreg <= { fifo_gie, w_wreg[7:4] };
 	always @(posedge i_clk)
 		if ((OPT_ZERO_ON_IDLE)&&((!cyc)||((!i_wb_ack)&&(!i_wb_err))))
 			o_result <= 0;

ParseResult:
INS HdlIdDef@@w_wreg to objs
HdlIdDef: w_wreg
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

INS HdlStmAssign@@body to 
HdlStmAssign: body
    HdlOp: CONCAT
        list: ops
            HdlValueId: fifo_gie
            HdlOp: INDEX
                list: ops
                    HdlValueId: w_wreg
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 7
                            HdlValueInt: 4
    HdlValueId: o_wreg

DEL HdlIdDef@@w_wreg from objs
HdlIdDef: w_wreg
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 8
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlStmAssign@@body from 
HdlStmAssign: body
    HdlOp: INDEX
        list: ops
            HdlValueId: w_wreg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 8
                    HdlValueInt: 4
    HdlValueId: o_wreg

DEL HdlStmProcess@@ from objs


CommitId: 1356820763f1b96e58bea4bc3c5e731c1349e867
Fixed some Verilator lint issues with the (formally proven) DMA
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -436,6 +436,7 @@ module wbdmac(i_clk, i_reset,
 	end else
 		last_read_request <= 1'b0;
 
+	wire	[LGMEMLEN:0]	next_nread = nread + 1'b1;
 	initial	last_read_ack = 1'b0;
 	always @(posedge i_clk)
 	if (i_reset)

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@EQ to EQ
        INS HdlOp@@INDEX to ops
        UPD HdlOp@@INDEX to INDEX
            INS list@@ops to INDEX
            INS HdlOp@@DOWNTO to ops
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: LGMEMLEN
                            HdlValueInt: 1
                    HdlValueInt: 0

UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@EQ to EQ
        UPD HdlOp@@ADD to ADD
            UPD HdlValueId@@nread to next_nread
            MOV HdlValueId@@nread to ops
            HdlValueId: nread
            DEL HdlValueInt@@1 from ops
            DEL list@@ops from ADD
        DEL HdlOp@@ADD from ops


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -197,8 +197,7 @@ module	zipsystem #(
 		// {{{
 		localparam	// Derived parameters
 				// PHYSICAL_ADDRESS_WIDTH=ADDRESS_WIDTH,
-				PAW=ADDRESS_WIDTH-2,
-		localparam	DW=BUS_WIDTH
+				PAW=ADDRESS_WIDTH-$clog2(BUS_WIDTH/8)
 		// }}}
 		// }}}
 	) (

ParseResult:
MOV HdlIdDef@@DW to params
HdlIdDef: DW
    HdlValueId: BUS_WIDTH
    HdlDirection: INTERNAL

UPD HdlIdDef@@PAW to PAW
    UPD HdlOp@@SUB to SUB
        DEL HdlValueInt@@2 from ops


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -206,32 +205,33 @@ module	zipsystem #(
 		input	wire		i_clk, i_reset,
 		// Wishbone master interface from the CPU
 		// {{{
-		output	wire		o_wb_cyc, o_wb_stb, o_wb_we,
-		output	wire	[(PAW-1):0]	o_wb_addr,
-		output	wire [DW-1:0]	o_wb_data,
-		output	wire [DW/8-1:0]	o_wb_sel,
-		input	wire		i_wb_stall, i_wb_ack,
-		input	wire [DW-1:0]	i_wb_data,
-		input	wire		i_wb_err,
+		output	wire			o_wb_cyc, o_wb_stb, o_wb_we,
+		output	wire [PAW-1:0]		o_wb_addr,
+		output	wire [BUS_WIDTH-1:0]	o_wb_data,
+		output	wire [BUS_WIDTH/8-1:0]	o_wb_sel,
+		input	wire			i_wb_stall, i_wb_ack,
+		input	wire [BUS_WIDTH-1:0]	i_wb_data,
+		input	wire			i_wb_err,
 		// }}}
 		// Incoming interrupts
 		input	wire	[(EXTERNAL_INTERRUPTS-1):0]	i_ext_int,
 		// Our one outgoing interrupt
-		output	wire		o_ext_int,
+		output	wire			o_ext_int,
 		// Wishbone slave interface for debugging purposes
 		// {{{
-		input	wire		i_dbg_cyc, i_dbg_stb, i_dbg_we,
-		input	wire	[6:0]	i_dbg_addr,
+		input	wire			i_dbg_cyc, i_dbg_stb, i_dbg_we,
+		input	wire	[6:0]		i_dbg_addr,
 		input	wire [DBG_WIDTH-1:0]	i_dbg_data,
 		input	wire [DBG_WIDTH/8-1:0]	i_dbg_sel,
-		output	wire		o_dbg_stall,
-		output	wire		o_dbg_ack,
+		output	wire			o_dbg_stall,
+		output	wire			o_dbg_ack,
 		output	wire [DBG_WIDTH-1:0]	o_dbg_data,
 		// }}}
-		output wire	[31:0]	o_cpu_debug,
-		output wire		o_prof_stb,
-		output wire [PAW+$clog2(BUS_WIDTH/8)-1:0]	o_prof_addr,
-		output wire	[31:0]	o_prof_ticks
+		output	wire	[31:0]		o_cpu_debug,
+		//
+		output	wire			o_prof_stb,
+		output wire [ADDRESS_WIDTH-1:0]	o_prof_addr,
+		output	wire	[31:0]		o_prof_ticks
 		// }}}
 	);
 

ParseResult:
UPD HdlIdDef@@o_prof_addr to o_prof_addr
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlOp@@ADD to ADD
                    MOV HdlOp@@CALL to ops
                    HdlOp: CALL
                        list: ops
                            HdlValueId: $clog2
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: BUS_WIDTH
                                    HdlValueInt: 8
                    DEL HdlValueId@@PAW from ops
                    DEL list@@ops from ADD
                DEL HdlOp@@ADD from ops

UPD HdlIdDef@@o_wb_data to o_wb_data
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@DW to BUS_WIDTH

UPD HdlIdDef@@i_wb_data to i_wb_data
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlValueId@@DW to BUS_WIDTH

UPD HdlIdDef@@o_prof_addr to o_prof_addr
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                INS HdlValueId@@ADDRESS_WIDTH to ops

UPD HdlIdDef@@o_wb_sel to o_wb_sel
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                UPD HdlOp@@DIV to DIV
                    UPD HdlValueId@@DW to BUS_WIDTH


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -317,13 +318,12 @@ module	zipsystem #(
 	wire	[DBG_WIDTH-1:0]	actr_data;
 	wire		actr_ack, actr_stall;
 
-	//
-	wire	cpu_clken, cpu_clock, clk_gate;
+	wire			cpu_clken;
 	//
 	//
 	wire			sys_cyc, sys_stb, sys_we;
 	wire	[7:0]		sys_addr;
-	wire	[(PAW-1):0]	cpu_addr;
+	wire	[PAW-1:0]	cpu_addr;
 	wire	[DBG_WIDTH-1:0]	sys_data;
 	reg	[DBG_WIDTH-1:0]	sys_idata;
 	reg			sys_ack;

ParseResult:
DEL HdlIdDef@@cpu_clock from objs
HdlIdDef: cpu_clock
    HdlDirection: INTERNAL

DEL HdlIdDef@@clk_gate from objs
HdlIdDef: clk_gate
    HdlDirection: INTERNAL


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -340,8 +340,9 @@ module	zipsystem #(
 	wire	[DBG_WIDTH/8-1:0]	dbg_sel;
 	wire				no_dbg_err;
 
-	wire			cpu_break, dbg_cmd_write;
+	wire			cpu_break, dbg_cmd_write, dbg_cpu_write;
 	wire	[DBG_WIDTH-1:0]	dbg_cmd_data;
+	wire [DBG_WIDTH/8-1:0]	dbg_cmd_strb;
 	reg			cmd_reset, cmd_step, cmd_clear_cache;
 	reg			cmd_write;
 	reg	[4:0]		cmd_waddr;

ParseResult:
INS HdlIdDef@@dbg_cpu_write to objs
HdlIdDef: dbg_cpu_write
    HdlDirection: INTERNAL

INS HdlIdDef@@dbg_cmd_strb to objs
HdlIdDef: dbg_cmd_strb
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DBG_WIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -389,29 +390,29 @@ module	zipsystem #(
 	wire		pic_interrupt, pic_stall, pic_ack;
 
 	wire		cpu_gbl_stb, cpu_lcl_cyc, cpu_lcl_stb,
-			cpu_we, cpu_dbg_we;
+			cpu_we;
 	wire	[BUS_WIDTH-1:0]		cpu_data, cpu_idata;
 	wire	[BUS_WIDTH/8-1:0]	cpu_sel, mmu_sel;
 	wire		cpu_stall, cpu_ack, cpu_err;
 	wire	[DBG_WIDTH-1:0]	cpu_dbg_data;
 
-	wire	ext_stall, ext_ack;
-	wire	mmu_cyc, mmu_stb, mmu_we, mmu_stall, mmu_ack, mmu_err;
-	wire	mmus_stall, mmus_ack;
-	wire [PAW-1:0]	mmu_addr;
-	wire [BUS_WIDTH-1:0]	mmu_data, mmu_idata;
+	wire			ext_stall, ext_ack;
+	wire			mmu_cyc, mmu_stb, mmu_we, mmu_stall, mmu_ack,
+				mmu_err, mmus_stall, mmus_ack;
+	wire	[PAW-1:0]	mmu_addr;
+	wire	[BUS_WIDTH-1:0]	mmu_data, mmu_idata;
 	wire	[DBG_WIDTH-1:0]	mmus_data;
-	wire		cpu_miss;
+	wire			cpu_miss;
 
-	wire		mmu_cpu_stall, mmu_cpu_ack;
+	wire			mmu_cpu_stall, mmu_cpu_ack;
 	wire	[BUS_WIDTH-1:0]	mmu_cpu_idata;
 
 	// The wires associated with cache snooping
-	wire		pf_return_stb, pf_return_we, pf_return_cachable;
-	wire	[19:0]	pf_return_v, pf_return_p;
+	wire			pf_return_stb, pf_return_we, pf_return_cachable;
+	wire	[19:0]		pf_return_v, pf_return_p;
 
 	wire				ext_cyc, ext_stb, ext_we, ext_err;
-	wire	[(PAW-1):0]		ext_addr;
+	wire	[PAW-1:0]		ext_addr;
 	wire	[BUS_WIDTH-1:0]		ext_odata;
 	wire	[BUS_WIDTH/8-1:0]	ext_sel;
 	wire	[BUS_WIDTH-1:0]		ext_idata;

ParseResult:
DEL HdlIdDef@@cpu_dbg_we from objs
HdlIdDef: cpu_dbg_we
    HdlDirection: INTERNAL


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -555,9 +556,12 @@ module	zipsystem #(
 	//
 	//
 
+	assign	dbg_cpu_write = (dbg_stb && dbg_we) && (dbg_addr[6:5] == DBG_ADDR_CPU);
 	assign	dbg_cmd_write = (dbg_stb)&&(dbg_we)
 					&&(dbg_addr[6:5] == DBG_ADDR_CTRL);
 	assign	dbg_cmd_data = dbg_idata;
+	assign	dbg_cmd_strb = dbg_sel;
+
 	//
 	// reset_hold: Always start us off with an initial reset
 	// {{{

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: dbg_sel
    HdlValueId: dbg_cmd_strb


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -606,7 +610,8 @@ module	zipsystem #(
 	else if (cpu_break && !START_HALTED)
 		cmd_reset <= 1'b1;
 	else
-		cmd_reset <= ((dbg_cmd_write)&&(dbg_cmd_data[RESET_BIT]));
+		cmd_reset <= (dbg_cmd_write && dbg_cmd_strb[0]
+					&& dbg_cmd_data[RESET_BIT]);
 	// }}}
 
 	// cmd_halt

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_strb
                    HdlValueInt: 0


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -624,7 +629,8 @@ module	zipsystem #(
 		// aren't being given a command to step the CPU.
 		//
 		if (!cmd_write && !cpu_dbg_stall && dbg_cmd_write
-			&& (!dbg_cmd_data[HALT_BIT] || dbg_cmd_data[STEP_BIT]))
+			&& dbg_cmd_strb[1] && (!dbg_cmd_data[HALT_BIT]
+				|| dbg_cmd_data[STEP_BIT]))
 			cmd_halt <= 1'b0;
 
 		// Reasons to halt

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_strb
                    HdlValueInt: 1


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -638,12 +644,12 @@ module	zipsystem #(
 
 		// 2. Halt on any user request to halt.  (Only valid if the
 		//	STEP bit isn't also set)
-		if (dbg_cmd_write && dbg_cmd_data[HALT_BIT]
-						&& !dbg_cmd_data[STEP_BIT])
+		if (dbg_cmd_write && dbg_cmd_strb[1] && dbg_cmd_data[HALT_BIT]
+				&& !dbg_cmd_data[STEP_BIT])
 			cmd_halt <= 1'b1;
 
 		// 3. Halt on any user request to write to a CPU register
-		if (dbg_stb && dbg_we && !dbg_addr[5])
+		if (dbg_cpu_write && dbg_cmd_strb != 0)
 			cmd_halt <= 1'b1;
 
 		// 4. Halt following any step command

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: dbg_stb
                    HdlValueId: dbg_we
            HdlOp: NEG_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_addr
                            HdlValueInt: 5
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlValueId@@dbg_stb to ops
            HdlValueId: dbg_stb
            UPD HdlValueId@@dbg_we to dbg_cpu_write
            MOV HdlValueId@@dbg_we to ops
            HdlValueId: dbg_we
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops

UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@NE to ops
        HdlOp: NE
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 0

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            INS HdlOp@@AND_LOG to ops
            UPD HdlOp@@AND_LOG to AND_LOG
                INS list@@ops to AND_LOG
                INS HdlOp@@INDEX to ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_cmd_strb
                        HdlValueInt: 1


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -655,7 +661,7 @@ module	zipsystem #(
 			cmd_halt <= 1'b1;
 
 		// 5. Halt on any clear cache bit--independent of any step bit
-		if (dbg_cmd_write && dbg_cmd_data[CLEAR_CACHE_BIT])
+		if (dbg_cmd_write && dbg_cmd_strb[1] && dbg_cmd_data[CLEAR_CACHE_BIT])
 			cmd_halt <= 1'b1;
 		// }}}
 	end

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: dbg_cmd_write
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_cmd_data
                            HdlValueId: CLEAR_CACHE_BIT
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: HALT_BIT

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_strb
                    HdlValueInt: 1


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -668,7 +674,7 @@ module	zipsystem #(
 	if (i_reset || cpu_reset)
 		cmd_clear_cache <= 1'b0;
 	else if (dbg_cmd_write && dbg_cmd_data[CLEAR_CACHE_BIT]
-			&& dbg_cmd_data[HALT_BIT])
+			&& dbg_cmd_data[HALT_BIT] && dbg_cmd_strb[1])
 		cmd_clear_cache <= 1'b1;
 	else if (cmd_halt && !cpu_dbg_stall)
 		cmd_clear_cache <= 1'b0;

ParseResult:
UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 1

UPD HdlStmIf@@body to body
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: dbg_cmd_write
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: STEP_BIT


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -729,16 +735,14 @@ module	zipsystem #(
 	always @(posedge i_clk)
 	if (i_reset || cpu_reset)
 		cmd_write <= 1'b0;
-	else if (!cmd_write || (!cpu_dbg_stall && clk_gate))
-		cmd_write <= (dbg_stb && dbg_we && (|dbg_sel)
-			&& (dbg_addr[6:5] == DBG_ADDR_CPU));
+	else if (!cmd_write || !cpu_dbg_stall)
+		cmd_write <= (dbg_cpu_write && dbg_cmd_strb != 0);
 	// }}}
 
 	// cmd_waddr, cmd_wdata
 	// {{{
 	always @(posedge i_clk)
-	if ((!cmd_write || (!cpu_dbg_stall && clk_gate))
-			&&(dbg_stb && dbg_we && dbg_addr[6:5] == DBG_ADDR_CPU))
+	if ((!cmd_write || (!cpu_dbg_stall)) && dbg_cpu_write)
 	begin
 		cmd_waddr <= dbg_addr[4:0];
 		cmd_wdata <= dbg_idata;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to AND_LOG
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: cmd_write
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: cpu_dbg_stall
                        HdlValueId: clk_gate
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@AND_LOG to OR_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlValueId@@clk_gate to dbg_cpu_write
                MOV HdlValueId@@clk_gate to ops
                HdlValueId: clk_gate
            MOV HdlOp@@NEG_LOG to ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: cmd_write
        DEL HdlOp@@AND_LOG from ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: dbg_stb
                        HdlValueId: dbg_we
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: dbg_addr
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 6
                                        HdlValueInt: 5
                        HdlValueId: DBG_ADDR_CPU
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from body


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -1217,13 +1221,17 @@ module	zipsystem #(
 	////////////////////////////////////////////////////////////////////////
 	//
 	//
-	assign cpu_dbg_we = ((dbg_stb)&&(dbg_we)
-					&&(dbg_addr[6:5] == DBG_ADDR_CPU));
+	assign	cpu_clken = cmd_write || dbg_stb && !dbg_addr[5];
 `ifdef	FORMAL
+	// {{{
 	(* anyseq *)	reg	f_cpu_halted, f_cpu_data, f_cpu_stall,
 				f_cpu_break;
 	(* anyseq *) reg [1:0]	f_cpu_dbg_cc;
 	(* anyseq *) reg [31:0]	f_cpu_dbg_data;
+	wire			cpu_dbg_we;
+
+	assign cpu_dbg_we = ((dbg_stb)&&(dbg_we)
+					&&(dbg_addr[6:5] == DBG_ADDR_CPU));
 
 	assign	cpu_dbg_stall = f_cpu_stall;
 	assign	cpu_break     = f_cpu_break;

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@OR_LOG to 
    INS HdlValueId@@cpu_clken to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlValueId@@cmd_write to ops


CommitId: eed5d0d2091a8cba9a08a39809eab7098d79d3fa
New tests: 64bit bus & clk gating, both now pass
--- a/rtl/zipsystem.v
+++ b/rtl/zipsystem.v
@@ -1576,8 +1584,12 @@ module	zipsystem #(
 	// The way this works, though, the CPU will stall once the flash
 	// cache gets access to the bus--the CPU will be stuck until the
 	// flash cache is finished with the bus.
-	wbpriarbiter #(BUS_WIDTH,PAW)
-	dmacvcpu(
+	wbpriarbiter #(
+		// {{{
+		.DW(BUS_WIDTH),
+		.AW(PAW)
+		// }}}
+	) dmacvcpu(
 		// {{{
 		i_clk,
 		mmu_cyc, mmu_stb, mmu_we, mmu_addr, mmu_data, mmu_sel,

ParseResult:
DEL HdlStmIf@@ from objs
HdlStmIf
    HdlValueId: OPT_CLKGATE
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: gatep
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlIdDef: gaten
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: gatep
                                HdlValueInt: 1
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 1
                        HdlValueId: gatep
                    list: elifs
                    HdlStmAssign: if_false
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlValueId: cpu_clken
                                        HdlValueId: cmd_write
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: dbg_stb
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: dbg_addr
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 6
                                                                HdlValueInt: 5
                                                HdlValueId: DBG_ADDR_CPU
                        HdlValueId: gatep
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: gaten
                                HdlValueInt: 1
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: FALLING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueInt: 1
                        HdlValueId: gaten
                    list: elifs
                    HdlStmAssign: if_false
                        HdlValueId: gatep
                        HdlValueId: gaten
            HdlStmAssign
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: i_clk
                        HdlValueId: gaten
                HdlValueId: cpu_clock
            HdlStmAssign
                HdlValueId: gatep
                HdlValueId: clk_gate
    list: elifs
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueId: i_clk
                HdlValueId: cpu_clock
            HdlStmAssign
                HdlValueInt: 1
                HdlValueId: clk_gate


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_ctrl.v
+++ b/rtl/zipdma/zipdma_ctrl.v
@@ -111,15 +111,15 @@ module zipdma_ctrl #(
 	always @(*)
 	begin
 		w_control_reg = 0;
-		w_control_reg[31] = i_dma_busy;
-		w_control_reg[30] = r_err || i_dma_err;
-		w_control_reg[29] = int_trigger;
+		w_control_reg[31]    = i_dma_busy;
+		w_control_reg[30]    = r_err || i_dma_err;
+		w_control_reg[29]    = int_trigger;
 		w_control_reg[28:24] = int_sel;
 		//
-		w_control_reg[22] = o_s2mm_inc;
+		w_control_reg[22]    = !o_s2mm_inc;
 		w_control_reg[21:20] = o_s2mm_size;
 		//
-		w_control_reg[19] = o_mm2s_inc;
+		w_control_reg[19]    = !o_mm2s_inc;
 		w_control_reg[18:17] = o_mm2s_size;
 		//
 		w_control_reg[LGMEMLEN:0] = o_transferlen;

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            INS HdlOp@@NEG_LOG to ops
            UPD HdlOp@@NEG_LOG to NEG_LOG
                INS list@@ops to NEG_LOG
        UPD HdlOp@@ASSIGN to ASSIGN
            INS HdlOp@@NEG_LOG to ops
            UPD HdlOp@@NEG_LOG to NEG_LOG
                INS list@@ops to NEG_LOG

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            MOV HdlValueId@@o_s2mm_inc to ops
            HdlValueId: o_s2mm_inc
        UPD HdlOp@@ASSIGN to ASSIGN
            MOV HdlValueId@@o_mm2s_inc to ops
            HdlValueId: o_mm2s_inc


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_ctrl.v
+++ b/rtl/zipdma/zipdma_ctrl.v
@@ -217,8 +217,6 @@ module zipdma_ctrl #(
 	if (i_reset)
 	begin
 		// {{{
-		o_dma_request <= 1'b0;
-		o_dma_abort   <= 1'b0;
 		o_src_addr    <= {(AW){1'b0}};
 		o_dst_addr    <= {(AW){1'b0}};
 		o_length      <= {(LGDMALENGTH){1'b0}};

ParseResult:
UPD HdlStmIf@@body to body
    MOV HdlValueId@@i_reset to body
    HdlValueId: i_reset
    MOV HdlStmBlock@@SEQ to body
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_dma_request
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_dma_abort
            HdlStmAssign
                HdlOp: REPL_CONCAT
                    list: ops
                        HdlValueId: AW
                        HdlValueInt: 0
                HdlValueId: o_src_addr
            HdlStmAssign
                HdlOp: REPL_CONCAT
                    list: ops
                        HdlValueId: AW
                        HdlValueInt: 0
                HdlValueId: o_dst_addr
            HdlStmAssign
                HdlOp: REPL_CONCAT
                    list: ops
                        HdlValueId: LGDMALENGTH
                        HdlValueInt: 0
                HdlValueId: o_length
            HdlStmAssign
                HdlValueInt: 1
                HdlValueId: r_zero_len
            HdlStmAssign
                HdlOp: CONCAT
                    list: ops
                        HdlValueInt: 1
                        HdlOp: REPL_CONCAT
                            list: ops
                                HdlValueId: LGMEMLEN
                                HdlValueInt: 0
                HdlValueId: o_transferlen
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_s2mm_inc
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_s2mm_size
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_mm2s_inc
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_mm2s_size
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: r_err
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: o_interrupt
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: int_trigger
            HdlStmAssign
                HdlValueInt: 0
                HdlValueId: int_sel
    UPD HdlStmBlock@@SEQ to SEQ
        UPD list@@body to elifs
        MOV list@@body to SEQ
        list: body
            HdlStmIf
                HdlOp: OR_LOG
                    list: ops
                        HdlValueId: o_dma_request
                        HdlValueId: i_dma_busy
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_dma_busy
                            HdlStmAssign: if_true
                                HdlValueInt: 0
                                HdlValueId: o_dma_request
                            list: elifs
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: EQ
                                                list: ops
                                                    HdlValueId: i_addr
                                                    HdlValueInt: 00
                                            HdlOp: AND_UNARY
                                                list: ops
                                                    HdlValueId: i_sel
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: i_data
                                            HdlValueId: ABORT_KEY
                            HdlStmAssign: if_true
                                HdlValueInt: 01
                                HdlOp: CONCAT
                                    list: ops
                                        HdlValueId: o_dma_request
                                        HdlValueId: o_dma_abort
                            list: elifs
                        HdlStmIf
                            HdlValueId: i_dma_err
                            HdlStmAssign: if_true
                                HdlValueInt: 1
                                HdlValueId: r_err
                            list: elifs
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: r_busy
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlOp: NEG_LOG
                                                list: ops
                                                    HdlValueId: i_dma_busy
                                            HdlValueId: i_dma_err
                            HdlStmAssign: if_true
                                HdlValueInt: 1
                                HdlValueId: o_interrupt
                            list: elifs
                list: elifs
                HdlStmBlock: SEQ
                    list: body
                        HdlStmAssign
                            HdlValueInt: 0
                            HdlValueId: o_dma_abort
                        HdlStmCase: i_addr
                            HdlStmCaseType: CASE
                            HdlValueId: i_addr
                            list: cases
                                tuple
                                    HdlValueInt: 00
                                    HdlStmBlock: SEQ
                                        list: body
                                            HdlStmAssign
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: next_tlen
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueId: LGMEMLEN
                                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: o_transferlen
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueId: LGMEMLEN
                                                                HdlValueInt: 0
                                            HdlStmIf
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_sel
                                                        HdlValueInt: 2
                                                HdlStmBlock: SEQ
                                                    list: body
                                                        HdlStmAssign
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_data
                                                                    HdlValueInt: 22
                                                            HdlValueId: o_s2mm_inc
                                                        HdlStmAssign
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_data
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 21
                                                                            HdlValueInt: 20
                                                            HdlValueId: o_s2mm_size
                                                        HdlStmAssign
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_data
                                                                    HdlValueInt: 26
                                                            HdlValueId: o_mm2s_inc
                                                        HdlStmAssign
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_data
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 25
                                                                            HdlValueInt: 24
                                                            HdlValueId: o_mm2s_size
                                                list: elifs
                                            HdlStmIf
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: i_sel
                                                        HdlValueInt: 3
                                                HdlStmBlock: SEQ
                                                    list: body
                                                        HdlStmIf
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_data
                                                                    HdlValueInt: 29
                                                            HdlStmAssign: if_true
                                                                HdlValueInt: 0
                                                                HdlValueId: o_interrupt
                                                            list: elifs
                                                        HdlStmAssign
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_data
                                                                    HdlValueInt: 29
                                                            HdlValueId: int_trigger
                                                        HdlStmAssign
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_data
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 28
                                                                            HdlValueInt: 24
                                                            HdlValueId: int_sel
                                                        HdlStmIf
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: i_data
                                                                    HdlValueInt: 30
                                                            HdlStmAssign: if_true
                                                                HdlValueInt: 0
                                                                HdlValueId: r_err
                                                            list: elifs
                                                        HdlStmIf
                                                            HdlOp: AND_LOG
                                                                list: ops
                                                                    HdlOp: NEG_LOG
                                                                        list: ops
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: i_data
                                                                                    HdlValueInt: 31
                                                                    HdlOp: OR_LOG
                                                                        list: ops
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: r_err
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: i_data
                                                                                    HdlValueInt: 30
                                                            HdlStmAssign: if_true
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: r_zero_len
                                                                HdlValueId: o_dma_request
                                                            list: elifs
                                                list: elifs
                                tuple
                                    HdlValueInt: 01
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: next_src
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlValueId: AW
                                                                HdlValueInt: 1
                                                        HdlValueInt: 0
                                        HdlValueId: o_src_addr
                                tuple
                                    HdlValueInt: 10
                                    HdlStmAssign
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: next_dst
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlOp: SUB
                                                            list: ops
                                                                HdlValueId: AW
                                                                HdlValueInt: 1
                                                        HdlValueInt: 0
                                        HdlValueId: o_dst_addr
                                tuple
                                    HdlValueInt: 11
                                    HdlStmBlock: SEQ
                                        list: body
                                            HdlStmAssign
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: next_len
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlOp: SUB
                                                                    list: ops
                                                                        HdlValueId: LGDMALENGTH
                                                                        HdlValueInt: 1
                                                                HdlValueInt: 0
                                                HdlValueId: o_length
                                            HdlStmAssign
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: next_len
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlOp: SUB
                                                                            list: ops
                                                                                HdlValueId: LGDMALENGTH
                                                                                HdlValueInt: 1
                                                                        HdlValueInt: 0
                                                        HdlValueInt: 0
                                                HdlValueId: r_zero_len
    MOV tuple@@ to elifs
    tuple
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: i_stb
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: o_stall
                HdlValueId: i_we
        HdlStmBlock: SEQ
            list: body
                HdlStmIf
                    HdlOp: OR_LOG
                        list: ops
                            HdlValueId: o_dma_request
                            HdlValueId: i_dma_busy
                    HdlStmBlock: SEQ
                        list: body
                            HdlStmIf
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: i_dma_busy
                                HdlStmAssign: if_true
                                    HdlValueInt: 0
                                    HdlValueId: o_dma_request
                                list: elifs
                            HdlStmIf
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: i_addr
                                                        HdlValueInt: 00
                                                HdlOp: AND_UNARY
                                                    list: ops
                                                        HdlValueId: i_sel
                                        HdlOp: EQ
                                            list: ops
                                                HdlValueId: i_data
                                                HdlValueId: ABORT_KEY
                                HdlStmAssign: if_true
                                    HdlValueInt: 01
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlValueId: o_dma_request
                                            HdlValueId: o_dma_abort
                                list: elifs
                            HdlStmIf
                                HdlValueId: i_dma_err
                                HdlStmAssign: if_true
                                    HdlValueInt: 1
                                    HdlValueId: r_err
                                list: elifs
                            HdlStmIf
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlValueId: r_busy
                                        HdlOp: OR_LOG
                                            list: ops
                                                HdlOp: NEG_LOG
                                                    list: ops
                                                        HdlValueId: i_dma_busy
                                                HdlValueId: i_dma_err
                                HdlStmAssign: if_true
                                    HdlValueInt: 1
                                    HdlValueId: o_interrupt
                                list: elifs
                    list: elifs
                    HdlStmBlock: SEQ
                        list: body
                            HdlStmAssign
                                HdlValueInt: 0
                                HdlValueId: o_dma_abort
                            HdlStmCase: i_addr
                                HdlStmCaseType: CASE
                                HdlValueId: i_addr
                                list: cases
                                    tuple
                                        HdlValueInt: 00
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmAssign
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: next_tlen
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueId: LGMEMLEN
                                                                    HdlValueInt: 0
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: o_transferlen
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueId: LGMEMLEN
                                                                    HdlValueInt: 0
                                                HdlStmIf
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_sel
                                                            HdlValueInt: 2
                                                    HdlStmBlock: SEQ
                                                        list: body
                                                            HdlStmAssign
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: i_data
                                                                        HdlValueInt: 22
                                                                HdlValueId: o_s2mm_inc
                                                            HdlStmAssign
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: i_data
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 21
                                                                                HdlValueInt: 20
                                                                HdlValueId: o_s2mm_size
                                                            HdlStmAssign
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: i_data
                                                                        HdlValueInt: 26
                                                                HdlValueId: o_mm2s_inc
                                                            HdlStmAssign
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: i_data
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 25
                                                                                HdlValueInt: 24
                                                                HdlValueId: o_mm2s_size
                                                    list: elifs
                                                HdlStmIf
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: i_sel
                                                            HdlValueInt: 3
                                                    HdlStmBlock: SEQ
                                                        list: body
                                                            HdlStmIf
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: i_data
                                                                        HdlValueInt: 29
                                                                HdlStmAssign: if_true
                                                                    HdlValueInt: 0
                                                                    HdlValueId: o_interrupt
                                                                list: elifs
                                                            HdlStmAssign
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: i_data
                                                                        HdlValueInt: 29
                                                                HdlValueId: int_trigger
                                                            HdlStmAssign
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: i_data
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 28
                                                                                HdlValueInt: 24
                                                                HdlValueId: int_sel
                                                            HdlStmIf
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: i_data
                                                                        HdlValueInt: 30
                                                                HdlStmAssign: if_true
                                                                    HdlValueInt: 0
                                                                    HdlValueId: r_err
                                                                list: elifs
                                                            HdlStmIf
                                                                HdlOp: AND_LOG
                                                                    list: ops
                                                                        HdlOp: NEG_LOG
                                                                            list: ops
                                                                                HdlOp: INDEX
                                                                                    list: ops
                                                                                        HdlValueId: i_data
                                                                                        HdlValueInt: 31
                                                                        HdlOp: OR_LOG
                                                                            list: ops
                                                                                HdlOp: NEG_LOG
                                                                                    list: ops
                                                                                        HdlValueId: r_err
                                                                                HdlOp: INDEX
                                                                                    list: ops
                                                                                        HdlValueId: i_data
                                                                                        HdlValueInt: 30
                                                                HdlStmAssign: if_true
                                                                    HdlOp: NEG_LOG
                                                                        list: ops
                                                                            HdlValueId: r_zero_len
                                                                    HdlValueId: o_dma_request
                                                                list: elifs
                                                    list: elifs
                                    tuple
                                        HdlValueInt: 01
                                        HdlStmAssign
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: next_src
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlOp: SUB
                                                                list: ops
                                                                    HdlValueId: AW
                                                                    HdlValueInt: 1
                                                            HdlValueInt: 0
                                            HdlValueId: o_src_addr
                                    tuple
                                        HdlValueInt: 10
                                        HdlStmAssign
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: next_dst
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlOp: SUB
                                                                list: ops
                                                                    HdlValueId: AW
                                                                    HdlValueInt: 1
                                                            HdlValueInt: 0
                                            HdlValueId: o_dst_addr
                                    tuple
                                        HdlValueInt: 11
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmAssign
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: next_len
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlOp: SUB
                                                                        list: ops
                                                                            HdlValueId: LGDMALENGTH
                                                                            HdlValueInt: 1
                                                                    HdlValueInt: 0
                                                    HdlValueId: o_length
                                                HdlStmAssign
                                                    HdlOp: EQ
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: next_len
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlOp: SUB
                                                                                list: ops
                                                                                    HdlValueId: LGDMALENGTH
                                                                                    HdlValueInt: 1
                                                                            HdlValueInt: 0
                                                            HdlValueInt: 0
                                                    HdlValueId: r_zero_len
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: i_stb
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: o_stall
            HdlValueId: i_we
    DEL HdlStmBlock@@SEQ from 
    DEL list@@elifs from body

UPD HdlStmIf@@body to body
    INS HdlOp@@AND_LOG to 

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: o_dma_request

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: o_dma_abort

DEL HdlStmIf@@body from 


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -222,7 +222,7 @@ module	axiops #(
 					swapped_wstrb_byte;
 	reg	[DW-1:0]		axi_wdata;
 	reg	[DW/8-1:0]		axi_wstrb;
-	reg				r_lock;
+	reg				axlock;
 	reg	[AXILSB-1:0]		swapaddr;
 	wire	[DW-1:0]		endian_swapped_rdata;
 	reg	[2*DW-1:0]		pre_result;

ParseResult:
UPD HdlIdDef@@r_lock to axlock


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -287,33 +287,38 @@ module	axiops #(
 	end
 	// }}}
 
-	// r_lock
+	// axlock
 	// {{{
-	initial	r_lock = 1'b0;
+	initial	axlock = 1'b0;
 	always @(posedge i_clk)
 	if (!OPT_LOCK || (!S_AXI_ARESETN && OPT_LOWPOWER))
 	begin
 		// {{{
-		r_lock <= 1'b0;
+		axlock <= 1'b0;
 		// }}}
 	end else if (M_AXI_BREADY || M_AXI_RREADY)
 	begin // Something is outstanding
 		// {{{
 		if (OPT_LOWPOWER && (M_AXI_BVALID || M_AXI_RVALID))
-			r_lock <= 1'b0;
+			axlock <= axlock && i_lock && M_AXI_RVALID;
 		// }}}
 	end else begin // New memory operation
 		// {{{
 		// Initiate a request
-		r_lock <= i_lock && i_stb;
-
-		if (OPT_LOWPOWER && (i_cpu_reset || o_err || w_misaligned))
-			r_lock <= 1'b0;
+		if (!OPT_LOWPOWER)
+			axlock <= i_lock;
+		else begin
+			if (i_stb)
+				axlock <= i_lock;
+
+			if (i_cpu_reset || o_err || w_misaligned)
+				axlock <= 1'b0;
+		end
 		// }}}
 	end
 
-	assign	M_AXI_AWLOCK = r_lock;
-	assign	M_AXI_ARLOCK = r_lock;
+	assign	M_AXI_AWLOCK = axlock;
+	assign	M_AXI_ARLOCK = axlock;
 	// }}}
 
 	// r_flushing

ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: axlock
    HdlValueId: M_AXI_AWLOCK

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: axlock
    HdlValueId: M_AXI_ARLOCK

UPD HdlStmProcess@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: axlock
                HdlValueInt: 0

MOV HdlStmWait@@[] to body
HdlStmWait:
    list: val

INS HdlStmIf@@ to body

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@r_lock to axlock

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to NEG_LOG
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_lock
            HdlValueId: i_stb
    UPD HdlValueId@@r_lock to i_lock
    MOV HdlValueId@@r_lock to 
    HdlValueId: r_lock
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@i_lock to OPT_LOWPOWER
        DEL HdlValueId@@i_stb from ops

INS HdlStmAssign@@if_true to 

UPD HdlStmIf@@ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 

UPD HdlStmAssign@@if_true to if_true
    INS HdlValueId@@axlock to if_true

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD list@@ops to body
        MOV list@@ops to AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlValueId: i_cpu_reset
                            HdlValueId: o_err
                    HdlValueId: w_misaligned
        UPD HdlValueId@@OPT_LOWPOWER to i_stb
        MOV HdlValueId@@OPT_LOWPOWER to ops
        HdlValueId: OPT_LOWPOWER
        MOV HdlOp@@OR_LOG to ops
        HdlOp: OR_LOG
            list: ops
                HdlOp: OR_LOG
                    list: ops
                        HdlValueId: i_cpu_reset
                        HdlValueId: o_err
                HdlValueId: w_misaligned
    DEL HdlOp@@AND_LOG from 

INS HdlStmIf@@ to body

MOV HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlValueId: OPT_LOWPOWER
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlValueId: i_cpu_reset
                            HdlValueId: o_err
                    HdlValueId: w_misaligned
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlValueId: r_lock
    list: elifs

UPD HdlStmAssign@@if_true to if_true
    INS HdlOp@@AND_LOG to if_true
    INS HdlValueId@@axlock to if_true
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@AND_LOG to ops
        INS HdlValueId@@M_AXI_RVALID to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlValueId@@axlock to ops

INS HdlStmAssign@@if_true to 
HdlStmAssign: if_true
    HdlValueId: i_lock
    HdlValueId: axlock

UPD HdlStmIf@@ to 
    INS list@@elifs to 

UPD HdlStmAssign@@if_true to if_true
    UPD HdlValueId@@r_lock to axlock

UPD HdlStmAssign@@if_true to if_true
    UPD HdlValueId@@r_lock to i_lock
    MOV HdlValueId@@r_lock to if_true
    HdlValueId: r_lock
    DEL HdlValueInt@@0 from if_true

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL HdlOp@@ASSIGN from body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: r_lock
                HdlValueInt: 0
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

DEL HdlStmProcess@@ from objs

DEL HdlStmAssign@@ from body

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlValueId: r_lock
    HdlValueId: M_AXI_AWLOCK

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlValueId: r_lock
    HdlValueId: M_AXI_ARLOCK


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -392,34 +397,34 @@ module	axiops #(
 
 	// M_AXI_AxSIZE
 	// {{{
-	reg	[2:0]	awsize;
+	reg	[2:0]	axsize;
 
-	initial	awsize = DSZ;
+	initial	axsize = DSZ;
 	always @(posedge i_clk)
 	if (!S_AXI_ARESETN)
-		awsize <= DSZ;
+		axsize <= DSZ;
 	else if (!M_AXI_BREADY && !M_AXI_RREADY && (!OPT_LOWPOWER || i_stb))
 	begin
 		casez(i_op[2:1])
 		2'b0?: begin
-			awsize <= 3'b010;	// Word
+			axsize <= 3'b010;	// Word
 			if ((|i_addr[1:0]) && !w_misaligned)
-				awsize <= AXILSB[2:0];
+				axsize <= AXILSB[2:0];
 			end
 		2'b10: begin
-			awsize <= 3'b001;	// Half-word
+			axsize <= 3'b001;	// Half-word
 			if (i_addr[0] && !w_misaligned)
-				awsize <= AXILSB[2:0];
+				axsize <= AXILSB[2:0];
 			end
-		2'b11: awsize <= 3'b000;	// Byte
+		2'b11: axsize <= 3'b000;	// Byte
 		endcase
 
 		if (SWAP_WSTRB)
-			awsize <= DSZ;
+			axsize <= DSZ;
 	end
 
-	assign	M_AXI_AWSIZE = awsize;
-	assign	M_AXI_ARSIZE  = M_AXI_AWSIZE;
+	assign	M_AXI_AWSIZE = axsize;
+	assign	M_AXI_ARSIZE = axsize;
 	// }}}
 
 	// AxOTHER

ParseResult:
UPD HdlIdDef@@awsize to axsize

INS HdlStmProcess@@ to objs

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: axsize
    HdlValueId: M_AXI_AWSIZE

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: axsize
    HdlValueId: M_AXI_ARSIZE

UPD HdlStmProcess@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: axsize
                HdlValueId: DSZ

MOV HdlStmWait@@[] to body
HdlStmWait:
    list: val

UPD HdlStmAssign@@if_true to if_true
    UPD HdlValueId@@awsize to axsize

UPD HdlStmAssign@@if_true to if_true
    UPD HdlValueId@@awsize to axsize

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@awsize to axsize

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@awsize to axsize

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@awsize to axsize

UPD HdlStmAssign@@if_true to if_true
    UPD HdlValueId@@awsize to axsize

UPD HdlStmAssign@@if_true to if_true
    UPD HdlValueId@@awsize to axsize

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL HdlOp@@ASSIGN from body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: awsize
                HdlValueId: DSZ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

DEL HdlStmProcess@@ from objs

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlValueId: awsize
    HdlValueId: M_AXI_AWSIZE

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlValueId: M_AXI_AWSIZE
    HdlValueId: M_AXI_ARSIZE


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -775,7 +780,7 @@ module	axiops #(
 	always @(posedge i_clk)
 	if (i_cpu_reset || r_flushing)
 		o_valid <= 1'b0;
-	else if (r_lock)
+	else if (axlock)
 		o_valid <= (M_AXI_RVALID && M_AXI_RRESP == EXOKAY)
 				|| (M_AXI_BVALID && M_AXI_BRESP == OKAY);
 	else

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlValueId@@r_lock to axlock


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -791,7 +796,7 @@ module	axiops #(
 		o_err <= 1'b0;
 	else if (i_stb && w_misalignment_err)
 		o_err <= 1'b1;
-	else if (r_lock)
+	else if (axlock)
 	begin
 		o_err <= (M_AXI_BVALID && M_AXI_BRESP[1])
 			 || (M_AXI_RVALID && M_AXI_RRESP != EXOKAY);

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlValueId@@r_lock to axlock


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -809,7 +814,7 @@ module	axiops #(
 	always @(*)
 	begin
 		o_busy   = M_AXI_BREADY || M_AXI_RREADY;
-		o_rdbusy = (M_AXI_BREADY && r_lock) || M_AXI_RREADY;
+		o_rdbusy = (M_AXI_BREADY && axlock) || M_AXI_RREADY;
 		if (r_flushing)
 			o_rdbusy = 1'b0;
 	end

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@AND_LOG to AND_LOG
                    UPD HdlValueId@@r_lock to axlock


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -900,7 +905,7 @@ module	axiops #(
 	else begin
 		// {{{
 		if (OPT_LOCK && M_AXI_BVALID && (!OPT_LOWPOWER
-					|| (r_lock && M_AXI_BRESP == OKAY)))
+					|| (axlock && M_AXI_BRESP == OKAY)))
 		begin
 			o_result <= 0;
 			o_result[AW-1:0] <= r_pc;

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlValueId@@r_lock to axlock


CommitId: 18b603a0e8fe474895403b92f7b26f144d2d5ac5
OPT_LOCK updates
--- a/rtl/core/axiops.v
+++ b/rtl/core/axiops.v
@@ -940,7 +945,7 @@ module	axiops #(
 
 			if (OPT_LOWPOWER && (M_AXI_RRESP[1] || pending_err
 					|| misaligned_response_pending
-					|| (r_lock && !M_AXI_RRESP[0])))
+					|| (axlock && !M_AXI_RRESP[0])))
 				o_result <= 0;
 			// }}}
 		end

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlValueId@@r_lock to axlock


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -265,22 +366,26 @@ module	zipaxil #(
 	// {{{
 	wire		pf_new_pc, clear_icache, pf_ready;
 	wire [AW+1:0]	pf_request_address;
+`ifndef	VBENCH_TB
 	wire	[31:0]	pf_instruction;
 	wire [AW+1:0]	pf_instruction_pc;
 	wire		pf_valid, pf_illegal;
+`endif
 	// }}}
 	// Memory
 	// {{{
-	wire		clear_dcache, mem_ce, bus_lock;
+	wire		clear_dcache, bus_lock;
 	wire	[2:0]	mem_op;
 	wire	[31:0]	mem_cpu_addr;
 	wire	[AW+1:0]	mem_lock_pc;
 	wire	[31:0]	mem_wdata;
 	wire	[4:0]	mem_reg;
-	wire		mem_busy, mem_rdbusy, mem_pipe_stalled, mem_valid,
-			mem_bus_err;
+	wire		mem_pipe_stalled, mem_bus_err;
+`ifndef	VBENCH_TB
+	wire		mem_ce, mem_valid, mem_busy, mem_rdbusy;
 	wire	[4:0]	mem_wreg;
 	wire	[31:0]	mem_result;
+`endif
 	// }}}
 	// }}}
 	////////////////////////////////////////////////////////////////////////

ParseResult:
MOV HdlIdDef@@mem_ce to objs
HdlIdDef: mem_ce
    HdlDirection: INTERNAL

MOV HdlIdDef@@mem_valid to objs
HdlIdDef: mem_valid
    HdlDirection: INTERNAL

MOV HdlIdDef@@mem_busy to objs
HdlIdDef: mem_busy
    HdlDirection: INTERNAL

MOV HdlIdDef@@mem_rdbusy to objs
HdlIdDef: mem_rdbusy
    HdlDirection: INTERNAL


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -329,7 +434,7 @@ module	zipaxil #(
 	);
 
 	assign	dbg_write_ready = awskd_valid && wskd_valid
-			&& ((wskd_strb==0) || awskd_addr[5]
+			&& ((wskd_strb==0) || awskd_addr[5] != DBG_ADDR_CPU
 			   || !dbg_write_stall)
 			&& (!S_DBG_BVALID || S_DBG_BREADY);
 

ParseResult:
INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_blkram_stall

UPD HdlStmIf@@body to body
    MOV HdlOp@@NEG_LOG to body
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: S_AXI_ARESETN

INS HdlStmAssign@@ to 


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -337,7 +442,7 @@ module	zipaxil #(
 	// {{{
 	initial	dbg_write_valid = 0;
 	always @(posedge S_AXI_ACLK)
-	if (!S_AXI_ARESETN)
+	if (!S_AXI_ARESETN || !OPT_DBGPORT)
 		dbg_write_valid <= 1'b0;
 	else if (!dbg_write_stall)
 		dbg_write_valid <= dbg_cpu_write;

ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: NE
        list: ops
            HdlValueId: r_blkram_stall
            HdlValueInt: 0
    HdlValueId: dbg_blkram_stall

INS HdlStmIf@@body to 

INS HdlStmAssign@@if_false to body
HdlStmAssign: if_false
    HdlOp: EQ
        list: ops
            HdlValueId: r_blkram_stall
            HdlValueInt: 1
    HdlValueId: dbg_read_valid

UPD HdlStmIf@@body to body
    MOV HdlOp@@NEG_LOG to body
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: S_AXI_ARESETN


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -405,7 +510,7 @@ module	zipaxil #(
 		// }}}
 	);
 
-	assign	dbg_read_ready = arskd_valid && !dbg_read_valid
+	assign	dbg_read_ready = arskd_valid && !dbg_blkram_stall
 				&& (!S_DBG_RVALID || S_DBG_RREADY);
 
 	assign	dbg_read_reg = (OPT_LOWPOWER && !dbg_read_ready)

ParseResult:
MOV HdlStmProcess@@ to objs
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: dbg_read_valid
                    HdlValueInt: 0
            HdlStmWait:
                list: val

MOV HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: dbg_read_valid

UPD HdlStmIf@@body to body
    DEL list@@elifs from body


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -413,13 +518,30 @@ module	zipaxil #(
 
 	// dbg_read_valid
 	// {{{
+	reg	[1:0]	r_blkram_stall;
+
+	initial	r_blkram_stall = 0;
+	always @(posedge S_AXI_ACLK)
+	if (!S_AXI_ARESETN || !OPT_DBGPORT)
+		r_blkram_stall <= 0;
+	else if (dbg_read_ready && arskd_addr[5] == DBG_ADDR_CPU)
+		r_blkram_stall <= 2 + (OPT_DISTRIBUTED_REGS ? 0:1);
+	else if (r_blkram_stall > 0)
+		r_blkram_stall <= r_blkram_stall - 1;
+
 	initial	dbg_read_valid = 0;
 	always @(posedge S_AXI_ACLK)
 	if (!S_AXI_ARESETN || !OPT_DBGPORT)
 		dbg_read_valid <= 0;
 	else
-		dbg_read_valid <= dbg_read_ready
-					&& arskd_addr[5] == DBG_ADDR_CPU;
+		dbg_read_valid <= (r_blkram_stall == 1);
+
+	assign	dbg_blkram_stall = (r_blkram_stall != 0);
+`ifdef	FORMAL
+	always @(*)
+	if (S_AXI_ARESETN && (dbg_read_valid || dbg_blkram_stall))
+		assert(!S_DBG_RVALID);
+`endif
 	// }}}
 
 	// S_DBG_RVALID

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    MOV HdlOp@@AND_LOG to if_false
    HdlOp: AND_LOG
        list: ops
            HdlValueId: dbg_read_ready
            HdlOp: EQ
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: arskd_addr
                            HdlValueInt: 5
                    HdlValueId: DBG_ADDR_CPU
    UPD HdlValueId@@dbg_read_valid to OPT_DISTRIBUTED_REGS
    MOV HdlValueId@@dbg_read_valid to if_false
    HdlValueId: dbg_read_valid

UPD HdlStmIf@@body to body
    DEL list@@elifs from body

DEL HdlStmAssign@@if_false from body


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -514,7 +636,7 @@ module	zipaxil #(
 			assert(reset_hold == (reset_counter != 0));
 `endif
 		// }}}
-	end else begin
+	end else begin : NO_RESET_HOLD
 
 		assign reset_hold = 0;
 

ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmIf@@body to 

INS HdlStmAssign@@if_false to body
HdlStmAssign: if_false
    HdlValueInt: 0
    HdlValueId: cmd_step


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/zipaxil.v
+++ b/rtl/zipaxil.v
@@ -609,10 +731,21 @@ module	zipaxil #(
 	always @(posedge S_AXI_ACLK)
 	if (!S_AXI_ARESETN || i_cpu_reset)
 		cmd_step <= 1'b0;
-	else if (step_request)
+	else if (cmd_reset || cpu_break
+			|| reset_request
+			|| clear_cache_request || cmd_clear_cache
+			|| halt_request || dbg_cpu_write)
+		cmd_step <= 1'b0;
+	else if (!dbg_write_valid && cpu_has_halted && step_request)
 		cmd_step <= 1'b1;
-	else if (!cpu_dbg_stall)
+	else // if (cpu_dbg_stall)
 		cmd_step <= 1'b0;
+`ifdef	FORMAL
+	// While STEP is true, we can't halt
+	always @(*)
+	if (S_AXI_ARESETN && cmd_step)
+		assert(!cmd_halt);
+`endif
 	// }}}
 
 	// dbg_catch

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: step_request


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -77,7 +77,7 @@ module	zipbones #(
 		parameter [0:0]	OPT_CIS=1,
 		parameter [0:0]	OPT_LOCK=1,
 		parameter [0:0]	OPT_USERMODE=1,
-		parameter [0:0]	OPT_DBGPORT=1,
+		parameter [0:0]	OPT_DBGPORT=START_HALTED,
 		parameter [0:0]	OPT_TRACE_PORT=1,
 		parameter [0:0]	OPT_PROFILER=0,
 		parameter [0:0]	OPT_LOWPOWER=0,

ParseResult:
UPD HdlIdDef@@OPT_DBGPORT to OPT_DBGPORT
    INS HdlValueId@@START_HALTED to OPT_DBGPORT

UPD HdlIdDef@@OPT_DBGPORT to OPT_DBGPORT
    DEL HdlValueInt@@1 from OPT_DBGPORT


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -160,7 +162,8 @@ module	zipbones #(
 	localparam	HALT_BIT = 0,
 			STEP_BIT = 2,
 			RESET_BIT = 3,
-			CLEAR_CACHE_BIT = 4;
+			CLEAR_CACHE_BIT = 4,
+			CATCH_BIT = 5;
 	// }}}
 
 	wire			cpu_clken;

ParseResult:
INS HdlIdDef@@CATCH_BIT to objs
HdlIdDef: CATCH_BIT
    HdlValueInt: 5
    HdlDirection: INTERNAL


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -171,7 +174,9 @@ module	zipbones #(
 	reg	[DBG_WIDTH-1:0]	dbg_odata;
 	reg			dbg_ack;
 	wire			cpu_break, dbg_cmd_write, dbg_cpu_write;
-	wire			reset_hold;
+	wire			reset_hold, halt_on_fault, dbg_catch;
+	wire			reset_request, release_request, halt_request,
+				step_request, clear_cache_request;
 	reg			cmd_reset, cmd_halt, cmd_step, cmd_clear_cache,
 				cmd_write;
 	reg	[4:0]		cmd_waddr;

ParseResult:
INS HdlIdDef@@halt_on_fault to objs
HdlIdDef: halt_on_fault
    HdlDirection: INTERNAL

INS HdlIdDef@@dbg_catch to objs
HdlIdDef: dbg_catch
    HdlDirection: INTERNAL

INS HdlIdDef@@reset_request to objs
HdlIdDef: reset_request
    HdlDirection: INTERNAL

INS HdlIdDef@@release_request to objs
HdlIdDef: release_request
    HdlDirection: INTERNAL

INS HdlIdDef@@halt_request to objs
HdlIdDef: halt_request
    HdlDirection: INTERNAL

INS HdlIdDef@@step_request to objs
HdlIdDef: step_request
    HdlDirection: INTERNAL

INS HdlIdDef@@clear_cache_request to objs
HdlIdDef: clear_cache_request
    HdlDirection: INTERNAL


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -228,6 +233,19 @@ module	zipbones #(
 	assign	dbg_cmd_data = dbg_idata;
 	assign	dbg_cmd_strb = dbg_sel;
 
+
+	assign	reset_request = dbg_cmd_write && dbg_cmd_strb[RESET_BIT/8]
+						&& dbg_cmd_data[RESET_BIT];
+	assign	release_request = dbg_cmd_write && dbg_cmd_strb[HALT_BIT/8]
+						&& !dbg_cmd_data[HALT_BIT];
+	assign	halt_request = dbg_cmd_write && dbg_cmd_strb[HALT_BIT/8]
+						&& dbg_cmd_data[HALT_BIT];
+	assign	step_request = dbg_cmd_write && dbg_cmd_strb[STEP_BIT/8]
+						&& dbg_cmd_data[STEP_BIT];
+	assign	clear_cache_request = dbg_cmd_write
+					&& dbg_cmd_strb[CLEAR_CACHE_BIT/8]
+					&& dbg_cmd_data[CLEAR_CACHE_BIT];
+
 	//
 	// reset_hold: Always start us off with an initial reset
 	// {{{

ParseResult:
INS HdlStmAssign@@ to objs

INS HdlStmAssign@@ to objs

INS HdlStmAssign@@ to objs

INS HdlStmAssign@@ to objs

INS HdlStmAssign@@ to objs


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -264,6 +282,8 @@ module	zipbones #(
 	end endgenerate
 	// }}}
 
+	assign	halt_on_fault = dbg_catch;
+
 	// cmd_reset
 	// {{{
 	// Always start us off with an initial reset

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@START_HALTED to halt_on_fault


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -273,11 +293,10 @@ module	zipbones #(
 		cmd_reset <= 1'b1;
 	else if (reset_hold)
 		cmd_reset <= 1'b1;
-	else if (cpu_break && !START_HALTED)
+	else if (cpu_break && !halt_on_fault)
 		cmd_reset <= 1'b1;
 	else
-		cmd_reset <= (dbg_cmd_write && dbg_cmd_strb[0]
-					&& dbg_cmd_data[RESET_BIT]);
+		cmd_reset <= reset_request;
 	// }}}
 
 	// cmd_halt

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_data
                HdlValueId: RESET_BIT
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@dbg_cmd_write to reset_request
            MOV HdlValueId@@dbg_cmd_write to ops
            HdlValueId: dbg_cmd_write
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_strb
                    HdlValueInt: 0
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from if_false

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@START_HALTED to halt_on_fault


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -295,8 +314,7 @@ module	zipbones #(
 		// aren't being given a command to step the CPU.
 		//
 		if (!cmd_write && !cpu_dbg_stall && dbg_cmd_write
-			&& dbg_cmd_strb[1] && (!dbg_cmd_data[HALT_BIT]
-				|| dbg_cmd_data[STEP_BIT]))
+				&& (release_request || step_request))
 			cmd_halt <= 1'b0;
 
 		// Reasons to halt

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@START_HALTED to halt_on_fault


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -305,13 +323,12 @@ module	zipbones #(
 		//	exception must be cured before we can (re)start.
 		//	If the CPU is configured to start immediately on power
 		//	up, we leave it to reset on any exception instead.
-		if (cpu_break && START_HALTED)
+		if (cpu_break && halt_on_fault)
 			cmd_halt <= 1'b1;
 
 		// 2. Halt on any user request to halt.  (Only valid if the
 		//	STEP bit isn't also set)
-		if (dbg_cmd_write && dbg_cmd_strb[1] && dbg_cmd_data[HALT_BIT]
-				&& !dbg_cmd_data[STEP_BIT])
+		if (dbg_cmd_write && halt_request && !step_request)
 			cmd_halt <= 1'b1;
 
 		// 3. Halt on any user request to write to a CPU register

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: dbg_cmd_write
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: dbg_cmd_strb
                            HdlValueInt: 1
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@dbg_cmd_strb to halt_request
                    MOV HdlValueId@@dbg_cmd_strb to ops
                    HdlValueId: dbg_cmd_strb
                    DEL HdlValueInt@@1 from ops
                    DEL list@@ops from INDEX
                DEL HdlOp@@INDEX from ops
            DEL HdlOp@@INDEX from ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: HALT_BIT
            DEL list@@ops from AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlOp@@INDEX to INDEX
                MOV list@@ops to INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: STEP_BIT
                UPD HdlValueId@@dbg_cmd_data to step_request
                DEL HdlValueId@@STEP_BIT from ops
            DEL HdlOp@@INDEX from ops
            DEL list@@ops from NEG_LOG
        DEL HdlOp@@AND_LOG from ops

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            INS HdlValueId@@step_request to ops


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -327,7 +344,7 @@ module	zipbones #(
 			cmd_halt <= 1'b1;
 
 		// 5. Halt on any clear cache bit--independent of any step bit
-		if (dbg_cmd_write && dbg_cmd_strb[1] && dbg_cmd_data[CLEAR_CACHE_BIT])
+		if (clear_cache_request)
 			cmd_halt <= 1'b1;
 		// }}}
 	end

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: HALT_BIT
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueId@@dbg_cmd_data to clear_cache_request
                    MOV HdlValueId@@dbg_cmd_data to ops
                    HdlValueId: dbg_cmd_data
                    DEL HdlValueId@@CLEAR_CACHE_BIT from ops
                    DEL list@@ops from INDEX
                DEL HdlOp@@INDEX from ops
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: dbg_cmd_write
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: dbg_cmd_data
                                HdlValueId: CLEAR_CACHE_BIT
                HdlOp: INDEX
                    list: ops
                        HdlValueId: dbg_cmd_data
                        HdlValueId: HALT_BIT
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 1
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -339,8 +356,7 @@ module	zipbones #(
 	always @(posedge i_clk)
 	if (i_reset || cpu_reset)
 		cmd_clear_cache <= 1'b0;
-	else if (dbg_cmd_write && dbg_cmd_data[CLEAR_CACHE_BIT]
-			&& dbg_cmd_data[HALT_BIT] && dbg_cmd_strb[1])
+	else if (dbg_cmd_write && clear_cache_request && halt_request)
 		cmd_clear_cache <= 1'b1;
 	else if (cmd_halt && !cpu_dbg_stall)
 		cmd_clear_cache <= 1'b0;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: STEP_BIT
            UPD HdlValueId@@dbg_cmd_write to step_request
            MOV HdlValueId@@dbg_cmd_write to ops
            HdlValueId: dbg_cmd_write
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 1
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -348,16 +364,35 @@ module	zipbones #(
 
 	// cmd_step
 	// {{{
-	initial	cmd_step  = 1'b0;
+	initial	cmd_step = 1'b0;
 	always @(posedge i_clk)
 	if (i_reset)
 		cmd_step <= 1'b0;
-	else if (dbg_cmd_write && dbg_cmd_data[STEP_BIT] && dbg_cmd_strb[1])
+	else if (step_request)
 		cmd_step <= 1'b1;
 	else if (!cpu_dbg_stall)
 		cmd_step <= 1'b0;
 	// }}}
 
+	// dbg_catch
+	// {{{
+	generate if (!OPT_DBGPORT)
+	begin
+		assign	dbg_catch = START_HALTED;
+	end else begin
+		reg	r_dbg_catch;
+
+		initial	r_dbg_catch = START_HALTED;
+		always @(posedge i_clk)
+		if (i_reset)
+			r_dbg_catch <= START_HALTED;
+		else if (dbg_cmd_write && dbg_cmd_strb[CATCH_BIT/8])
+			r_dbg_catch <= dbg_cmd_data[CATCH_BIT];
+
+		assign	dbg_catch = r_dbg_catch;
+	end endgenerate
+	// }}}
+
 	assign	cpu_reset = (cmd_reset);
 	assign	cpu_halt = (cmd_halt);
 

ParseResult:
INS HdlStmIf@@ to objs
HdlStmIf
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: OPT_DBGPORT
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueId: START_HALTED
                HdlValueId: dbg_catch
    list: elifs
    HdlStmBlock: SEQ
        list: body
            HdlIdDef: r_dbg_catch
                HdlOp: PARAMETRIZATION
                    list: ops
                        HdlValueId: reg
                HdlDirection: INTERNAL
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: r_dbg_catch
                                HdlValueId: START_HALTED
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmIf: body
                    HdlValueId: i_reset
                    HdlStmAssign: if_true
                        HdlValueId: START_HALTED
                        HdlValueId: r_dbg_catch
                    list: elifs
                        tuple
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: dbg_cmd_write
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: dbg_cmd_strb
                                            HdlOp: DIV
                                                list: ops
                                                    HdlValueId: CATCH_BIT
                                                    HdlValueInt: 8
                            HdlStmAssign
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: dbg_cmd_data
                                        HdlValueId: CATCH_BIT
                                HdlValueId: r_dbg_catch
            HdlStmAssign
                HdlValueId: r_dbg_catch
                HdlValueId: dbg_catch

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlOp@@INDEX to ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dbg_cmd_data
                    HdlValueId: STEP_BIT
            UPD HdlValueId@@dbg_cmd_write to step_request
            MOV HdlValueId@@dbg_cmd_write to ops
            HdlValueId: dbg_cmd_write
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dbg_cmd_strb
                HdlValueInt: 1
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlValueId@@halt_request to ops


CommitId: a10a25da0dc4ba311899d50a0ea056ef316f0fe2
Made halt on fault user configurable
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -370,7 +405,8 @@ module	zipbones #(
 	//	0x0000_0200 -> User mode
 	//	0x0000_0100 -> Sleep (CPU is sleeping)
 	//
-	//	0x0000_00e0 -> (Unused/reserved)
+	//	0x0000_00c0 -> (Unused/reserved)
+	//	0x0000_0020 -> dbg_catch
 	//	0x0000_0010 -> cmd_clear_cache
 	//
 	//	0x0000_0008 -> Reset

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@CONCAT to CONCAT
            MOV HdlOp@@CONCAT to ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlOp: CONCAT
                                list: ops
                                    HdlOp: CONCAT
                                        list: ops
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlOp: CONCAT
                                                                list: ops
                                                                    HdlOp: CONCAT
                                                                        list: ops
                                                                            HdlValueInt: 0
                                                                            HdlValueInt: 0
                                                                    HdlValueId: cpu_break
                                                            HdlValueId: i_ext_int
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: cpu_dbg_cc
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 1
                                                                    HdlValueInt: 0
                                            HdlValueInt: 0
                                    HdlValueInt: 0
                            HdlValueId: cmd_reset
                    HdlValueInt: 0
            UPD HdlOp@@CONCAT to CONCAT
                MOV HdlValueInt@@0 to ops
                HdlValueInt: 0
                UPD HdlOp@@CONCAT to CONCAT
                    MOV HdlValueId@@cmd_reset to ops
                    HdlValueId: cmd_reset
                    UPD HdlOp@@CONCAT to CONCAT
                        MOV HdlValueInt@@0 to ops
                        HdlValueInt: 0


CommitId: 092c90604600f8ff11305c14f234f2b74b32fc5c
Verilator lint fixes
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -61,7 +61,7 @@ module	mpyop #(
 		output	wire		o_valid, // True if the result is valid
 		output	wire		o_busy,	//
 		output	wire	[63:0]	o_result, // multiply result
-		output	reg		o_hi	// Return the high half of mpy
+		output	wire		o_hi	// Return the high half of mpy
 		// }}}
 	);
 

ParseResult:
INS HdlIdDef@@o_hi to ports
HdlIdDef: o_hi
    HdlDirection: OUT

UPD HdlIdDef@@o_hi to r_hi

MOV HdlIdDef@@o_hi to ports
HdlIdDef: o_hi
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: OUT

UPD HdlIdDef@@o_hi to o_hi
    UPD HdlDirection@@OUT to INTERNAL


CommitId: 092c90604600f8ff11305c14f234f2b74b32fc5c
Verilator lint fixes
--- a/rtl/core/mpyop.v
+++ b/rtl/core/mpyop.v
@@ -83,7 +83,7 @@ module	mpyop #(
 		assign	o_result   = 64'h00;
 		assign	o_busy     = 1'b0;
 		assign	o_valid    = i_stb;
-		always @(*) o_hi = 1'b0; // Not needed
+		assign	o_hi = 1'b0; // Not needed
 
 `ifdef	VERILATOR
 		// verilator lint_off UNUSED

ParseResult:
INS HdlStmAssign@@ to body

UPD HdlStmAssign@@ to 
    INS HdlValueInt@@0 to 

UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        MOV HdlValueId@@o_hi to ops
        HdlValueId: o_hi
        DEL HdlValueInt@@0 from ops
        DEL list@@ops from ASSIGN
    DEL list@@sensitivity from 
    list: sensitivity
        HdlAll
    DEL HdlOp@@ASSIGN from 

DEL HdlStmProcess@@ from body


CommitId: 48740c94544dceef27006280064319898b78a9b0
Formally proved the ZipTimer
--- a/rtl/peripherals/ziptimer.v
+++ b/rtl/peripherals/ziptimer.v
@@ -71,12 +71,12 @@
 //
 `default_nettype	none
 //
-module	ziptimer(i_clk, i_rst, i_ce,
+module	ziptimer(i_clk, i_reset, i_ce,
 		i_wb_cyc, i_wb_stb, i_wb_we, i_wb_data,
 			o_wb_ack, o_wb_stall, o_wb_data,
 		o_int);
 	parameter	BW = 32, VW = (BW-1), RELOADABLE=1;
-	input	wire		i_clk, i_rst, i_ce;
+	input	wire		i_clk, i_reset, i_ce;
 	// Wishbone inputs
 	input	wire		i_wb_cyc, i_wb_stb, i_wb_we;
 	input	wire [(BW-1):0]	i_wb_data;

ParseResult:
UPD HdlIdDef@@i_rst to i_reset


CommitId: 48740c94544dceef27006280064319898b78a9b0
Formally proved the ZipTimer
--- a/rtl/peripherals/ziptimer.v
+++ b/rtl/peripherals/ziptimer.v
@@ -90,18 +90,18 @@ module	ziptimer(i_clk, i_rst, i_ce,
 	reg			r_running;
 
 	wire	wb_write;
-	assign	wb_write = ((i_wb_cyc)&&(i_wb_stb)&&(i_wb_we));
+	assign	wb_write = ((i_wb_stb)&&(i_wb_we));
 
 	wire	auto_reload;
 	wire	[(VW-1):0]	reload_value;
 
 	initial	r_running = 1'b0;
 	always @(posedge i_clk)
-		if (i_rst)
+		if (i_reset)
 			r_running <= 1'b0;
 		else if (wb_write)
 			r_running <= (|i_wb_data[(VW-1):0]);
-		else if ((o_int)&&(~auto_reload))
+		else if ((r_zero)&&(!auto_reload))
 			r_running <= 1'b0;
 
 	generate

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlValueId@@i_rst to i_reset
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@o_int to r_zero
        UPD HdlOp@@NEG to NEG_LOG

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            MOV HdlValueId@@i_wb_stb to ops
            HdlValueId: i_wb_stb
            DEL HdlValueId@@i_wb_cyc from ops
            DEL list@@ops from AND_LOG
        DEL HdlOp@@AND_LOG from ops


CommitId: 48740c94544dceef27006280064319898b78a9b0
Formally proved the ZipTimer
--- a/rtl/peripherals/ziptimer.v
+++ b/rtl/peripherals/ziptimer.v
@@ -113,15 +113,21 @@ module	ziptimer(i_clk, i_rst, i_ce,
 		initial	r_auto_reload = 1'b0;
 
 		always @(posedge i_clk)
-			if (wb_write)
-				r_auto_reload <= (i_wb_data[(BW-1)]);
+			if (i_reset)
+				r_auto_reload <= 1'b0;
+			else if (wb_write)
+				r_auto_reload <= (i_wb_data[(BW-1)])
+					&&(|i_wb_data[(VW-1):0]);
 
 		assign	auto_reload = r_auto_reload;
 
 		// If setting auto-reload mode, and the value to other
 		// than zero, set the auto-reload value
+		initial	r_reload_value = 0;
 		always @(posedge i_clk)
-			if ((wb_write)&&(i_wb_data[(BW-1)])&&(|i_wb_data[(VW-1):0]))
+			if (i_reset)
+				r_reload_value <= 0;
+			else if ((wb_write)&&(i_wb_data[(BW-1)]))
 				r_reload_value <= i_wb_data[(VW-1):0];
 		assign	reload_value = r_reload_value;
 	end else begin

ParseResult:
INS HdlStmProcess@@ to body
HdlStmProcess
    HdlStmBlock: SEQ
        list: body
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: r_reload_value
                    HdlValueInt: 0
            HdlStmWait:
                list: val

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS tuple@@ to elifs

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_auto_reload

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS tuple@@ to elifs

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: r_reload_value

UPD HdlStmIf@@body to body
    MOV HdlValueId@@wb_write to body
    HdlValueId: wb_write
    DEL list@@elifs from body

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlOp: INDEX
        list: ops
            HdlValueId: i_wb_data
            HdlOp: SUB
                list: ops
                    HdlValueId: BW
                    HdlValueInt: 1
    HdlValueId: r_auto_reload

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlValueId: wb_write
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_wb_data
                        HdlOp: SUB
                            list: ops
                                HdlValueId: BW
                                HdlValueInt: 1
    MOV HdlOp@@AND_LOG to body
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlValueId: wb_write
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_wb_data
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: BW
                                    HdlValueInt: 1
            HdlOp: OR_UNARY
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: i_wb_data
                            HdlOp: DOWNTO
                                list: ops
                                    HdlOp: SUB
                                        list: ops
                                            HdlValueId: VW
                                            HdlValueInt: 1
                                    HdlValueInt: 0
    DEL list@@elifs from body

UPD HdlStmAssign@@if_true to 

MOV HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlOp: INDEX
        list: ops
            HdlValueId: i_wb_data
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: VW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlValueId: r_reload_value

UPD HdlStmAssign@@if_true to if_true
    MOV HdlOp@@INDEX to if_true
    HdlOp: INDEX
        list: ops
            HdlValueId: i_wb_data
            HdlOp: SUB
                list: ops
                    HdlValueId: BW
                    HdlValueInt: 1


CommitId: c249d2cb76e35d88e37f7463794be004f394e806
DMA bugfix, required following the implementation of the end-DMA cmd and 8-bit bytes
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -197,7 +197,8 @@ module wbdmac(i_clk, i_rst,
 		begin
 			case(i_swb_addr)
 			2'b00: begin
-				if ((i_swb_data[31:16] == 16'h0fed)
+				if ((i_swb_data[27:16] == 12'hfed)
+					&&(i_swb_data[31:30] == 2'b00)
 						&&(cfg_len_nonzero))
 					dma_state <= `DMA_WAIT;
 				cfg_blocklen_sub_one

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@NEG to NEG_LOG

UPD HdlStmAssign@@ to 
    UPD HdlOp@@NEG to NEG_LOG


CommitId: c249d2cb76e35d88e37f7463794be004f394e806
DMA bugfix, required following the implementation of the end-DMA cmd and 8-bit bytes
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -206,15 +207,15 @@ module wbdmac(i_clk, i_rst,
 					// i.e. -1;
 				cfg_dev_trigger    <= i_swb_data[14:10];
 				cfg_on_dev_trigger <= i_swb_data[15];
-				cfg_incs  <= ~i_swb_data[29];
-				cfg_incd  <= ~i_swb_data[28];
+				cfg_incs  <= !i_swb_data[29];
+				cfg_incd  <= !i_swb_data[28];
 				end
 			2'b01: begin
 				cfg_len   <=  i_swb_data[(AW-1):0];
 				cfg_len_nonzero <= (|i_swb_data[(AW-1):0]);
 				end
-			2'b10: cfg_raddr <=  i_swb_data[(AW-1):0];
-			2'b11: cfg_waddr <=  i_swb_data[(AW-1):0];
+			2'b10: cfg_raddr <=  i_swb_data[(AW+2-1):2];
+			2'b11: cfg_waddr <=  i_swb_data[(AW+2-1):2];
 			endcase
 		end end
 	`DMA_WAIT: begin

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@0 to 2
            UPD HdlOp@@SUB to SUB
                MOV HdlValueId@@AW to ops
                HdlValueId: AW

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@0 to 2
            UPD HdlOp@@SUB to SUB
                MOV HdlValueId@@AW to ops
                HdlValueId: AW

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                INS HdlOp@@ADD to ops
                UPD HdlOp@@ADD to ADD
                    INS list@@ops to ADD
                    INS HdlValueInt@@2 to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlOp@@SUB to SUB
                INS HdlOp@@ADD to ops
                UPD HdlOp@@ADD to ADD
                    INS list@@ops to ADD
                    INS HdlValueInt@@2 to ops


CommitId: c249d2cb76e35d88e37f7463794be004f394e806
DMA bugfix, required following the implementation of the end-DMA cmd and 8-bit bytes
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -453,8 +454,8 @@ module wbdmac(i_clk, i_rst,
 					cfg_blocklen_sub_one
 					};
 		2'b01: o_swb_data <= { {(DW-AW){1'b0}}, cfg_len  };
-		2'b10: o_swb_data <= { {(DW-AW){1'b0}}, cfg_raddr};
-		2'b11: o_swb_data <= { {(DW-AW){1'b0}}, cfg_waddr};
+		2'b10: o_swb_data <= { {(DW-2-AW){1'b0}}, cfg_raddr, 2'b00 };
+		2'b11: o_swb_data <= { {(DW-2-AW){1'b0}}, cfg_waddr, 2'b00 };
 		endcase
 
 	// This causes us to wait a minimum of two clocks before starting: One

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@CONCAT to 
    UPD HdlOp@@CONCAT to CONCAT
        INS list@@ops to CONCAT
        INS HdlValueInt@@00 to ops
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlOp@@REPL_CONCAT to REPL_CONCAT
                UPD HdlOp@@SUB to SUB
                    INS HdlOp@@SUB to ops
                    UPD HdlOp@@SUB to SUB
                        INS list@@ops to SUB
                        INS HdlValueInt@@2 to ops


CommitId: c249d2cb76e35d88e37f7463794be004f394e806
DMA bugfix, required following the implementation of the end-DMA cmd and 8-bit bytes
--- a/rtl/peripherals/wbdmac.v
+++ b/rtl/peripherals/wbdmac.v
@@ -487,5 +488,12 @@ module wbdmac(i_clk, i_rst,
 				&&(i_swb_addr == 2'b00)
 				&&(i_swb_data == 32'hafed0000));
 
+
+	// Make verilator happy
+	// verilator lint_off UNUSED
+	wire	unused;
+	assign	unused = i_swb_cyc;
+	// verilator lint_on  UNUSED
+
 endmodule
 
ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlValueId: i_swb_cyc
    HdlValueId: unused


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -49,19 +49,22 @@
 //
 `default_nettype	none
 //
-module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
-			i_stall_n, i_pc, o_insn, o_pc, o_valid,
+module	dblfetch(i_clk, i_reset,
+		i_new_pc, i_clear_cache, i_ready, i_pc,
+		o_valid, o_illegal, o_insn, o_pc,
 		o_wb_cyc, o_wb_stb, o_wb_we, o_wb_addr, o_wb_data,
-			i_wb_stall, i_wb_ack, i_wb_err, i_wb_data,
-		o_illegal);
+			i_wb_stall, i_wb_ack, i_wb_err, i_wb_data);
 	parameter		ADDRESS_WIDTH=30;
 	localparam		AW=ADDRESS_WIDTH, DW = 32;
-	input	wire			i_clk, i_reset, i_new_pc, i_clear_cache,
-						i_stall_n;
+	input	wire			i_clk, i_reset;
+	// CPU signals--from the CPU
+	input	wire			i_new_pc, i_clear_cache, i_ready;
 	input	wire	[(AW+1):0]	i_pc;
+	// ... and in return
+	output	reg			o_valid;
+	output	reg			o_illegal;
 	output	reg	[(DW-1):0]	o_insn;
 	output	reg	[(AW+1):0]	o_pc;
-	output	reg			o_valid;
 	// Wishbone outputs
 	output	reg			o_wb_cyc, o_wb_stb;
 	output	wire			o_wb_we;

ParseResult:
MOV HdlIdDef@@o_valid to ports
HdlIdDef: o_valid
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: OUT

MOV HdlIdDef@@o_illegal to ports
HdlIdDef: o_illegal
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: OUT

UPD HdlIdDef@@i_stall_n to i_ready


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -106,7 +107,7 @@ module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
 		end
 
 	end else if ((i_new_pc)||(invalid_bus_cycle)
-		||((o_valid)&&(i_stall_n)&&(!o_illegal)))
+		||((o_valid)&&(i_ready)&&(!o_illegal)))
 	begin
 		// Initiate a bus cycle if ... the last bus cycle was
 		// aborted (bus error or new_pc), we've been given a

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlValueId@@i_stall_n to i_ready


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -132,7 +133,7 @@ module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
 	end
 
 	always @(*)
-		last_stb = (inflight != 2'b00)||((o_valid)&&(!i_stall_n));
+		last_stb = (inflight != 2'b00)||((o_valid)&&(!i_ready));
 
 	initial	invalid_bus_cycle = 1'b0;
 	always @(posedge i_clk)

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@NEG_LOG to NEG_LOG
                    UPD HdlValueId@@i_stall_n to i_ready


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -160,11 +161,11 @@ module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
 		o_valid <= 1'b0;
 	else if ((o_wb_cyc)&&((i_wb_ack)||(i_wb_err)))
 		o_valid <= 1'b1;
-	else if (i_stall_n)
+	else if (i_ready)
 		o_valid <= cache_valid;
 
 	always @(posedge i_clk)
-	if ((!o_valid)||(i_stall_n))
+	if ((!o_valid)||(i_ready))
 	begin
 		if (cache_valid)
 			o_insn <= cache_word;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlValueId@@i_stall_n to i_ready

UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlValueId@@i_stall_n to i_ready


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -175,7 +176,7 @@ module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
 	always @(posedge i_clk)
 	if (i_new_pc)
 		o_pc <= i_pc;
-	else if ((o_valid)&&(i_stall_n))
+	else if ((o_valid)&&(i_ready))
 	begin
 		o_pc[AW+1:2] <= o_pc[AW+1:2] + 1'b1;
 		o_pc[1:0] <= 2'b00;

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlValueId@@i_stall_n to i_ready


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -185,7 +186,7 @@ module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
 	always @(posedge i_clk)
 	if ((i_reset)||(i_new_pc)||(i_clear_cache))
 		o_illegal <= 1'b0;
-	else if ((!o_valid)||(i_stall_n))
+	else if ((!o_valid)||(i_ready))
 	begin
 		if (cache_valid)
 			o_illegal <= (o_illegal)||(cache_illegal);

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlValueId@@i_stall_n to i_ready


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -208,8 +209,8 @@ module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
 		cache_valid <= 1'b0;
 	else begin
 		if ((o_valid)&&(o_wb_cyc)&&((i_wb_ack)||(i_wb_err)))
-			cache_valid <= (!i_stall_n)||(cache_valid);
-		else if (i_stall_n)
+			cache_valid <= (!i_ready)||(cache_valid);
+		else if (i_ready)
 			cache_valid <= 1'b0;
 	end
 

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlValueId@@i_stall_n to i_ready

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@i_stall_n to i_ready


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/dblfetch.v
+++ b/rtl/core/dblfetch.v
@@ -222,9 +223,9 @@ module	dblfetch(i_clk, i_reset, i_new_pc, i_clear_cache,
 	if ((i_reset)||(i_clear_cache)||(i_new_pc))
 		cache_illegal <= 1'b0;
 	// Older logic ...
-	// else if ((o_wb_cyc)&&(i_wb_err)&&(o_valid)&&(!i_stall_n))
+	// else if ((o_wb_cyc)&&(i_wb_err)&&(o_valid)&&(!i_ready))
 	//	cache_illegal <= 1'b1;
-	else if ((o_valid  && (!i_stall_n || cache_valid))
+	else if ((o_valid  && (!i_ready || cache_valid))
 				&&(o_wb_cyc)&&(i_wb_ack || i_wb_err))
 		cache_illegal <= i_wb_err;
 

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@OR_LOG to OR_LOG
                    UPD HdlOp@@NEG_LOG to NEG_LOG
                        UPD HdlValueId@@i_stall_n to i_ready


CommitId: f0d7095a0f2d1bfa126dd5d8676042be431a617e
Fixed idecode to return phase=0 on illegal fetch, fixes illegal insn behav
--- a/rtl/core/idecode.v
+++ b/rtl/core/idecode.v
@@ -370,7 +370,7 @@ module	idecode(i_clk, i_reset, i_ce, i_stalled,
 				// back to the first
 				r_phase <= 0;
 			else
-				r_phase <= (i_instruction[`CISBIT]);
+				r_phase <= (i_instruction[`CISBIT])&&(!i_illegal);
 		end else if (i_ce)
 			r_phase <= 1'b0;
 

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    INS HdlOp@@AND_LOG to if_false
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: i_illegal

UPD HdlStmAssign@@if_false to if_false
    MOV HdlOp@@INDEX to if_false
    HdlOp: INDEX
        list: ops
            HdlValueId: i_instruction
            HdlValueInt: 31


CommitId: 56a535fd8ada6598e00c3072e79a8e30a76b50d1
ZipCORE: Various always @* fixes to deal with x propagation
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -248,16 +248,17 @@ module	zipcore #(
 	reg		op_valid_div, op_valid_fpu;
 	wire		op_stall;
 	wire	[3:0]	op_opn;
-	reg	[4:0]	op_R;
+	wire	[4:0]	op_R;
 	reg		op_Rcc;
-	reg	[4:0]	op_Aid, op_Bid;
-	reg		op_rA, op_rB;
+	wire	[4:0]	op_Aid, op_Bid;
+	wire		op_rA, op_rB;
 	reg	[31:0]	r_op_Av, r_op_Bv;
-	reg	[(AW+1):0]	op_pc;
+	wire	[AW+1:0]	op_pc;
 	wire	[31:0]	w_op_Av, w_op_Bv, op_Av, op_Bv;
 	reg	[31:0]	w_pcB_v, w_pcA_v;
 	reg	[31:0]	w_op_BnI;
-	reg		op_wR, op_wF;
+	wire		op_wR;
+	reg		op_wF;
 	wire		op_gie;
 	wire	[3:0]	op_Fl;
 	reg	[6:0]	r_op_F;

ParseResult:
INS HdlIdDef@@op_pc to objs
HdlIdDef: op_pc
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@op_wR to objs
HdlIdDef: op_wR
    HdlDirection: INTERNAL

UPD HdlIdDef@@op_wR to r_op_wR

MOV HdlIdDef@@op_wR to objs
HdlIdDef: op_wR
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

UPD HdlIdDef@@op_pc to r_op_pc

MOV HdlIdDef@@op_pc to objs
HdlIdDef: op_pc
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: ADD
                        list: ops
                            HdlValueId: AW
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 56a535fd8ada6598e00c3072e79a8e30a76b50d1
ZipCORE: Various always @* fixes to deal with x propagation
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1235,15 +1246,25 @@ module	zipcore #(
 	generate if ((OPT_PIPELINED)||(OPT_EARLY_BRANCHING))
 	begin : SET_OP_PC
 
-		initial op_pc[0] = 1'b0;
+		reg	[AW+1:0]	r_op_pc;
+
+		initial r_op_pc[0] = 1'b0;
 		always @(posedge i_clk)
-		if (op_ce && (!OPT_LOWPOWER || w_op_valid))
-			op_pc <= (dcd_early_branch)?dcd_branch_pc:dcd_pc;
+		if (op_ce)
+		begin
+			if (dcd_early_branch)
+				// Need to retire an early branch as a NOOP,
+				// to make sure our PC is properly updated
+				r_op_pc <= dcd_branch_pc;
+			else if (!OPT_LOWPOWER || w_op_valid)
+				r_op_pc <= dcd_pc;
+		end
+
+		assign	op_pc = r_op_pc;
 
 	end else begin : SET_OP_PC
 
-		always @(*)
-			op_pc = dcd_pc;
+		assign op_pc = dcd_pc;
 
 	end endgenerate
 	// }}}

ParseResult:
INS HdlStmIf@@ to objs

UPD HdlStmIf@@ to 
    INS HdlStmBlock@@SEQ to 
    INS list@@elifs to 
    INS HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueId: dcd_pc
                HdlValueId: op_pc
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1928,6 +1928,8 @@ module	zipcore #(
 
 	// Sim instructions, alu_sim, alu_sim_immv
 	// {{{
+	wire		cpu_sim;
+
 	generate if (OPT_SIM)
 	begin : ALU_SIM
 		reg		r_alu_sim;

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_SIM to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_USERMODE to 
    INS list@@elifs to 

UPD HdlStmProcess@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: i_reset
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: clear_pipeline
                                                        HdlValueId: adf_ce_unconditional
                                                HdlValueId: set_cond
                                        HdlValueId: op_sim
                                HdlValueId: op_valid_alu
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: wr_write_pc
                                HdlOp: NE
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: wr_reg_id
                                                HdlValueInt: 4
                                        HdlValueId: alu_gie
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: EQ
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 19
                                                            HdlValueInt: 10
                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlValueInt: 8
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $finish
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 0
                                    HdlValueInt: 2ff
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: op_gie
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 0
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 1
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 2
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 3
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 4
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 5
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 6
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 7
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 8
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 9
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 10
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 11
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 12
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 13
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: w_iflags
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: op_gie
                                                                HdlValueId: op_pc
                                                                HdlValueId: ipc
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: op_gie
                                                                HdlValueId: op_pc
                                                                HdlValueId: ipc
                                        list: elifs
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 16
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 17
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 18
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 19
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 20
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 21
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 22
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 23
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 24
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 25
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 26
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 27
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 28
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 29
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: w_uflags
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlValueId: op_gie
                                                    HdlValueId: op_pc
                                                    HdlValueId: upc
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0020
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: op_pc
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlValueId: op_gie
                                                    str
                                                    str
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlValueId: regid
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlValueId: wr_gpreg_vl
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: regset
                                                        HdlValueId: regid
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0021
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: op_pc
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlOp: CONCAT
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlValueId: wr_gpreg_vl
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: regset
                                                        HdlOp: CONCAT
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0023
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlOp: CONCAT
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: wr_gpreg_vl
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlOp: CONCAT
                                                                    list: ops
                                                                        HdlValueInt: 1
                                                                        HdlOp: INDEX
                                                                            list: ops
                                                                                HdlValueId: op_sim_immv
                                                                                HdlOp: DOWNTO
                                                                                    list: ops
                                                                                        HdlValueInt: 3
                                                                                        HdlValueInt: 0
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0022
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlValueId: regid
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: wr_gpreg_vl
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueId: regid
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 8
                                    HdlValueInt: 004
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 7
                                                            HdlValueInt: 0
                            list: elifs
                        HdlStmAssign
                            HdlValueInt: 1
                            HdlValueId: r_alu_sim
                list: elifs
                HdlStmAssign: if_false
                    HdlValueInt: 0
                    HdlValueId: r_alu_sim
            HdlStmIf
                HdlValueId: adf_ce_unconditional
                HdlStmAssign: if_true
                    HdlValueId: op_sim_immv
                    HdlValueId: r_alu_sim_immv
                list: elifs

MOV HdlStmProcess@@ to body
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: i_reset
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: clear_pipeline
                                                        HdlValueId: adf_ce_unconditional
                                                HdlValueId: set_cond
                                        HdlValueId: op_sim
                                HdlValueId: op_valid_alu
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: wr_write_pc
                                HdlOp: NE
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: wr_reg_id
                                                HdlValueInt: 4
                                        HdlValueId: alu_gie
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: EQ
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 19
                                                            HdlValueInt: 10
                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlValueInt: 8
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $finish
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 0
                                    HdlValueInt: 2ff
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: op_gie
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 0
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 1
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 2
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 3
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 4
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 5
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 6
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 7
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 8
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 9
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 10
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 11
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 12
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 13
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: w_iflags
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: op_gie
                                                                HdlValueId: op_pc
                                                                HdlValueId: ipc
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: op_gie
                                                                HdlValueId: op_pc
                                                                HdlValueId: ipc
                                        list: elifs
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 16
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 17
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 18
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 19
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 20
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 21
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 22
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 23
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 24
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 25
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 26
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 27
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 28
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 29
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: w_uflags
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlValueId: op_gie
                                                    HdlValueId: op_pc
                                                    HdlValueId: upc
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0020
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: op_pc
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlValueId: op_gie
                                                    str
                                                    str
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlValueId: regid
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlValueId: wr_gpreg_vl
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: regset
                                                        HdlValueId: regid
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0021
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: op_pc
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlOp: CONCAT
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlValueId: wr_gpreg_vl
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: regset
                                                        HdlOp: CONCAT
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0023
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlOp: CONCAT
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: wr_gpreg_vl
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlOp: CONCAT
                                                                    list: ops
                                                                        HdlValueInt: 1
                                                                        HdlOp: INDEX
                                                                            list: ops
                                                                                HdlValueId: op_sim_immv
                                                                                HdlOp: DOWNTO
                                                                                    list: ops
                                                                                        HdlValueInt: 3
                                                                                        HdlValueInt: 0
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0022
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlValueId: regid
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: wr_gpreg_vl
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueId: regid
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 8
                                    HdlValueInt: 004
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 7
                                                            HdlValueInt: 0
                            list: elifs
                        HdlStmAssign
                            HdlValueInt: 1
                            HdlValueId: r_alu_sim
                list: elifs
                HdlStmAssign: if_false
                    HdlValueInt: 0
                    HdlValueId: r_alu_sim
            HdlStmIf
                HdlValueId: adf_ce_unconditional
                HdlStmAssign: if_true
                    HdlValueId: op_sim_immv
                    HdlValueId: r_alu_sim_immv
                list: elifs

UPD HdlStmIf@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: i_reset
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: clear_pipeline
                                            HdlValueId: adf_ce_unconditional
                                    HdlValueId: set_cond
                            HdlValueId: op_sim
                    HdlValueId: op_valid_alu
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: wr_write_pc
                    HdlOp: NE
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: wr_reg_id
                                    HdlValueInt: 4
                            HdlValueId: alu_gie

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: r_alu_sim
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlOp: AND_LOG
                                                                list: ops
                                                                    HdlOp: AND_LOG
                                                                        list: ops
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: i_reset
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: clear_pipeline
                                                                    HdlValueId: adf_ce_unconditional
                                                            HdlValueId: set_cond
                                                    HdlValueId: op_sim
                                            HdlValueId: op_valid_alu
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlOp: OR_LOG
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: wr_write_pc
                                            HdlOp: NE
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: wr_reg_id
                                                            HdlValueInt: 4
                                                    HdlValueId: alu_gie
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 19
                                                                        HdlValueInt: 10
                                                        HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlValueInt: 8
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $finish
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 0
                                                HdlValueInt: 2ff
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: op_gie
                                                    HdlStmBlock: SEQ
                                                        list: body
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 0
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 1
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 2
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 3
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 4
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 5
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 6
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 7
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 8
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 9
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 10
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 11
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 12
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 13
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlValueId: w_iflags
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: TERNARY
                                                                        list: ops
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: op_gie
                                                                            HdlValueId: op_pc
                                                                            HdlValueId: ipc
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: TERNARY
                                                                        list: ops
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: op_gie
                                                                            HdlValueId: op_pc
                                                                            HdlValueId: ipc
                                                    list: elifs
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 16
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 17
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 18
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 19
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 20
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 21
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 22
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 23
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 24
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 25
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 26
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 27
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 28
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 29
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: w_uflags
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlValueId: op_gie
                                                                HdlValueId: op_pc
                                                                HdlValueId: upc
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 4
                                                HdlValueInt: 0020
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: op_pc
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlValueId: op_gie
                                                                str
                                                                str
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlValueId: wr_reg_id
                                                                    HdlValueId: regid
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlValueId: wr_gpreg_vl
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: regset
                                                                    HdlValueId: regid
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 4
                                                HdlValueInt: 0021
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: op_pc
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlValueId: wr_reg_id
                                                                    HdlOp: CONCAT
                                                                        list: ops
                                                                            HdlValueInt: 1
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: op_sim_immv
                                                                                    HdlOp: DOWNTO
                                                                                        list: ops
                                                                                            HdlValueInt: 3
                                                                                            HdlValueInt: 0
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlValueId: wr_gpreg_vl
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: regset
                                                                    HdlOp: CONCAT
                                                                        list: ops
                                                                            HdlValueInt: 1
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: op_sim_immv
                                                                                    HdlOp: DOWNTO
                                                                                        list: ops
                                                                                            HdlValueInt: 3
                                                                                            HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 4
                                                HdlValueInt: 0023
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlValueId: wr_reg_id
                                                                    HdlOp: CONCAT
                                                                        list: ops
                                                                            HdlValueInt: 1
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: op_sim_immv
                                                                                    HdlOp: DOWNTO
                                                                                        list: ops
                                                                                            HdlValueInt: 3
                                                                                            HdlValueInt: 0
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: wr_gpreg_vl
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlOp: CONCAT
                                                                                list: ops
                                                                                    HdlValueInt: 1
                                                                                    HdlOp: INDEX
                                                                                        list: ops
                                                                                            HdlValueId: op_sim_immv
                                                                                            HdlOp: DOWNTO
                                                                                                list: ops
                                                                                                    HdlValueInt: 3
                                                                                                    HdlValueInt: 0
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 4
                                                HdlValueInt: 0022
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlValueId: wr_reg_id
                                                                    HdlValueId: regid
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: wr_gpreg_vl
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueId: regid
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 8
                                                HdlValueInt: 004
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 7
                                                                        HdlValueInt: 0
                                        list: elifs
                                    HdlStmAssign
                                        HdlValueInt: 1
                                        HdlValueId: r_alu_sim
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: r_alu_sim
                        HdlStmIf
                            HdlValueId: adf_ce_unconditional
                            HdlStmAssign: if_true
                                HdlValueId: op_sim_immv
                                HdlValueId: r_alu_sim_immv
                            list: elifs
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: r_alu_sim
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlOp: AND_LOG
                                                                list: ops
                                                                    HdlOp: AND_LOG
                                                                        list: ops
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: i_reset
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: clear_pipeline
                                                                    HdlValueId: adf_ce_unconditional
                                                            HdlValueId: set_cond
                                                    HdlValueId: op_sim
                                            HdlValueId: op_valid_alu
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlOp: OR_LOG
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: wr_write_pc
                                            HdlOp: NE
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: wr_reg_id
                                                            HdlValueInt: 4
                                                    HdlValueId: alu_gie
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 19
                                                                        HdlValueInt: 10
                                                        HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlValueInt: 8
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $finish
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 0
                                                HdlValueInt: 2ff
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: op_gie
                                                    HdlStmBlock: SEQ
                                                        list: body
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 0
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 1
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 2
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 3
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 4
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 5
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 6
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 7
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 8
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 9
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 10
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 11
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 12
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 13
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlValueId: w_iflags
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlValueId: op_pc
                                                    list: elifs
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 5
                                                HdlValueInt: 0010
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: op_pc
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: wr_reg_id
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regid
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlValueId: wr_gpreg_vl
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: regset
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regid
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 5
                                                HdlValueInt: 0011
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: wr_reg_id
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: op_sim_immv
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: wr_gpreg_vl
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: op_sim_immv
                                                                                    HdlOp: DOWNTO
                                                                                        list: ops
                                                                                            HdlValueInt: 3
                                                                                            HdlValueInt: 0
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 8
                                                HdlValueInt: 004
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 7
                                                                        HdlValueInt: 0
                                        list: elifs
                                    HdlStmAssign
                                        HdlValueInt: 1
                                        HdlValueId: r_alu_sim
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: r_alu_sim
                        HdlStmIf
                            HdlValueId: adf_ce_unconditional
                            HdlStmAssign: if_true
                                HdlValueId: op_sim_immv
                                HdlValueId: r_alu_sim_immv
                            list: elifs
            HdlIdDef: unused_simmv
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: AND_UNARY
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regid
                                        HdlValueInt: 4
                HdlValueId: unused_simmv
    DEL HdlValueId@@OPT_USERMODE from 
    DEL list@@elifs from 

MOV HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: i_reset
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: clear_pipeline
                                            HdlValueId: adf_ce_unconditional
                                    HdlValueId: set_cond
                            HdlValueId: op_sim
                    HdlValueId: op_valid_alu
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: wr_write_pc
                    HdlOp: NE
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: wr_reg_id
                                    HdlValueInt: 4
                            HdlValueId: alu_gie
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: op_sim_immv
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 19
                                                HdlValueInt: 10
                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlValueInt: 8
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $finish
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 0
                        HdlValueInt: 2ff
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: op_gie
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 0
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 1
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 2
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 3
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 4
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 5
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 6
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 7
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 8
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 9
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 10
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 11
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 12
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 13
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: w_iflags
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: op_gie
                                                    HdlValueId: op_pc
                                                    HdlValueId: ipc
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: op_gie
                                                    HdlValueId: op_pc
                                                    HdlValueId: ipc
                            list: elifs
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 16
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 17
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 18
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 19
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 20
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 21
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 22
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 23
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 24
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 25
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 26
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 27
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 28
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 29
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlValueId: w_uflags
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: TERNARY
                                    list: ops
                                        HdlValueId: op_gie
                                        HdlValueId: op_pc
                                        HdlValueId: upc
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 4
                        HdlValueInt: 0020
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlValueId: op_pc
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: TERNARY
                                    list: ops
                                        HdlValueId: op_gie
                                        str
                                        str
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: op_sim_immv
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueInt: 0
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: wr_reg_id
                                            HdlValueId: regid
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $display
                                    str
                                    HdlValueId: wr_gpreg_vl
                            list: elifs
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $display
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: regset
                                            HdlValueId: regid
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 4
                        HdlValueInt: 0021
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlValueId: op_pc
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: op_sim_immv
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueInt: 0
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: wr_reg_id
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueInt: 1
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: op_sim_immv
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 3
                                                                    HdlValueInt: 0
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $display
                                    str
                                    HdlValueId: wr_gpreg_vl
                            list: elifs
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $display
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: regset
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueInt: 1
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: op_sim_immv
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 3
                                                                    HdlValueInt: 0
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 4
                        HdlValueInt: 0023
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: wr_reg_id
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueInt: 1
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: op_sim_immv
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 3
                                                                    HdlValueInt: 0
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $write
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: wr_gpreg_vl
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 7
                                                    HdlValueInt: 0
                            list: elifs
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $write
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 1
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: op_sim_immv
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 3
                                                                            HdlValueInt: 0
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 7
                                                    HdlValueInt: 0
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 4
                        HdlValueInt: 0022
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: wr_reg_id
                                            HdlValueId: regid
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $write
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: wr_gpreg_vl
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 7
                                                    HdlValueInt: 0
                            list: elifs
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $write
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueId: regid
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 7
                                                    HdlValueInt: 0
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 8
                        HdlValueInt: 004
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: op_sim_immv
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 7
                                                HdlValueInt: 0
                list: elifs
            HdlStmAssign
                HdlValueInt: 1
                HdlValueId: r_alu_sim
    list: elifs
    HdlStmAssign: if_false
        HdlValueInt: 0
        HdlValueId: r_alu_sim

UPD HdlStmIf@@ to 
    INS HdlValueId@@cpu_sim to 

UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_SIM from 
    DEL list@@elifs from 


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -1939,14 +1941,16 @@ module	zipcore #(
 		if (OPT_USERMODE)
 		begin
 			// {{{
-			initial	r_alu_sim = 1'b0;
-			always @(posedge i_clk)
-			begin
-				if (!i_reset && !clear_pipeline
+			assign	cpu_sim = !i_reset && !clear_pipeline
 					&& adf_ce_unconditional && set_cond
 					&& op_sim && op_valid_alu
 					&&(!wr_reg_ce || !wr_write_pc
-						|| wr_reg_id[4] != alu_gie))
+						|| wr_reg_id[4] != alu_gie);
+
+			initial	r_alu_sim = 1'b0;
+			always @(posedge i_clk)
+			begin
+				if (cpu_sim)
 				begin
 				// Execute simulation only instructions
 				// {{{

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_SIM to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_USERMODE to 
    INS list@@elifs to 

UPD HdlStmProcess@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: i_reset
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: clear_pipeline
                                                        HdlValueId: adf_ce_unconditional
                                                HdlValueId: set_cond
                                        HdlValueId: op_sim
                                HdlValueId: op_valid_alu
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: wr_write_pc
                                HdlOp: NE
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: wr_reg_id
                                                HdlValueInt: 4
                                        HdlValueId: alu_gie
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: EQ
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 19
                                                            HdlValueInt: 10
                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlValueInt: 8
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $finish
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 0
                                    HdlValueInt: 2ff
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: op_gie
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 0
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 1
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 2
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 3
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 4
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 5
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 6
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 7
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 8
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 9
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 10
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 11
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 12
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 13
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: w_iflags
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: op_gie
                                                                HdlValueId: op_pc
                                                                HdlValueId: ipc
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: op_gie
                                                                HdlValueId: op_pc
                                                                HdlValueId: ipc
                                        list: elifs
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 16
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 17
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 18
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 19
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 20
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 21
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 22
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 23
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 24
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 25
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 26
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 27
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 28
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 29
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: w_uflags
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlValueId: op_gie
                                                    HdlValueId: op_pc
                                                    HdlValueId: upc
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0020
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: op_pc
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlValueId: op_gie
                                                    str
                                                    str
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlValueId: regid
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlValueId: wr_gpreg_vl
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: regset
                                                        HdlValueId: regid
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0021
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: op_pc
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlOp: CONCAT
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlValueId: wr_gpreg_vl
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: regset
                                                        HdlOp: CONCAT
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0023
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlOp: CONCAT
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: wr_gpreg_vl
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlOp: CONCAT
                                                                    list: ops
                                                                        HdlValueInt: 1
                                                                        HdlOp: INDEX
                                                                            list: ops
                                                                                HdlValueId: op_sim_immv
                                                                                HdlOp: DOWNTO
                                                                                    list: ops
                                                                                        HdlValueInt: 3
                                                                                        HdlValueInt: 0
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0022
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlValueId: regid
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: wr_gpreg_vl
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueId: regid
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 8
                                    HdlValueInt: 004
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 7
                                                            HdlValueInt: 0
                            list: elifs
                        HdlStmAssign
                            HdlValueInt: 1
                            HdlValueId: r_alu_sim
                list: elifs
                HdlStmAssign: if_false
                    HdlValueInt: 0
                    HdlValueId: r_alu_sim
            HdlStmIf
                HdlValueId: adf_ce_unconditional
                HdlStmAssign: if_true
                    HdlValueId: op_sim_immv
                    HdlValueId: r_alu_sim_immv
                list: elifs

MOV HdlStmProcess@@ to body
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: i_reset
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: clear_pipeline
                                                        HdlValueId: adf_ce_unconditional
                                                HdlValueId: set_cond
                                        HdlValueId: op_sim
                                HdlValueId: op_valid_alu
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: wr_write_pc
                                HdlOp: NE
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: wr_reg_id
                                                HdlValueInt: 4
                                        HdlValueId: alu_gie
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: EQ
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 19
                                                            HdlValueInt: 10
                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlValueInt: 8
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $finish
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 0
                                    HdlValueInt: 2ff
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: op_gie
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 0
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 1
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 2
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 3
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 4
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 5
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 6
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 7
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 8
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 9
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 10
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 11
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 12
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 13
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: w_iflags
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: op_gie
                                                                HdlValueId: op_pc
                                                                HdlValueId: ipc
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: op_gie
                                                                HdlValueId: op_pc
                                                                HdlValueId: ipc
                                        list: elifs
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 16
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 17
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 18
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 19
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 20
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 21
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 22
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 23
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 24
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 25
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 26
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 27
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 28
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 29
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: w_uflags
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlValueId: op_gie
                                                    HdlValueId: op_pc
                                                    HdlValueId: upc
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0020
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: op_pc
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlValueId: op_gie
                                                    str
                                                    str
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlValueId: regid
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlValueId: wr_gpreg_vl
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: regset
                                                        HdlValueId: regid
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0021
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: op_pc
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlOp: CONCAT
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlValueId: wr_gpreg_vl
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: regset
                                                        HdlOp: CONCAT
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0023
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlOp: CONCAT
                                                            list: ops
                                                                HdlValueInt: 1
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: wr_gpreg_vl
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlOp: CONCAT
                                                                    list: ops
                                                                        HdlValueInt: 1
                                                                        HdlOp: INDEX
                                                                            list: ops
                                                                                HdlValueId: op_sim_immv
                                                                                HdlOp: DOWNTO
                                                                                    list: ops
                                                                                        HdlValueInt: 3
                                                                                        HdlValueInt: 0
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 4
                                    HdlValueInt: 0022
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlValueId: wr_reg_id
                                                        HdlValueId: regid
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: wr_gpreg_vl
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueId: regid
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 8
                                    HdlValueInt: 004
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 7
                                                            HdlValueInt: 0
                            list: elifs
                        HdlStmAssign
                            HdlValueInt: 1
                            HdlValueId: r_alu_sim
                list: elifs
                HdlStmAssign: if_false
                    HdlValueInt: 0
                    HdlValueId: r_alu_sim
            HdlStmIf
                HdlValueId: adf_ce_unconditional
                HdlStmAssign: if_true
                    HdlValueId: op_sim_immv
                    HdlValueId: r_alu_sim_immv
                list: elifs

UPD HdlStmIf@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: i_reset
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: clear_pipeline
                                            HdlValueId: adf_ce_unconditional
                                    HdlValueId: set_cond
                            HdlValueId: op_sim
                    HdlValueId: op_valid_alu
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: wr_write_pc
                    HdlOp: NE
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: wr_reg_id
                                    HdlValueInt: 4
                            HdlValueId: alu_gie

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: r_alu_sim
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlOp: AND_LOG
                                                                list: ops
                                                                    HdlOp: AND_LOG
                                                                        list: ops
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: i_reset
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: clear_pipeline
                                                                    HdlValueId: adf_ce_unconditional
                                                            HdlValueId: set_cond
                                                    HdlValueId: op_sim
                                            HdlValueId: op_valid_alu
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlOp: OR_LOG
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: wr_write_pc
                                            HdlOp: NE
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: wr_reg_id
                                                            HdlValueInt: 4
                                                    HdlValueId: alu_gie
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 19
                                                                        HdlValueInt: 10
                                                        HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlValueInt: 8
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $finish
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 0
                                                HdlValueInt: 2ff
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: op_gie
                                                    HdlStmBlock: SEQ
                                                        list: body
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 0
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 1
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 2
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 3
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 4
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 5
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 6
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 7
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 8
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 9
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 10
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 11
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 12
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 13
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlValueId: w_iflags
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: TERNARY
                                                                        list: ops
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: op_gie
                                                                            HdlValueId: op_pc
                                                                            HdlValueId: ipc
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: TERNARY
                                                                        list: ops
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: op_gie
                                                                            HdlValueId: op_pc
                                                                            HdlValueId: ipc
                                                    list: elifs
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 16
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 17
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 18
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 19
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 20
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 21
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 22
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 23
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 24
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 25
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 26
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 27
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 28
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 29
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: w_uflags
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlValueId: op_gie
                                                                HdlValueId: op_pc
                                                                HdlValueId: upc
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 4
                                                HdlValueInt: 0020
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: op_pc
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlValueId: op_gie
                                                                str
                                                                str
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlValueId: wr_reg_id
                                                                    HdlValueId: regid
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlValueId: wr_gpreg_vl
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: regset
                                                                    HdlValueId: regid
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 4
                                                HdlValueInt: 0021
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: op_pc
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlValueId: wr_reg_id
                                                                    HdlOp: CONCAT
                                                                        list: ops
                                                                            HdlValueInt: 1
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: op_sim_immv
                                                                                    HdlOp: DOWNTO
                                                                                        list: ops
                                                                                            HdlValueInt: 3
                                                                                            HdlValueInt: 0
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlValueId: wr_gpreg_vl
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: regset
                                                                    HdlOp: CONCAT
                                                                        list: ops
                                                                            HdlValueInt: 1
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: op_sim_immv
                                                                                    HdlOp: DOWNTO
                                                                                        list: ops
                                                                                            HdlValueInt: 3
                                                                                            HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 4
                                                HdlValueInt: 0023
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlValueId: wr_reg_id
                                                                    HdlOp: CONCAT
                                                                        list: ops
                                                                            HdlValueInt: 1
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: op_sim_immv
                                                                                    HdlOp: DOWNTO
                                                                                        list: ops
                                                                                            HdlValueInt: 3
                                                                                            HdlValueInt: 0
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: wr_gpreg_vl
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlOp: CONCAT
                                                                                list: ops
                                                                                    HdlValueInt: 1
                                                                                    HdlOp: INDEX
                                                                                        list: ops
                                                                                            HdlValueId: op_sim_immv
                                                                                            HdlOp: DOWNTO
                                                                                                list: ops
                                                                                                    HdlValueInt: 3
                                                                                                    HdlValueInt: 0
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 4
                                                HdlValueInt: 0022
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlValueId: wr_reg_id
                                                                    HdlValueId: regid
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: wr_gpreg_vl
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueId: regid
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 8
                                                HdlValueInt: 004
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 7
                                                                        HdlValueInt: 0
                                        list: elifs
                                    HdlStmAssign
                                        HdlValueInt: 1
                                        HdlValueId: r_alu_sim
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: r_alu_sim
                        HdlStmIf
                            HdlValueId: adf_ce_unconditional
                            HdlStmAssign: if_true
                                HdlValueId: op_sim_immv
                                HdlValueId: r_alu_sim_immv
                            list: elifs
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: r_alu_sim
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlOp: AND_LOG
                                                                list: ops
                                                                    HdlOp: AND_LOG
                                                                        list: ops
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: i_reset
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: clear_pipeline
                                                                    HdlValueId: adf_ce_unconditional
                                                            HdlValueId: set_cond
                                                    HdlValueId: op_sim
                                            HdlValueId: op_valid_alu
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlOp: OR_LOG
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: wr_write_pc
                                            HdlOp: NE
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: wr_reg_id
                                                            HdlValueInt: 4
                                                    HdlValueId: alu_gie
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 19
                                                                        HdlValueInt: 10
                                                        HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlValueInt: 8
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $finish
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 0
                                                HdlValueInt: 2ff
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: op_gie
                                                    HdlStmBlock: SEQ
                                                        list: body
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 0
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 1
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 2
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 3
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 4
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 5
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 6
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 7
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 8
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 9
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 10
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 11
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 12
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 13
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlValueId: w_iflags
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlValueId: op_pc
                                                    list: elifs
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 5
                                                HdlValueInt: 0010
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: op_pc
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: wr_reg_id
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regid
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlValueId: wr_gpreg_vl
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: regset
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regid
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 5
                                                HdlValueInt: 0011
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: wr_reg_id
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: op_sim_immv
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: wr_gpreg_vl
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: op_sim_immv
                                                                                    HdlOp: DOWNTO
                                                                                        list: ops
                                                                                            HdlValueInt: 3
                                                                                            HdlValueInt: 0
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 8
                                                HdlValueInt: 004
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 7
                                                                        HdlValueInt: 0
                                        list: elifs
                                    HdlStmAssign
                                        HdlValueInt: 1
                                        HdlValueId: r_alu_sim
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: r_alu_sim
                        HdlStmIf
                            HdlValueId: adf_ce_unconditional
                            HdlStmAssign: if_true
                                HdlValueId: op_sim_immv
                                HdlValueId: r_alu_sim_immv
                            list: elifs
            HdlIdDef: unused_simmv
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: AND_UNARY
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regid
                                        HdlValueInt: 4
                HdlValueId: unused_simmv
    DEL HdlValueId@@OPT_USERMODE from 
    DEL list@@elifs from 

MOV HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: i_reset
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: clear_pipeline
                                            HdlValueId: adf_ce_unconditional
                                    HdlValueId: set_cond
                            HdlValueId: op_sim
                    HdlValueId: op_valid_alu
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: wr_write_pc
                    HdlOp: NE
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: wr_reg_id
                                    HdlValueInt: 4
                            HdlValueId: alu_gie
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: op_sim_immv
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 19
                                                HdlValueInt: 10
                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlValueInt: 8
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $finish
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 0
                        HdlValueInt: 2ff
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: op_gie
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 0
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 1
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 2
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 3
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 4
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 5
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 6
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 7
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 8
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 9
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 10
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 11
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 12
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 13
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: w_iflags
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: op_gie
                                                    HdlValueId: op_pc
                                                    HdlValueId: ipc
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: TERNARY
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: op_gie
                                                    HdlValueId: op_pc
                                                    HdlValueId: ipc
                            list: elifs
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 16
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 17
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 18
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 19
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 20
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 21
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 22
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 23
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 24
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 25
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 26
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 27
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 28
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regset
                                        HdlValueInt: 29
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlValueId: w_uflags
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: TERNARY
                                    list: ops
                                        HdlValueId: op_gie
                                        HdlValueId: op_pc
                                        HdlValueId: upc
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 4
                        HdlValueInt: 0020
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlValueId: op_pc
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: TERNARY
                                    list: ops
                                        HdlValueId: op_gie
                                        str
                                        str
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: op_sim_immv
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueInt: 0
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: wr_reg_id
                                            HdlValueId: regid
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $display
                                    str
                                    HdlValueId: wr_gpreg_vl
                            list: elifs
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $display
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: regset
                                            HdlValueId: regid
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 4
                        HdlValueInt: 0021
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlValueId: op_pc
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: op_sim_immv
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueInt: 0
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: wr_reg_id
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueInt: 1
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: op_sim_immv
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 3
                                                                    HdlValueInt: 0
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $display
                                    str
                                    HdlValueId: wr_gpreg_vl
                            list: elifs
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $display
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: regset
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueInt: 1
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: op_sim_immv
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 3
                                                                    HdlValueInt: 0
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 4
                        HdlValueInt: 0023
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: wr_reg_id
                                            HdlOp: CONCAT
                                                list: ops
                                                    HdlValueInt: 1
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: op_sim_immv
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 3
                                                                    HdlValueInt: 0
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $write
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: wr_gpreg_vl
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 7
                                                    HdlValueInt: 0
                            list: elifs
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $write
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlOp: CONCAT
                                                        list: ops
                                                            HdlValueInt: 1
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: op_sim_immv
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 3
                                                                            HdlValueInt: 0
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 7
                                                    HdlValueInt: 0
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 4
                        HdlValueInt: 0022
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: wr_reg_id
                                            HdlValueId: regid
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $write
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: wr_gpreg_vl
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 7
                                                    HdlValueInt: 0
                            list: elifs
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $write
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueId: regid
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 7
                                                    HdlValueInt: 0
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 8
                        HdlValueInt: 004
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: op_sim_immv
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 7
                                                HdlValueInt: 0
                list: elifs
            HdlStmAssign
                HdlValueInt: 1
                HdlValueId: r_alu_sim
    list: elifs
    HdlStmAssign: if_false
        HdlValueInt: 0
        HdlValueId: r_alu_sim

UPD HdlStmIf@@ to 
    INS HdlValueId@@cpu_sim to 

UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_SIM from 
    DEL list@@elifs from 


CommitId: 3e0b7b814097a26c46763ee8e2855460957b3c5a
Interactive test benches now work again
--- a/rtl/core/zipcore.v
+++ b/rtl/core/zipcore.v
@@ -2089,14 +2093,16 @@ module	zipcore #(
 			// }}}
 		end else begin
 			// {{{
-			initial	r_alu_sim = 1'b0;
-			always @(posedge i_clk)
-			begin
-				if (!i_reset && !clear_pipeline
+			assign	cpu_sim = !i_reset && !clear_pipeline
 					&& adf_ce_unconditional && set_cond
 					&& op_sim && op_valid_alu
 					&&(!wr_reg_ce || !wr_write_pc
-						|| wr_reg_id[4] != alu_gie))
+						|| wr_reg_id[4] != alu_gie);
+
+			initial	r_alu_sim = 1'b0;
+			always @(posedge i_clk)
+			begin
+				if (cpu_sim)
 				begin
 				// Execute simulation only instructions
 				// {{{

ParseResult:
UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_SIM to 
    INS list@@elifs to 

UPD HdlStmIf@@ to 
    INS HdlValueId@@OPT_USERMODE to 
    INS list@@elifs to 

UPD HdlStmProcess@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: i_reset
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: clear_pipeline
                                                        HdlValueId: adf_ce_unconditional
                                                HdlValueId: set_cond
                                        HdlValueId: op_sim
                                HdlValueId: op_valid_alu
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: wr_write_pc
                                HdlOp: NE
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: wr_reg_id
                                                HdlValueInt: 4
                                        HdlValueId: alu_gie
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: EQ
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 19
                                                            HdlValueInt: 10
                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlValueInt: 8
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $finish
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 0
                                    HdlValueInt: 2ff
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: op_gie
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 0
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 1
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 2
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 3
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 4
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 5
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 6
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 7
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 8
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 9
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 10
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 11
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 12
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 13
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: w_iflags
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: op_pc
                                        list: elifs
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 5
                                    HdlValueInt: 0010
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: op_pc
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: wr_reg_id
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regid
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlValueId: wr_gpreg_vl
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: regset
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regid
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 5
                                    HdlValueInt: 0011
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: wr_reg_id
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: wr_gpreg_vl
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 8
                                    HdlValueInt: 004
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 7
                                                            HdlValueInt: 0
                            list: elifs
                        HdlStmAssign
                            HdlValueInt: 1
                            HdlValueId: r_alu_sim
                list: elifs
                HdlStmAssign: if_false
                    HdlValueInt: 0
                    HdlValueId: r_alu_sim
            HdlStmIf
                HdlValueId: adf_ce_unconditional
                HdlStmAssign: if_true
                    HdlValueId: op_sim_immv
                    HdlValueId: r_alu_sim_immv
                list: elifs

MOV HdlStmProcess@@ to body
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: AND_LOG
                                    list: ops
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: AND_LOG
                                                    list: ops
                                                        HdlOp: AND_LOG
                                                            list: ops
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: i_reset
                                                                HdlOp: NEG_LOG
                                                                    list: ops
                                                                        HdlValueId: clear_pipeline
                                                        HdlValueId: adf_ce_unconditional
                                                HdlValueId: set_cond
                                        HdlValueId: op_sim
                                HdlValueId: op_valid_alu
                        HdlOp: OR_LOG
                            list: ops
                                HdlOp: OR_LOG
                                    list: ops
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: wr_write_pc
                                HdlOp: NE
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: wr_reg_id
                                                HdlValueInt: 4
                                        HdlValueId: alu_gie
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: EQ
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 19
                                                            HdlValueInt: 10
                                            HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlValueInt: 8
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $finish
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 0
                                    HdlValueInt: 2ff
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: NEG_LOG
                                            list: ops
                                                HdlValueId: op_gie
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 0
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 1
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 2
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 3
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 4
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 5
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 6
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 7
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 8
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 9
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 10
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 11
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 12
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 13
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: w_iflags
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: op_pc
                                        list: elifs
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 5
                                    HdlValueInt: 0010
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: op_pc
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: wr_reg_id
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regid
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlValueId: wr_gpreg_vl
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $display
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: regset
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regid
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 5
                                    HdlValueInt: 0011
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlValueId: wr_reg_ce
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: wr_reg_id
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: wr_gpreg_vl
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                                        list: elifs
                                        HdlOp: CALL
                                            list: ops
                                                HdlValueId: $write
                                                str
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlOp: INDEX
                                                                    list: ops
                                                                        HdlValueId: op_sim_immv
                                                                        HdlOp: DOWNTO
                                                                            list: ops
                                                                                HdlValueInt: 3
                                                                                HdlValueInt: 0
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 0
                            list: elifs
                        HdlStmIf
                            HdlOp: EQ
                                list: ops
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: op_sim_immv
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 19
                                                    HdlValueInt: 8
                                    HdlValueInt: 004
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 7
                                                            HdlValueInt: 0
                            list: elifs
                        HdlStmAssign
                            HdlValueInt: 1
                            HdlValueId: r_alu_sim
                list: elifs
                HdlStmAssign: if_false
                    HdlValueInt: 0
                    HdlValueId: r_alu_sim
            HdlStmIf
                HdlValueId: adf_ce_unconditional
                HdlStmAssign: if_true
                    HdlValueId: op_sim_immv
                    HdlValueId: r_alu_sim_immv
                list: elifs

UPD HdlStmIf@@ to 
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: r_alu_sim
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlOp: AND_LOG
                                                                list: ops
                                                                    HdlOp: AND_LOG
                                                                        list: ops
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: i_reset
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: clear_pipeline
                                                                    HdlValueId: adf_ce_unconditional
                                                            HdlValueId: set_cond
                                                    HdlValueId: op_sim
                                            HdlValueId: op_valid_alu
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlOp: OR_LOG
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: wr_write_pc
                                            HdlOp: NE
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: wr_reg_id
                                                            HdlValueInt: 4
                                                    HdlValueId: alu_gie
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 19
                                                                        HdlValueInt: 10
                                                        HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlValueInt: 8
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $finish
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 0
                                                HdlValueInt: 2ff
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: op_gie
                                                    HdlStmBlock: SEQ
                                                        list: body
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 0
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 1
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 2
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 3
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 4
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 5
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 6
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 7
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 8
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 9
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 10
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 11
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 12
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 13
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlValueId: w_iflags
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: TERNARY
                                                                        list: ops
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: op_gie
                                                                            HdlValueId: op_pc
                                                                            HdlValueId: ipc
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: TERNARY
                                                                        list: ops
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: op_gie
                                                                            HdlValueId: op_pc
                                                                            HdlValueId: ipc
                                                    list: elifs
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 16
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 17
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 18
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 19
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 20
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 21
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 22
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 23
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 24
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 25
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 26
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 27
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 28
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: regset
                                                                HdlValueInt: 29
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: w_uflags
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlValueId: op_gie
                                                                HdlValueId: op_pc
                                                                HdlValueId: upc
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 4
                                                HdlValueInt: 0020
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: op_pc
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: TERNARY
                                                            list: ops
                                                                HdlValueId: op_gie
                                                                str
                                                                str
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlValueId: wr_reg_id
                                                                    HdlValueId: regid
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlValueId: wr_gpreg_vl
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: regset
                                                                    HdlValueId: regid
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 4
                                                HdlValueInt: 0021
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: op_pc
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlValueId: wr_reg_id
                                                                    HdlOp: CONCAT
                                                                        list: ops
                                                                            HdlValueInt: 1
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: op_sim_immv
                                                                                    HdlOp: DOWNTO
                                                                                        list: ops
                                                                                            HdlValueInt: 3
                                                                                            HdlValueInt: 0
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlValueId: wr_gpreg_vl
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: regset
                                                                    HdlOp: CONCAT
                                                                        list: ops
                                                                            HdlValueInt: 1
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: op_sim_immv
                                                                                    HdlOp: DOWNTO
                                                                                        list: ops
                                                                                            HdlValueInt: 3
                                                                                            HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 4
                                                HdlValueInt: 0023
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlValueId: wr_reg_id
                                                                    HdlOp: CONCAT
                                                                        list: ops
                                                                            HdlValueInt: 1
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: op_sim_immv
                                                                                    HdlOp: DOWNTO
                                                                                        list: ops
                                                                                            HdlValueInt: 3
                                                                                            HdlValueInt: 0
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: wr_gpreg_vl
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlOp: CONCAT
                                                                                list: ops
                                                                                    HdlValueInt: 1
                                                                                    HdlOp: INDEX
                                                                                        list: ops
                                                                                            HdlValueId: op_sim_immv
                                                                                            HdlOp: DOWNTO
                                                                                                list: ops
                                                                                                    HdlValueInt: 3
                                                                                                    HdlValueInt: 0
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 4
                                                HdlValueInt: 0022
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlValueId: wr_reg_id
                                                                    HdlValueId: regid
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: wr_gpreg_vl
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueId: regid
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 8
                                                HdlValueInt: 004
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 7
                                                                        HdlValueInt: 0
                                        list: elifs
                                    HdlStmAssign
                                        HdlValueInt: 1
                                        HdlValueId: r_alu_sim
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: r_alu_sim
                        HdlStmIf
                            HdlValueId: adf_ce_unconditional
                            HdlStmAssign: if_true
                                HdlValueId: op_sim_immv
                                HdlValueId: r_alu_sim_immv
                            list: elifs
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmProcess
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: ASSIGN
                            list: ops
                                HdlValueId: r_alu_sim
                                HdlValueInt: 0
                        HdlStmWait:
                            list: val
            HdlStmProcess
                list: sensitivity
                    HdlOp: RISING
                        list: ops
                            HdlValueId: i_clk
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlOp: AND_LOG
                                                                list: ops
                                                                    HdlOp: AND_LOG
                                                                        list: ops
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: i_reset
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: clear_pipeline
                                                                    HdlValueId: adf_ce_unconditional
                                                            HdlValueId: set_cond
                                                    HdlValueId: op_sim
                                            HdlValueId: op_valid_alu
                                    HdlOp: OR_LOG
                                        list: ops
                                            HdlOp: OR_LOG
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: wr_write_pc
                                            HdlOp: NE
                                                list: ops
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: wr_reg_id
                                                            HdlValueInt: 4
                                                    HdlValueId: alu_gie
                            HdlStmBlock: SEQ
                                list: body
                                    HdlStmIf
                                        HdlOp: AND_LOG
                                            list: ops
                                                HdlOp: EQ
                                                    list: ops
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 19
                                                                        HdlValueInt: 10
                                                        HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlValueInt: 8
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $finish
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 0
                                                HdlValueInt: 2ff
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: op_gie
                                                    HdlStmBlock: SEQ
                                                        list: body
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 0
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 1
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 2
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 3
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 4
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 5
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 6
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 7
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 8
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 9
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 10
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 11
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 12
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlValueInt: 13
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlValueId: w_iflags
                                                            HdlOp: CALL
                                                                list: ops
                                                                    HdlValueId: $write
                                                                    str
                                                                    HdlValueId: op_pc
                                                    list: elifs
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 5
                                                HdlValueInt: 0010
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlValueId: op_pc
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 3
                                                                        HdlValueInt: 0
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: wr_reg_id
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regid
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlValueId: wr_gpreg_vl
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $display
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: regset
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regid
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 5
                                                HdlValueInt: 0011
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlStmIf
                                                    HdlOp: AND_LOG
                                                        list: ops
                                                            HdlValueId: wr_reg_ce
                                                            HdlOp: EQ
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: wr_reg_id
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: op_sim_immv
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 3
                                                                                    HdlValueInt: 0
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: wr_gpreg_vl
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                                    list: elifs
                                                    HdlOp: CALL
                                                        list: ops
                                                            HdlValueId: $write
                                                            str
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: regset
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: op_sim_immv
                                                                                    HdlOp: DOWNTO
                                                                                        list: ops
                                                                                            HdlValueInt: 3
                                                                                            HdlValueInt: 0
                                                                    HdlOp: DOWNTO
                                                                        list: ops
                                                                            HdlValueInt: 7
                                                                            HdlValueInt: 0
                                        list: elifs
                                    HdlStmIf
                                        HdlOp: EQ
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: op_sim_immv
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 19
                                                                HdlValueInt: 8
                                                HdlValueInt: 004
                                        HdlStmBlock: SEQ
                                            list: body
                                                HdlOp: CALL
                                                    list: ops
                                                        HdlValueId: $write
                                                        str
                                                        HdlOp: INDEX
                                                            list: ops
                                                                HdlValueId: op_sim_immv
                                                                HdlOp: DOWNTO
                                                                    list: ops
                                                                        HdlValueInt: 7
                                                                        HdlValueInt: 0
                                        list: elifs
                                    HdlStmAssign
                                        HdlValueInt: 1
                                        HdlValueId: r_alu_sim
                            list: elifs
                            HdlStmAssign: if_false
                                HdlValueInt: 0
                                HdlValueId: r_alu_sim
                        HdlStmIf
                            HdlValueId: adf_ce_unconditional
                            HdlStmAssign: if_true
                                HdlValueId: op_sim_immv
                                HdlValueId: r_alu_sim_immv
                            list: elifs
            HdlIdDef: unused_simmv
                HdlDirection: INTERNAL
            HdlStmAssign
                HdlOp: AND_UNARY
                    list: ops
                        HdlOp: CONCAT
                            list: ops
                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: regid
                                        HdlValueInt: 4
                HdlValueId: unused_simmv
    DEL HdlValueId@@OPT_USERMODE from 
    DEL list@@elifs from 

UPD HdlStmIf@@ to 
    MOV HdlOp@@AND_LOG to 
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: i_reset
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: clear_pipeline
                                            HdlValueId: adf_ce_unconditional
                                    HdlValueId: set_cond
                            HdlValueId: op_sim
                    HdlValueId: op_valid_alu
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: wr_write_pc
                    HdlOp: NE
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: wr_reg_id
                                    HdlValueInt: 4
                            HdlValueId: alu_gie

MOV HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: AND_LOG
                                list: ops
                                    HdlOp: AND_LOG
                                        list: ops
                                            HdlOp: AND_LOG
                                                list: ops
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: i_reset
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: clear_pipeline
                                            HdlValueId: adf_ce_unconditional
                                    HdlValueId: set_cond
                            HdlValueId: op_sim
                    HdlValueId: op_valid_alu
            HdlOp: OR_LOG
                list: ops
                    HdlOp: OR_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: wr_write_pc
                    HdlOp: NE
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: wr_reg_id
                                    HdlValueInt: 4
                            HdlValueId: alu_gie
    HdlStmBlock: SEQ
        list: body
            HdlStmIf
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: EQ
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: op_sim_immv
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 19
                                                HdlValueInt: 10
                                HdlValueInt: 0
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlValueInt: 8
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $finish
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 0
                        HdlValueInt: 2ff
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: op_gie
                            HdlStmBlock: SEQ
                                list: body
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 0
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 1
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 2
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 3
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 4
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 5
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 6
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 7
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 8
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 9
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 10
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 11
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 12
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlValueInt: 13
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: w_iflags
                                    HdlOp: CALL
                                        list: ops
                                            HdlValueId: $write
                                            str
                                            HdlValueId: op_pc
                            list: elifs
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 5
                        HdlValueInt: 0010
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlValueId: op_pc
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: op_sim_immv
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueInt: 0
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                                    HdlOp: EQ
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: wr_reg_id
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regid
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $display
                                    str
                                    HdlValueId: wr_gpreg_vl
                            list: elifs
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $display
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: regset
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regid
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 5
                        HdlValueInt: 0011
                HdlStmBlock: SEQ
                    list: body
                        HdlStmIf
                            HdlOp: AND_LOG
                                list: ops
                                    HdlValueId: wr_reg_ce
                                    HdlOp: EQ
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: wr_reg_id
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: op_sim_immv
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 3
                                                            HdlValueInt: 0
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $write
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: wr_gpreg_vl
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 7
                                                    HdlValueInt: 0
                            list: elifs
                            HdlOp: CALL
                                list: ops
                                    HdlValueId: $write
                                    str
                                    HdlOp: INDEX
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: regset
                                                    HdlOp: INDEX
                                                        list: ops
                                                            HdlValueId: op_sim_immv
                                                            HdlOp: DOWNTO
                                                                list: ops
                                                                    HdlValueInt: 3
                                                                    HdlValueInt: 0
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 7
                                                    HdlValueInt: 0
                list: elifs
            HdlStmIf
                HdlOp: EQ
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: op_sim_immv
                                HdlOp: DOWNTO
                                    list: ops
                                        HdlValueInt: 19
                                        HdlValueInt: 8
                        HdlValueInt: 004
                HdlStmBlock: SEQ
                    list: body
                        HdlOp: CALL
                            list: ops
                                HdlValueId: $write
                                str
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: op_sim_immv
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 7
                                                HdlValueInt: 0
                list: elifs
            HdlStmAssign
                HdlValueInt: 1
                HdlValueId: r_alu_sim
    list: elifs
    HdlStmAssign: if_false
        HdlValueInt: 0
        HdlValueId: r_alu_sim

UPD HdlStmIf@@ to 
    INS HdlValueId@@cpu_sim to 

UPD HdlStmIf@@ to 
    DEL HdlValueId@@OPT_SIM from 
    DEL list@@elifs from 


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -78,6 +78,7 @@ module	zipbones #(
 		parameter [0:0]	OPT_USERMODE=1,
 		parameter [0:0]	OPT_DBGPORT=1,
 		parameter [0:0]	OPT_TRACE_PORT=1,
+		parameter [0:0]	OPT_PROFILER=0,
 		parameter [0:0]	OPT_LOWPOWER=0,
 `ifdef	VERILATOR
 		parameter [0:0]	OPT_SIM=1'b1,

ParseResult:
INS HdlIdDef@@OPT_PROFILER to params
HdlIdDef: OPT_PROFILER
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 0
                    HdlValueInt: 0
    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 4fbc1c88df536c2ea244c2624f33cc06cc61f3f3
FIX: Step through divide was causing user-hang
--- a/rtl/zipbones.v
+++ b/rtl/zipbones.v
@@ -151,7 +152,11 @@ module	zipbones #(
 		output	wire		o_dbg_ack,
 		output	wire [DW-1:0]	o_dbg_data,
 		// }}}
-		output wire	[31:0]	o_cpu_debug
+		output	wire	[31:0]	o_cpu_debug,
+		//
+		output	wire		o_prof_stb,
+		output wire [ADDRESS_WIDTH-1:0]	o_prof_addr,
+		output	wire	[31:0]	o_prof_ticks
 		// }}}
 	);
 

ParseResult:
INS HdlIdDef@@o_prof_stb to ports
HdlIdDef: o_prof_stb
    HdlDirection: OUT

INS HdlIdDef@@o_prof_addr to ports
HdlIdDef: o_prof_addr
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: ADDRESS_WIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: OUT

INS HdlIdDef@@o_prof_ticks to ports
HdlIdDef: o_prof_ticks
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: OUT


CommitId: b2aa9499168f5ab13262ccd0e9c8a4c33b954714
Fixed the accessed wire set on the case of a lookup reuse
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -354,7 +354,7 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 	reg	[(VAW-1):0]	last_vpage;
 	//
 	wire	[(TBL_SIZE-1):0]	r_tlb_match;
-	reg	[(LGTBL-1):0]		s_tlb_addr;
+	reg	[(LGTBL-1):0]		s_tlb_addr, last_tlb;
 	reg				s_tlb_miss, s_tlb_hit, s_pending;
 	//
 	wire	ro_flag, exe_flag, simple_miss, ro_miss, exe_miss, table_err, cachable;

ParseResult:
INS HdlIdDef@@last_tlb to objs
HdlIdDef: last_tlb
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: LGTBL
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: b2aa9499168f5ab13262ccd0e9c8a4c33b954714
Fixed the accessed wire set on the case of a lookup reuse
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -391,6 +390,16 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 		// Set the context register for the page
 		if (wr_vtable)
 			tlb_flags[wr_tlb_addr] <= i_wbs_data[3:1];
+		if (wr_vtable)
+			tlb_cdata[wr_tlb_addr][(LGLCTX-1):0]
+				<= i_wbs_data[(LGLCTX+4-1):4];
+	end
+
+	initial	tlb_accessed = 0;
+	always @(posedge i_clk)
+	if (i_reset)
+		tlb_accessed <= 0;
+	else begin
 		if (wr_vtable)
 			tlb_accessed[wr_tlb_addr] <= 1'b0;
 		// Otherwise, keep track of the accessed bit if we

ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: tlb_accessed
                HdlValueInt: 0

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS HdlStmBlock@@SEQ to body
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

INS HdlStmAssign@@if_true to body
HdlStmAssign: if_true
    HdlValueInt: 0
    HdlValueId: tlb_accessed

MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: wr_vtable
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlOp: INDEX
            list: ops
                HdlValueId: tlb_accessed
                HdlValueId: wr_tlb_addr
    list: elifs
        tuple
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: kernel_context
                    HdlValueId: pending_page_valid
            HdlStmAssign
                HdlValueInt: 1
                HdlOp: INDEX
                    list: ops
                        HdlValueId: tlb_accessed
                        HdlValueId: s_tlb_addr
        tuple
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: kernel_context
                    HdlValueId: this_page_valid
            HdlStmAssign
                HdlValueInt: 1
                HdlOp: INDEX
                    list: ops
                        HdlValueId: tlb_accessed
                        HdlValueId: s_tlb_addr


CommitId: b2aa9499168f5ab13262ccd0e9c8a4c33b954714
Fixed the accessed wire set on the case of a lookup reuse
--- a/rtl/peripherals/zipmmu.v
+++ b/rtl/peripherals/zipmmu.v
@@ -398,10 +407,7 @@ module zipmmu(i_clk, i_reset, i_wbs_cyc_stb, i_wbs_we, i_wbs_addr,
 		else if ((!kernel_context)&&(pending_page_valid))
 			tlb_accessed[s_tlb_addr] <= 1'b1;
 		else if ((!kernel_context)&&(this_page_valid))
-			tlb_accessed[s_tlb_addr] <= 1'b1;
-		if (wr_vtable)
-			tlb_cdata[wr_tlb_addr][(LGLCTX-1):0]
-				<= i_wbs_data[(LGLCTX+4-1):4];
+			tlb_accessed[last_tlb] <= 1'b1;
 	end
 	generate if (LGHCTX > 0)
 	begin : HCTX

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: i_clk

INS HdlStmIf@@body to 

UPD HdlStmIf@@body to body
    INS HdlValueId@@i_reset to body
    INS list@@elifs to body
    INS HdlStmBlock@@SEQ to body
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ

MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: wr_vtable
    HdlStmAssign: if_true
        HdlValueInt: 0
        HdlOp: INDEX
            list: ops
                HdlValueId: tlb_accessed
                HdlValueId: wr_tlb_addr
    list: elifs
        tuple
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: kernel_context
                    HdlValueId: pending_page_valid
            HdlStmAssign
                HdlValueInt: 1
                HdlOp: INDEX
                    list: ops
                        HdlValueId: tlb_accessed
                        HdlValueId: s_tlb_addr
        tuple
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: kernel_context
                    HdlValueId: this_page_valid
            HdlStmAssign
                HdlValueInt: 1
                HdlOp: INDEX
                    list: ops
                        HdlValueId: tlb_accessed
                        HdlValueId: s_tlb_addr

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@s_tlb_addr to last_tlb


CommitId: a250a34123eab61b731f422839ff6980629565e4
[WIP] ZipCPU now builds w/ ZipCore under Verilator
--- a/rtl/core/pfcache.v
+++ b/rtl/core/pfcache.v
@@ -61,15 +61,11 @@
 //
 `default_nettype	none
 //
-module	pfcache(i_clk, i_reset, i_new_pc, i_clear_cache,
-			// i_early_branch, i_from_addr,
-			i_stall_n, i_pc, o_insn, o_pc, o_valid,
+module	pfcache(i_clk, i_reset,
+		i_new_pc, i_clear_cache, i_ready, i_pc,
+			o_valid, o_illegal, o_insn, o_pc,
 		o_wb_cyc, o_wb_stb, o_wb_we, o_wb_addr, o_wb_data,
-			i_wb_stall, i_wb_ack, i_wb_err, i_wb_data,
-			o_illegal
-`ifdef	NOT_YET_READY
-		, i_mmu_ack, i_mmu_we, i_mmu_paddr
-`endif
+			i_wb_stall, i_wb_ack, i_wb_err, i_wb_data
 `ifdef	FORMAL
 		, f_pc_wb
 `endif

ParseResult:
MOV HdlIdDef@@o_valid to ports
HdlIdDef: o_valid
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: OUT

MOV HdlIdDef@@o_illegal to ports
HdlIdDef: o_illegal
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: OUT

UPD HdlIdDef@@i_stall_n to i_ready


CommitId: 4c8cf57cecc70dc315b3567891583953eb4294d0
Fixed the lock capability for ZipSystem addresses
--- a/rtl/core/pipemem.v
+++ b/rtl/core/pipemem.v
@@ -212,7 +212,7 @@ module	pipemem(i_clk, i_rst, i_pipe_stb, i_lock,
 		always @(posedge i_clk)
 		begin
 			lock_gbl <= (i_lock)&&((r_wb_cyc_gbl)||(lock_gbl));
-			lock_lcl <= (i_lock)&&((r_wb_cyc_lcl)||(lock_gbl));
+			lock_lcl <= (i_lock)&&((r_wb_cyc_lcl)||(lock_lcl));
 		end
 
 		assign	o_wb_cyc_gbl = (r_wb_cyc_gbl)||(lock_gbl);
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlValueId@@lock_gbl to lock_lcl


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -92,13 +93,16 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 	wire	[3:0]	w_cond;
 	wire		w_wF, w_mem, w_sto, w_div, w_fpu;
 	wire		w_wR, w_rA, w_rB, w_wR_n;
+	wire		illegal_shift;
 	wire	[31:0]	iword;
+	// }}}
 
-
+	// iword
+	// {{{
 	generate if (OPT_CIS)
 	begin : SET_IWORD
 
-		assign	iword = ((!i_instruction[`CISBIT])||(i_phase))
+		assign	iword = ((!i_instruction[CISBIT])||(i_phase))
 			? i_instruction
 			: { 1'b1, i_instruction[14:0], i_instruction[15:0] };
 

ParseResult:
INS HdlIdDef@@illegal_shift to objs
HdlIdDef: illegal_shift
    HdlDirection: INTERNAL

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@NEG_LOG to NEG_LOG
                UPD HdlOp@@INDEX to INDEX
                    INS HdlValueId@@CISBIT to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@NEG_LOG to NEG_LOG
                UPD HdlOp@@INDEX to INDEX
                    DEL HdlValueInt@@31 from ops


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -107,24 +111,27 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 		assign	iword = { 1'b0, i_instruction[30:0] };
 
 	end endgenerate
+	// }}}
 
 	reg	[4:0]	w_cis_op;
 
+	// w_cis_op : Get the opcode
+	// {{{
 	generate if (OPT_CIS)
 	begin : GEN_CIS_OP
 
 		always @(*)
-		if (!iword[`CISBIT])
+		if (!iword[CISBIT])
 			w_cis_op = iword[26:22];
 		else case(iword[26:24])
-		3'h0: w_cis_op = 5'h00;
-		3'h1: w_cis_op = 5'h01;
-		3'h2: w_cis_op = 5'h02;
-		3'h3: w_cis_op = 5'h10;
-		3'h4: w_cis_op = 5'h12;
-		3'h5: w_cis_op = 5'h13;
-		3'h6: w_cis_op = 5'h18;
-		3'h7: w_cis_op = 5'h0d;
+		3'h0: w_cis_op = 5'h00;	// ADD
+		3'h1: w_cis_op = 5'h01;	// AND
+		3'h2: w_cis_op = 5'h02;	// SUB
+		3'h3: w_cis_op = 5'h10;	// BREV
+		3'h4: w_cis_op = 5'h12;	// LW
+		3'h5: w_cis_op = 5'h13;	// SW
+		3'h6: w_cis_op = 5'h18;	// LDI
+		3'h7: w_cis_op = 5'h0d;	// MOV
 		endcase
 
 	end else begin : GEN_NOCIS_OP

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlOp@@INDEX to INDEX
            INS HdlValueId@@CISBIT to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@NEG_LOG to NEG_LOG
                UPD HdlOp@@INDEX to INDEX
                    INS HdlValueId@@CISBIT to ops

UPD HdlStmIf@@body to body
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlOp@@INDEX to INDEX
            DEL HdlValueInt@@31 from ops


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -133,8 +140,10 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 			w_cis_op = w_op;
 
 	end endgenerate
+	// }}}
 
 	// Decode instructions
+	// {{{
 	assign	w_op= iword[26:22];
 	assign	w_mov    = (w_cis_op      == 5'h0d);
 	assign	w_ldi    = (w_cis_op[4:1] == 4'hc);

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlOp@@INDEX to INDEX
            INS HdlValueId@@CISBIT to ops


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -213,30 +226,40 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 			||(w_sto)
 			// Test/compares
 			||(w_cmptst);
-	// rB -- do we read a register for operand B?  Specifically, do we
-	// add the registers value to the immediate to create opB?
+	// }}}
+
+	// rB -- do we read a register for operand B?
+	// {{{
+	// Specifically, do we add the registers value to the immediate to
+	// create opB?
 	assign	w_rB     = (w_mov)
-				||((!iword[`CISBIT])&&(iword[`IMMSEL])&&(!w_ldi)&&(!w_special))
-				||(( iword[`CISBIT])&&(iword[`CISIMMSEL])&&(!w_ldi))
+				||((!iword[CISBIT])&&(iword[IMMSEL])&&(!w_ldi)&&(!w_special))
+				||(( iword[CISBIT])&&(iword[CISIMMSEL])&&(!w_ldi))
 				// If using compressed instruction sets,
 				// we *always* read on memory operands.
-				||(( iword[`CISBIT])&&(w_mem));
+				||(( iword[CISBIT])&&(w_mem));
+	// }}}
 
 	// wR -- will we be writing our result back?
+	// {{{
 	// wR_n = !wR
 	// All but STO, NOOP/BREAK/LOCK, and CMP/TST write back to w_dcdR
 	assign	w_wR_n   = (w_sto)
 				||(w_special)
 				||(w_cmptst);
 	assign	w_wR     = !w_wR_n;
+	// }}}
 	//
 	// wF -- do we write flags when we are done?
-	//
+	// {{{
 	assign	w_wF     = (w_cmptst)
 			||((w_cond[3])&&(((w_fpu)&&(OPT_FPU))||(w_div)
 				||((w_ALU)&&(!w_mov)&&(!w_ldilo)&&(!w_brev)
 					&&(w_dcdR[3:1] != 3'h7))));
+	// }}}
 
+	// w_immsrc - where does the immediate value come from
+	// {{{
 	// Bottom 13 bits: no LUT's
 	// w_dcd[12: 0] -- no LUTs
 	// w_dcd[   13] -- 2 LUTs

ParseResult:
INS HdlStmAssign@@ to objs

UPD HdlStmAssign@@ to 
    INS HdlOp@@OR_LOG to 
    INS HdlValueId@@w_rB to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@OR_LOG to ops
        INS HdlOp@@AND_LOG to ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: iword
                        HdlValueId: CISBIT
                HdlValueId: w_mem
        UPD HdlOp@@OR_LOG to OR_LOG
            INS list@@ops to OR_LOG
            INS HdlOp@@OR_LOG to ops
            INS HdlOp@@AND_LOG to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS list@@ops to OR_LOG
                INS HdlValueId@@w_mov to ops
                INS HdlOp@@AND_LOG to ops
                UPD HdlOp@@AND_LOG to AND_LOG
                    INS list@@ops to AND_LOG
                    INS HdlOp@@AND_LOG to ops
                    UPD HdlOp@@AND_LOG to AND_LOG
                        INS list@@ops to AND_LOG
                        INS HdlOp@@AND_LOG to ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: iword
                                                HdlValueId: CISBIT
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: iword
                                        HdlValueId: IMMSEL
            UPD HdlOp@@AND_LOG to AND_LOG
                INS list@@ops to AND_LOG
                INS HdlOp@@AND_LOG to ops
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: iword
                                HdlValueId: CISBIT
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: iword
                                HdlValueId: CISIMMSEL

UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@OR_LOG to OR_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                MOV HdlOp@@NEG_LOG to ops
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: w_ldi
                DEL HdlOp@@AND_LOG from ops
                HdlOp: AND_LOG
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: iword
                                HdlValueInt: 31
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: iword
                                HdlValueInt: 23
                DEL list@@ops from AND_LOG
            UPD HdlOp@@OR_LOG to OR_LOG
                UPD HdlOp@@AND_LOG to AND_LOG
                    MOV HdlOp@@NEG_LOG to ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: w_special
                    UPD HdlOp@@AND_LOG to AND_LOG
                        MOV HdlOp@@NEG_LOG to ops
                        HdlOp: NEG_LOG
                            list: ops
                                HdlValueId: w_ldi
                        DEL HdlOp@@AND_LOG from ops
                        HdlOp: AND_LOG
                            list: ops
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: iword
                                                HdlValueInt: 31
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: iword
                                        HdlValueInt: 18
                        DEL list@@ops from AND_LOG
                    DEL HdlOp@@AND_LOG from ops
                    DEL list@@ops from AND_LOG
                DEL HdlValueId@@w_mov from ops
                DEL HdlOp@@AND_LOG from ops
                DEL list@@ops from OR_LOG
            DEL HdlOp@@OR_LOG from ops
            DEL HdlOp@@AND_LOG from ops
            DEL list@@ops from OR_LOG
        DEL HdlOp@@OR_LOG from ops
        DEL HdlOp@@AND_LOG from ops
        HdlOp: AND_LOG
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: iword
                        HdlValueInt: 31
                HdlValueId: w_mem
        DEL list@@ops from OR_LOG
    DEL HdlOp@@OR_LOG from 
    DEL HdlValueId@@w_rB from 

DEL HdlStmAssign@@ from objs


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -244,25 +267,30 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 	// w_dcd[22:18] : 5 LUTs, 1 delay (assuming high bit is o/w determined)
 	wire	[22:0]	w_I, w_fullI;
 
+	// w_fullI -- extracting the immediate value from the insn word
+	// {{{
 	assign	w_fullI = (w_ldi) ? { iword[22:0] } // LDI
 			// MOVE immediates have one less bit
 			:((w_mov) ?{ {(23-13){iword[12]}}, iword[12:0] }
 			// Normal Op-B immediate ... 18 or 14 bits
-			:((!iword[`IMMSEL]) ? { {(23-18){iword[17]}}, iword[17:0] }
+			:((!iword[IMMSEL]) ? { {(23-18){iword[17]}}, iword[17:0] }
 			: { {(23-14){iword[13]}}, iword[13:0] }
 			));
+	// }}}
 
+	// w_I and w_Iz: Immediate value decoding
+	// {{{
 	generate if (OPT_CIS)
 	begin : GEN_CIS_IMMEDIATE
 		wire	[7:0]	w_halfbits;
-		assign	w_halfbits = iword[`CISIMMSEL:16];
+		assign	w_halfbits = iword[CISIMMSEL:16];
 
 		wire	[7:0]	w_halfI;
 		assign	w_halfI = (iword[26:24]==3'h6) ? w_halfbits[7:0] // 8'b for LDI
 				:(w_halfbits[7])?
 					{ {(6){w_halfbits[2]}}, w_halfbits[1:0]}
 					:{ w_halfbits[6], w_halfbits[6:0] };
-		assign	w_I  = (iword[`CISBIT])
+		assign	w_I  = (iword[CISBIT])
 				? {{(23-8){w_halfI[7]}}, w_halfI }
 				: w_fullI;
 

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@TERNARY to TERNARY
            UPD HdlOp@@TERNARY to TERNARY
                UPD HdlOp@@NEG_LOG to NEG_LOG
                    UPD HdlOp@@INDEX to INDEX
                        INS HdlValueId@@IMMSEL to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@TERNARY to TERNARY
            UPD HdlOp@@TERNARY to TERNARY
                UPD HdlOp@@NEG_LOG to NEG_LOG
                    UPD HdlOp@@INDEX to INDEX
                        DEL HdlValueInt@@18 from ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            DEL HdlValueInt@@23 from ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@INDEX to INDEX
            DEL HdlValueInt@@31 from ops


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -291,11 +354,14 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 			o_illegal = 1'b1;
 
 		if ((!OPT_SIM)&&(w_sim))
-			// Simulation instructions on real hardware should
-			// always cause an illegal instruction error
+		// Simulation instructions on real hardware should
+		// always cause an illegal instruction error
 			o_illegal = 1'b1;
 
-		// There are two (missing) special instructions
+		// There are two (missing) special instructions, after
+		// BREAK, LOCK, SIM, and NOOP.  These are special if their
+		// (unused-result) register is either the PC or CC register.
+		//
 		// These should cause an illegal instruction error
 		if ((w_dcdR[3:1]==3'h7)&&(w_cis_op[4:1]==4'b1101))
 			o_illegal = 1'b1;

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@INDEX to INDEX
            INS HdlValueId@@CISBIT to ops


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -305,13 +371,14 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 		if ((!OPT_LOCK)&&(w_lock))
 			o_illegal = 1'b1;
 	end
+	// }}}
 
 	generate if (OPT_OPIPE)
 	begin
 		// o_prepipe is true if a pipelined memory instruction
 		// might follow this one
 		assign	o_prepipe =
-				((OPT_CIS)||(!i_instruction[`CISBIT]))
+				((OPT_CIS)||(!i_instruction[CISBIT]))
 				&&(o_M)&&(o_rB)
 				&&(o_dcdB[3:1] != 3'h7)
 				&&(o_dcdR[3:1] != 3'h7)

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@AND_LOG to AND_LOG
                UPD HdlOp@@AND_LOG to AND_LOG
                    UPD HdlOp@@AND_LOG to AND_LOG
                        UPD HdlOp@@OR_LOG to OR_LOG
                            UPD HdlOp@@NEG_LOG to NEG_LOG
                                UPD HdlOp@@INDEX to INDEX
                                    DEL HdlValueInt@@31 from ops


CommitId: c4a95a22ac70b76b2bf0484b3acd09979a68afc7
Standardized parameters across wrappers
--- a/bench/formal/f_idecode.v
+++ b/bench/formal/f_idecode.v
@@ -337,6 +404,6 @@ module	f_idecode(i_instruction, i_phase, i_gie,
 	assign	o_rA   = w_rA;
 	assign	o_rB   = w_rB;
 	assign	o_sim      = (OPT_SIM) ? ((w_sim)||(w_noop)) : 1'b0;
-	assign	o_sim_immv = (OPT_SIM) ? iword[22:0] : 0;
+	assign	o_sim_immv = (OPT_SIM && (!OPT_LOWPOWER || o_sim)) ? iword[22:0] : 0;
 
 endmodule
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlValueId@@OPT_SIM to ops
        HdlValueId: OPT_SIM


CommitId: dd63cd47316b4af98de844036f475b0a287f2305
ZipDMA now works in sim for memcpy transactions
--- a/rtl/zipdma/zipdma_s2mm.v
+++ b/rtl/zipdma/zipdma_s2mm.v
@@ -294,14 +294,11 @@ module	zipdma_s2mm #(
 		o_wr_data <= 0;
 		o_wr_sel  <= 0;
 
-		o_busy <= i_request && !o_err && S_VALID && !o_busy;
+		o_busy <= i_request && !o_busy;
 
-		if (o_busy && o_wr_cyc && i_wr_err)
-		begin
-			o_err  <= 1'b1;
+		o_err <= o_wr_cyc && i_wr_err;
+		if (o_wr_cyc && i_wr_err)
 			o_busy <= 1'b0;
-		end else if (i_request && !o_busy)
-			o_err <= 1'b0;
 
 		o_wr_addr <= i_addr[ADDRESS_WIDTH-1:WBLSB];
 		subaddr   <= i_addr[WBLSB-1:0];

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        INS HdlOp@@ADD to ops
        UPD HdlOp@@ADD to ADD
            INS list@@ops to ADD
            INS HdlOp@@TERNARY to ops
            HdlOp: TERNARY
                list: ops
                    HdlValueId: o_wr_stb
                    HdlValueInt: 1
                    HdlValueInt: 0

UPD HdlStmIf@@ to 
    UPD HdlOp@@EQ to EQ
        MOV HdlValueId@@wb_outstanding to ops
        HdlValueId: wb_outstanding


CommitId: bb488fabd5870299b2aaf9f22e7ea3ffc6771c35
AXIDCACHE: Added contract checking, fixed more bugs
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -196,7 +200,6 @@ module	axidcache #(
 	reg			r_dvalid, r_svalid, r_cachable,
 				r_cache_miss, flushing, r_rd_pending,
 				last_tag_valid, w_cache_miss;
-	reg	[1:0]		r_sz;
 	reg	[DW-1:0]	pre_data, shifted_data;
 	reg	[AXILSB+1:0]	req_data;
 

ParseResult:
MOV HdlIdDef@@r_sz to objs
HdlIdDef: r_sz
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlIdDef@@r_sz to suppress_miss


CommitId: bb488fabd5870299b2aaf9f22e7ea3ffc6771c35
AXIDCACHE: Added contract checking, fixed more bugs
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -243,6 +246,8 @@ module	axidcache #(
 	// {{{
 	always @(*)
 	begin
+		misaligned = checklsb(i_op[2:1], i_addr[AXILSB-1:0]);
+		/*
 		mislsb = { 1'b0, i_addr[AXILSB-1:0] };
 		case(i_op[2:1])
 		2'b10:		mislsb = mislsb + 1;

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@mislsb to misaligned
            UPD HdlOp@@CONCAT to CALL
            UPD HdlOp@@CONCAT to CONCAT
                DEL HdlValueInt@@0 from ops
        DEL HdlOp@@ASSIGN from body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: misaligned
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mislsb
                        HdlValueId: AXILSB

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    MOV HdlOp@@INDEX to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    HdlOp: INDEX
        list: ops
            HdlValueId: i_op
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 1
    DEL HdlStmCaseType@@CASE from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    DEL list@@cases from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    list: cases
        tuple
            HdlValueInt: 10
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: mislsb
                    HdlOp: ADD
                        list: ops
                            HdlValueId: mislsb
                            HdlValueInt: 1
        tuple
            HdlValueInt: 11
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: mislsb
                    HdlOp: ADD
                        list: ops
                            HdlValueId: mislsb
                            HdlValueInt: 0
    DEL HdlOp@@ASSIGN from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: mislsb
            HdlOp: ADD
                list: ops
                    HdlValueId: mislsb
                    HdlValueInt: 3

DEL HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  from body


CommitId: bb488fabd5870299b2aaf9f22e7ea3ffc6771c35
AXIDCACHE: Added contract checking, fixed more bugs
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -251,7 +256,24 @@ module	axidcache #(
 		endcase
 
 		misaligned = mislsb[AXILSB];
+		*/
 	end
+
+	function checklsb;
+		input [1:0]	 op;
+		input [AXILSB-1:0] addr;
+
+		reg [AXILSB:0]	mislsbfn;
+
+		mislsbfn = { 1'b0, addr };
+		case(op[1:0])
+		2'b10:		mislsbfn = mislsbfn + 1;
+		2'b11:		mislsbfn = mislsbfn + 0;
+		default:	mislsbfn = mislsbfn + 3;
+		endcase
+
+		checklsb = mislsbfn[AXILSB];
+	endfunction
 	// }}}
 	
 	// Address decoding

ParseResult:
INS HdlFunctionDef@@checklsb to objs
HdlFunctionDef: checklsb
    list: params
        HdlIdDef: op
            HdlOp: PARAMETRIZATION
                list: ops
                    HdlValueId: wire
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 1
                            HdlValueInt: 0
            HdlDirection: IN
        HdlIdDef: addr
            HdlOp: PARAMETRIZATION
                list: ops
                    HdlValueId: wire
                    HdlOp: DOWNTO
                        list: ops
                            HdlOp: SUB
                                list: ops
                                    HdlValueId: AXILSB
                                    HdlValueInt: 1
                            HdlValueInt: 0
            HdlDirection: IN
    list: body
        HdlIdDef: mislsbfn
            HdlOp: PARAMETRIZATION
                list: ops
                    HdlValueId: reg
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueId: AXILSB
                            HdlValueInt: 0
            HdlDirection: INTERNAL
        HdlOp: ASSIGN
            list: ops
                HdlValueId: mislsbfn
                HdlOp: CONCAT
                    list: ops
                        HdlValueInt: 0
                        HdlValueId: addr
        HdlStmCase: {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops':}]} 
            HdlStmCaseType: CASE
            HdlOp: INDEX
                list: ops
                    HdlValueId: op
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 1
                            HdlValueInt: 0
            list: cases
                tuple
                    HdlValueInt: 10
                    HdlOp: ASSIGN
                        list: ops
                            HdlValueId: mislsbfn
                            HdlOp: ADD
                                list: ops
                                    HdlValueId: mislsbfn
                                    HdlValueInt: 1
                tuple
                    HdlValueInt: 11
                    HdlOp: ASSIGN
                        list: ops
                            HdlValueId: mislsbfn
                            HdlOp: ADD
                                list: ops
                                    HdlValueId: mislsbfn
                                    HdlValueInt: 0
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: mislsbfn
                    HdlOp: ADD
                        list: ops
                            HdlValueId: mislsbfn
                            HdlValueInt: 3
        HdlOp: ASSIGN
            list: ops
                HdlValueId: checklsb
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mislsbfn
                        HdlValueId: AXILSB

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@mislsb to misaligned
            UPD HdlOp@@CONCAT to CALL
            UPD HdlOp@@CONCAT to CONCAT
                DEL HdlValueInt@@0 from ops
        DEL HdlOp@@ASSIGN from body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: misaligned
                HdlOp: INDEX
                    list: ops
                        HdlValueId: mislsb
                        HdlValueId: AXILSB

UPD HdlStmProcess@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@CALL to CALL
                INS HdlValueId@@checklsb to ops

UPD HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    MOV HdlOp@@INDEX to {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    HdlOp: INDEX
        list: ops
            HdlValueId: i_op
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 1
    DEL HdlStmCaseType@@CASE from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    DEL list@@cases from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    list: cases
        tuple
            HdlValueInt: 10
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: mislsb
                    HdlOp: ADD
                        list: ops
                            HdlValueId: mislsb
                            HdlValueInt: 1
        tuple
            HdlValueInt: 11
            HdlOp: ASSIGN
                list: ops
                    HdlValueId: mislsb
                    HdlOp: ADD
                        list: ops
                            HdlValueId: mislsb
                            HdlValueInt: 0
    DEL HdlOp@@ASSIGN from {'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]} 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: mislsb
            HdlOp: ADD
                list: ops
                    HdlValueId: mislsb
                    HdlValueInt: 3

DEL HdlStmCase@@{'__class__': 'HdlOp',  'fn': 'INDEX',  'ops': ['i_op',          {'__class__': 'HdlOp',           'fn': 'DOWNTO',           'ops': [{'__class__': 'HdlValueInt', 'base': 10, 'val': '2'},                   {'__class__': 'HdlValueInt', 'base': 10, 'val': '1'}]}]}  from body


CommitId: bb488fabd5870299b2aaf9f22e7ea3ffc6771c35
AXIDCACHE: Added contract checking, fixed more bugs
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -266,16 +288,17 @@ module	axidcache #(
 	assign	r_ctag  = r_addr[AW-AXILSB-1 : CS];	// Associated tag
 
 	assign	cache_miss_inow = (!last_tag_valid
-			|| last_tag != i_ctag);
+			|| last_tag != i_ctag
+			|| last_tag_line != i_cline);
 	// }}}
 
 	// Cache lookup
 	// {{{
 	always @(posedge S_AXI_ACLK)
-		r_check <= (i_pipe_stb && !o_pipe_stalled);
+		r_check <= i_pipe_stb;
 
 	always @(posedge S_AXI_ACLK)
-	if (i_pipe_stb && !o_pipe_stalled)
+	if (i_pipe_stb)
 		r_itag  <= cache_tag[i_cline];
 
 	always @(posedge S_AXI_ACLK)

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: S_AXI_ACLK

INS HdlStmAssign@@body to 
HdlStmAssign: body
    HdlValueId: i_pipe_stb
    HdlValueId: r_check

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@i_pipe_stb to ops
        HdlValueId: i_pipe_stb
        DEL HdlOp@@NEG_LOG from ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: o_pipe_stalled
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from body

UPD HdlStmAssign@@ to 
    MOV HdlOp@@OR_LOG to 
    HdlOp: OR_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: last_tag_valid
            HdlOp: NE
                list: ops
                    HdlValueId: last_tag
                    HdlValueId: i_ctag

DEL HdlStmAssign@@body from 
HdlStmAssign: body
    HdlOp: AND_LOG
        list: ops
            HdlValueId: i_pipe_stb
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_pipe_stalled
    HdlValueId: r_check

DEL HdlStmProcess@@ from objs


CommitId: bb488fabd5870299b2aaf9f22e7ea3ffc6771c35
AXIDCACHE: Added contract checking, fixed more bugs
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -283,7 +306,7 @@ module	axidcache #(
 		r_rtag  <= cache_tag[r_cline];
 
 	always @(posedge S_AXI_ACLK)
-	if (i_pipe_stb && !o_pipe_stalled)
+	if (i_pipe_stb)
 		r_iv  <= cache_valid[i_cline];
 
 	always @(posedge S_AXI_ACLK)

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@OR_LOG to 
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@NE to ops
        HdlOp: NE
            list: ops
                HdlValueId: last_tag_line
                HdlValueId: i_cline

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlValueId@@i_pipe_stb to ops
        HdlValueId: i_pipe_stb
        MOV HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: o_pipe_stalled
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from body


CommitId: bb488fabd5870299b2aaf9f22e7ea3ffc6771c35
AXIDCACHE: Added contract checking, fixed more bugs
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -308,7 +331,7 @@ module	axidcache #(
 			&& !misaligned
 			&& !cache_miss_inow && (wcache_strb == 0));
 
-		if (!o_pipe_stalled && !r_rd_pending)
+		if (!o_pipe_stalled)
 			r_addr <= i_addr[AW-1:AXILSB];
 
 		if (!o_pipe_stalled && !r_rd_pending)

ParseResult:
UPD HdlStmIf@@ to 
    DEL HdlOp@@AND_LOG from 
    HdlOp: AND_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: o_pipe_stalled
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: r_rd_pending


CommitId: bb488fabd5870299b2aaf9f22e7ea3ffc6771c35
AXIDCACHE: Added contract checking, fixed more bugs
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -318,7 +341,6 @@ module	axidcache #(
 					&& address_is_cachable
 					&& !misaligned
 					&& (cache_miss_inow || (|wcache_strb)));
-			r_sz <= i_op[2:1];
 		end else if (r_rd_pending)
 		begin
 			r_rd_pending <= (w_tag != r_ctag || !w_v);

ParseResult:
DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: i_op
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 1
    HdlValueId: r_sz


CommitId: bb488fabd5870299b2aaf9f22e7ea3ffc6771c35
AXIDCACHE: Added contract checking, fixed more bugs
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -447,7 +469,7 @@ module	axidcache #(
 			if (M_AXI_RVALID && M_AXI_RLAST)
 			begin
 				state <= DC_IDLE;
-				set_vflag <= !M_AXI_RRESP[1] && good_cache_read;
+				set_vflag <= !i_cpu_reset && !i_clear && !flushing && !M_AXI_RRESP[1] && good_cache_read;
 			end end
 			// }}}
 		DC_READS: begin

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: M_AXI_RRESP
                        HdlValueInt: 1


CommitId: bb488fabd5870299b2aaf9f22e7ea3ffc6771c35
AXIDCACHE: Added contract checking, fixed more bugs
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -464,7 +486,7 @@ module	axidcache #(
 			// }}}
 		endcase
 
-		if (i_clear)
+		if (i_clear || i_cpu_reset)
 			cache_valid <= 0;
 		// }}}
 	end

ParseResult:
UPD HdlStmIf@@ to 
    MOV HdlValueId@@i_clear to 
    HdlValueId: i_clear


CommitId: bb488fabd5870299b2aaf9f22e7ea3ffc6771c35
AXIDCACHE: Added contract checking, fixed more bugs
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -472,11 +494,11 @@ module	axidcache #(
 
 	// M_AXI_ARVALID, axi_arvalid
 	// {{{
-	reg	[2:0]	suppress_miss;
+	reg	[1:0]	suppress_miss;
 	always @(posedge S_AXI_ACLK)
-		suppress_miss <= { suppress_miss[0] || set_vflag, suppress_miss[0], set_vflag };
+		suppress_miss <= { suppress_miss[0] || set_vflag, set_vflag };
 	always @(*)
-		w_cache_miss = r_cache_miss && state == DC_IDLE && !r_dvalid && !o_err && wcache_strb == 0 && !suppress_miss[2];
+		w_cache_miss = r_cache_miss && state == DC_IDLE && !r_dvalid && !o_err && wcache_strb == 0 && !suppress_miss[1];
 
 	initial	axi_arvalid = 0;
 	always @(posedge S_AXI_ACLK)

ParseResult:
UPD HdlStmAssign@@body to body
    UPD HdlOp@@CONCAT to CONCAT
        MOV HdlOp@@CONCAT to ops
        HdlOp: CONCAT
            list: ops
                HdlOp: OR_LOG
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: suppress_miss
                                HdlValueInt: 0
                        HdlValueId: set_vflag
                HdlOp: INDEX
                    list: ops
                        HdlValueId: suppress_miss
                        HdlValueInt: 0
        UPD HdlOp@@CONCAT to CONCAT
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@suppress_miss to set_vflag
                MOV HdlValueId@@suppress_miss to ops
                HdlValueId: suppress_miss
                DEL HdlValueInt@@0 from ops
                DEL list@@ops from INDEX
            DEL HdlOp@@INDEX from ops
        DEL HdlValueId@@set_vflag from ops
        DEL list@@ops from CONCAT
    DEL HdlOp@@CONCAT from body

UPD HdlStmProcess@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlOp@@NEG_LOG to NEG_LOG
                UPD HdlOp@@INDEX to INDEX
                    UPD HdlValueInt@@2 to 1

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS HdlOp@@AND_LOG to ops
        UPD HdlOp@@AND_LOG to AND_LOG
            INS list@@ops to AND_LOG
            INS HdlOp@@AND_LOG to ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: AND_LOG
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_cpu_reset
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: i_clear
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: flushing

DEL HdlIdDef@@suppress_miss from objs
HdlIdDef: suppress_miss
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: bb488fabd5870299b2aaf9f22e7ea3ffc6771c35
AXIDCACHE: Added contract checking, fixed more bugs
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -664,18 +686,23 @@ module	axidcache #(
 
 	// Writes take a clock to go to the cache
 	// {{{
+	reg	[CS-1:0]	read_addr;
+
 	always @(posedge S_AXI_ACLK)
 	begin
 		wcache_strb <= 0;
 
+		if (i_pipe_stb)
+			read_addr <= { i_addr[LGCACHELEN-1:AXILSB+LS], {(LS){1'b0}} };
 		if (state == DC_READC)
 		begin
 			// {{{
 			// Write returning read data to the cache
 			if (M_AXI_RVALID)
-				wcache_addr[LS-1:0]
-					<= wcache_addr[LS-1:0] + 1;
-			wcache_addr[CS-1:LS] <= r_cline;
+				read_addr[LS-1:0]
+					<= read_addr[LS-1:0] + 1;
+			read_addr[CS-1:LS] <= r_cline;
+			wcache_addr <= read_addr;
 			wcache_data <= M_AXI_RDATA;
 			wcache_strb <= -1;
 			if (!M_AXI_RVALID || flushing || i_cpu_reset

ParseResult:
INS HdlIdDef@@read_addr to objs
HdlIdDef: read_addr
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: CS
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmIf@@ to body
HdlStmIf
    HdlValueId: i_pipe_stb
    HdlStmAssign: if_true
        HdlOp: CONCAT
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: i_addr
                        HdlOp: DOWNTO
                            list: ops
                                HdlOp: SUB
                                    list: ops
                                        HdlValueId: LGCACHELEN
                                        HdlValueInt: 1
                                HdlOp: ADD
                                    list: ops
                                        HdlValueId: AXILSB
                                        HdlValueId: LS
                HdlOp: REPL_CONCAT
                    list: ops
                        HdlValueId: LS
                        HdlValueInt: 0
        HdlValueId: read_addr
    list: elifs

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: read_addr
    HdlValueId: wcache_addr

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@wcache_addr to read_addr

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@INDEX to INDEX
        UPD HdlValueId@@wcache_addr to read_addr
    UPD HdlOp@@ADD to ADD
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@wcache_addr to read_addr


CommitId: bb488fabd5870299b2aaf9f22e7ea3ffc6771c35
AXIDCACHE: Added contract checking, fixed more bugs
--- a/rtl/core/axidcache.v
+++ b/rtl/core/axidcache.v
@@ -729,7 +756,7 @@ module	axidcache #(
 	// Actually write to the cache
 	// {{{
 	always @(posedge S_AXI_ACLK)
-	if (state != DC_WRITE || (w_v && wcache_tag == r_ctag))
+	if (state != DC_WRITE || (r_iv && wcache_tag == r_itag))
 	begin
 		for(ik=0; ik<DW/8; ik=ik+1)
 		if (wcache_strb[ik])

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@w_v to r_iv
            UPD HdlOp@@EQ to EQ
                UPD HdlValueId@@r_ctag to r_itag


