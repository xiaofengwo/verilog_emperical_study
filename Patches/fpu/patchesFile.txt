CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -35,11 +35,12 @@
 
 `timescale 1ns / 100ps
 
-module post_norm( clk, fpu_op, sign, rmode, fract_in, exp_in, exp_ovf,
+module post_norm( clk, fpu_op, opas, sign, rmode, fract_in, exp_in, exp_ovf,
 		opa_dn, opb_dn, rem_00, div_opa_ldz, output_zero, out,
-		ine, overflow, underflow);
+		ine, overflow, underflow, f2i_out_sign);
 input		clk;
 input	[2:0]	fpu_op;
+input		opas;
 input		sign;
 input	[1:0]	rmode;
 input	[47:0]	fract_in;

ParseResult:
INS HdlIdDef@@opas to ports
HdlIdDef: opas
    HdlDirection: IN

INS HdlIdDef@@f2i_out_sign to ports
HdlIdDef: f2i_out_sign
    HdlDirection: OUT


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -72,6 +74,8 @@ reg	[7:0]	exp_out_rnd;
 wire		op_dn = opa_dn | opb_dn;
 wire		op_mul = fpu_op[2:0]==3'b010;
 wire		op_div = fpu_op[2:0]==3'b011;
+wire		op_i2f = fpu_op[2:0]==3'b100;
+wire		op_f2i = fpu_op[2:0]==3'b101;
 reg	[5:0]	fi_ldz;
 
 wire		g, r, s;

ParseResult:
INS HdlIdDef@@op_i2f to objs
HdlIdDef: op_i2f
    HdlOp: EQ
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: fpu_op
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 2
                            HdlValueInt: 0
            HdlValueInt: 100
    HdlDirection: INTERNAL

INS HdlIdDef@@op_f2i to objs
HdlIdDef: op_f2i
    HdlOp: EQ
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: fpu_op
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 2
                            HdlValueInt: 0
            HdlValueInt: 101
    HdlDirection: INTERNAL


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -121,6 +125,15 @@ wire		exp_zero;
 wire	[6:0]	ldz_all;
 wire	[7:0]	ldz_dif;
 
+wire	[8:0]	div_scht1a;
+wire	[7:0]	f2i_shft;
+wire	[55:0]	exp_f2i_1;
+wire		f2i_zero, f2i_max;
+wire	[7:0]	f2i_emin;
+wire	[7:0]	conv_shft;
+wire	[7:0]	exp_i2f, exp_f2i, conv_exp;
+wire		round2_f2i;
+
 ////////////////////////////////////////////////////////////////////////
 //
 // Normalize and Round Logic

ParseResult:
INS HdlIdDef@@f2i_shft to objs
HdlIdDef: f2i_shft
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@exp_f2i_1 to objs
HdlIdDef: exp_f2i_1
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 55
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@f2i_zero to objs
HdlIdDef: f2i_zero
    HdlDirection: INTERNAL

INS HdlIdDef@@f2i_max to objs
HdlIdDef: f2i_max
    HdlDirection: INTERNAL

INS HdlIdDef@@f2i_emin to objs
HdlIdDef: f2i_emin
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@conv_shft to objs
HdlIdDef: conv_shft
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@exp_i2f to objs
HdlIdDef: exp_i2f
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@exp_f2i to objs
HdlIdDef: exp_f2i
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@conv_exp to objs
HdlIdDef: conv_exp
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@round2_f2i to objs
HdlIdDef: round2_f2i
    HdlDirection: INTERNAL


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -210,13 +222,18 @@ assign rmode_11 = (rmode==2'b11);
 // Fasu Output will be denormalized ...
 assign dn = !op_mul & !op_div & (exp_in_00 | (exp_next_mi[8] & !fract_in[47]) );
 
-
 // ---------------------------------------------------------------------
 // Fraction Normalization
-wire	[8:0]	div_scht1a;
+parameter	f2i_emax = 8'h9d;
 
+// Incremented fraction for rounding
 assign fract_out_pl1 = fract_out + 1;
 
+// Special Signals for f2i
+assign f2i_emin = rmode_00 ? 8'h7e : 8'h7f;
+assign f2i_zero = (!opas & (exp_in<f2i_emin)) | (opas & (exp_in>f2i_emax)) | (opas & (exp_in<f2i_emin) & (fract_in_00 | !rmode_11));
+assign f2i_max = (!opas & (exp_in>f2i_emax)) | (opas & (exp_in<f2i_emin) & !fract_in_00 & rmode_11);
+
 // Claculate various shifting options
 
 assign {shft_co,shftr_mul} = (!exp_ovf[1] & exp_in_00) ? {1'b0, exp_out} : exp_in_mi1 ;

ParseResult:
MOV HdlIdDef@@div_scht1a to objs
HdlIdDef: div_scht1a
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 8
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlValueId: rmode_00
            HdlValueInt: 7e
            HdlValueInt: 7f
    HdlValueId: f2i_emin

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: OR
        list: ops
            HdlOp: OR
                list: ops
                    HdlOp: AND
                        list: ops
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: opas
                            HdlOp: LT
                                list: ops
                                    HdlValueId: exp_in
                                    HdlValueId: f2i_emin
                    HdlOp: AND
                        list: ops
                            HdlValueId: opas
                            HdlOp: GT
                                list: ops
                                    HdlValueId: exp_in
                                    HdlValueId: f2i_emax
            HdlOp: AND
                list: ops
                    HdlOp: AND
                        list: ops
                            HdlValueId: opas
                            HdlOp: LT
                                list: ops
                                    HdlValueId: exp_in
                                    HdlValueId: f2i_emin
                    HdlOp: OR
                        list: ops
                            HdlValueId: fract_in_00
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: rmode_11
    HdlValueId: f2i_zero

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: OR
        list: ops
            HdlOp: AND
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: opas
                    HdlOp: GT
                        list: ops
                            HdlValueId: exp_in
                            HdlValueId: f2i_emax
            HdlOp: AND
                list: ops
                    HdlOp: AND
                        list: ops
                            HdlOp: AND
                                list: ops
                                    HdlValueId: opas
                                    HdlOp: LT
                                        list: ops
                                            HdlValueId: exp_in
                                            HdlValueId: f2i_emin
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: fract_in_00
                    HdlValueId: rmode_11
    HdlValueId: f2i_max

INS HdlIdDef@@f2i_emax to params
HdlIdDef: f2i_emax
    HdlValueInt: 9d
    HdlDirection: INTERNAL


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -230,6 +247,7 @@ assign div_shft4  = div_opa_ldz-exp_in;
 assign div_dn    = op_dn & div_shft1_co;
 assign div_nr    = op_dn & exp_ovf[1]  & !(|fract_in[46:23]) & (div_shft3>8'h16);
 
+assign f2i_shft  = exp_in-8'h7d;
 
 // Select shifting direction
 assign left_right = op_div ? lr_div : op_mul ? lr_mul : 1;

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: SUB
        list: ops
            HdlValueId: exp_in
            HdlValueInt: 7d
    HdlValueId: f2i_shft


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -250,7 +267,10 @@ assign lr_mul = 	(shft_co | (!exp_ovf[1] & exp_in_00) |
 // Select Left and Right shift value
 assign fasu_shift  = (dn | exp_out_00) ? (exp_in_00 ? 8'h2 : exp_in_pl1[7:0]) : {2'h0, fi_ldz};
 assign shift_right = op_div ? shftr_div : shftr_mul;
-assign shift_left  = op_div ? shftl_div : op_mul ? shftl_mul : fasu_shift;
+
+assign conv_shft = op_f2i ? f2i_shft : {2'h0, fi_ldz};
+
+assign shift_left  = op_div ? shftl_div : op_mul ? shftl_mul : (op_f2i | op_i2f) ? conv_shft : fasu_shift;
 
 assign shftl_mul = 	(shft_co |
 			(!exp_ovf[1] & exp_in_00) |

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlValueId: op_f2i
            HdlValueId: f2i_shft
            HdlOp: CONCAT
                list: ops
                    HdlValueInt: 0
                    HdlValueId: fi_ldz
    HdlValueId: conv_shft

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlValueId: op_div
            HdlValueId: shftl_div
            HdlOp: TERNARY
                list: ops
                    HdlValueId: op_mul
                    HdlValueId: shftl_mul
                    HdlOp: TERNARY
                        list: ops
                            HdlOp: OR
                                list: ops
                                    HdlValueId: op_f2i
                                    HdlValueId: op_i2f
                            HdlValueId: conv_shft
                            HdlValueId: fasu_shift
    HdlValueId: shift_left

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlValueId: op_div
            HdlValueId: shftl_div
            HdlOp: TERNARY
                list: ops
                    HdlValueId: op_mul
                    HdlValueId: shftl_mul
                    HdlValueId: fasu_shift
    HdlValueId: shift_left


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -259,19 +279,16 @@ assign shftl_mul = 	(shft_co |
 assign shftl_div = 	( op_dn & exp_out_00 & !(!exp_ovf[1] & exp_ovf[0]))	? div_shft1[7:0] :
 			(!op_dn & exp_out_00 & !exp_ovf[1])    			? exp_in[7:0] :
 			                                        		 {2'h0, fi_ldz};
-
 assign shftr_div = 	(op_dn & exp_ovf[1])                   ? div_shft3 :
 			(op_dn & div_shft1_co)                 ? div_shft4 :
 								 div_shft2;
 // Do the actual shifting
-assign fract_in_shftr   = (|shift_right[7:6]) ? 0 : fract_in>>shift_right[5:0];
-assign fract_in_shftl   = (|shift_left[7:6] ) ? 0 : fract_in<<shift_left[5:0];
-
+assign fract_in_shftr   = (|shift_right[7:6])                      ? 0 : fract_in>>shift_right[5:0];
+assign fract_in_shftl   = (|shift_left[7:6] | (f2i_zero & op_f2i)) ? 0 : fract_in<<shift_left[5:0];
 
 // Chose final fraction output
 assign {fract_out,fract_trunc} = left_right ? fract_in_shftl : fract_in_shftr;
 
-
 // ---------------------------------------------------------------------
 // Exponent Normalization
 

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlOp@@OR_UNARY to ops
        HdlOp: OR_UNARY
            list: ops
                HdlOp: INDEX
                    list: ops
                        HdlValueId: shift_left
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 6


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -284,18 +301,30 @@ assign exp_in_mi1    = exp_in  - 1;	// 9 bits - includes carry out
 assign exp_out1_mi1  = exp_out1 - 1;
 
 assign exp_next_mi  = exp_in_pl1 - fi_ldz_mi1;	// 9 bits - includes carry out
+
 assign exp_fix_diva = exp_in - fi_ldz_mi22;
 assign exp_fix_divb = exp_in - fi_ldz_mi1;
 
 assign exp_zero  = (exp_ovf[1] & !exp_ovf[0] & op_mul & (!exp_rnd_adj2a | !rmode[1])) | (op_mul & exp_out1_co);
 assign {exp_out1_co, exp_out1} = fract_in[47] ? exp_in_pl1 : exp_next_mi;
-assign exp_out = op_div ? exp_div : exp_zero ? 8'h0 : dn ? {6'h0, fract_in[47:46]} : exp_out1;
+
+assign f2i_out_sign =  !opas ? ((exp_in<f2i_emin) ? 0 : (exp_in>f2i_emax) ? 0 : opas) :
+			       ((exp_in<f2i_emin) ? 0 : (exp_in>f2i_emax) ? 1 : opas);
+
+assign exp_i2f   = fract_in_00 ? (opas ? 8'h9e : 0) : (8'h9e-fi_ldz);
+assign exp_f2i_1 = {{8{fract_in[47]}}, fract_in }<<f2i_shft;
+assign exp_f2i   = f2i_zero ? 0 : f2i_max ? 8'hff : exp_f2i_1[55:48];
+assign conv_exp  = op_f2i ? exp_f2i : exp_i2f;
+
+assign exp_out = op_div ? exp_div : (op_f2i | op_i2f) ? conv_exp : exp_zero ? 8'h0 : dn ? {6'h0, fract_in[47:46]} : exp_out1;
 
 assign ldz_all   = div_opa_ldz + fi_ldz;
 assign ldz_dif   = fi_ldz_2 - div_opa_ldz;
 assign fi_ldz_2a = 6'd23 - fi_ldz;
 assign fi_ldz_2  = {fi_ldz_2a[6], fi_ldz_2a[6:0]};
+
 assign div_exp1  = exp_in_mi1 + fi_ldz_2;	// 9 bits - includes carry out
+
 assign div_exp2  = exp_in_pl1 - ldz_all;
 assign div_exp3  = exp_in + ldz_dif;
 

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: opas
            HdlOp: TERNARY
                list: ops
                    HdlOp: LT
                        list: ops
                            HdlValueId: exp_in
                            HdlValueId: f2i_emin
                    HdlValueInt: 0
                    HdlOp: TERNARY
                        list: ops
                            HdlOp: GT
                                list: ops
                                    HdlValueId: exp_in
                                    HdlValueId: f2i_emax
                            HdlValueInt: 0
                            HdlValueId: opas
            HdlOp: TERNARY
                list: ops
                    HdlOp: LT
                        list: ops
                            HdlValueId: exp_in
                            HdlValueId: f2i_emin
                    HdlValueInt: 0
                    HdlOp: TERNARY
                        list: ops
                            HdlOp: GT
                                list: ops
                                    HdlValueId: exp_in
                                    HdlValueId: f2i_emax
                            HdlValueInt: 1
                            HdlValueId: opas
    HdlValueId: f2i_out_sign

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlValueId: fract_in_00
            HdlOp: TERNARY
                list: ops
                    HdlValueId: opas
                    HdlValueInt: 9e
                    HdlValueInt: 0
            HdlOp: SUB
                list: ops
                    HdlValueInt: 9e
                    HdlValueId: fi_ldz
    HdlValueId: exp_i2f

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: SLL
        list: ops
            HdlOp: CONCAT
                list: ops
                    HdlOp: REPL_CONCAT
                        list: ops
                            HdlValueInt: 8
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: fract_in
                                    HdlValueInt: 47
                    HdlValueId: fract_in
            HdlValueId: f2i_shft
    HdlValueId: exp_f2i_1

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlValueId: f2i_zero
            HdlValueInt: 0
            HdlOp: TERNARY
                list: ops
                    HdlValueId: f2i_max
                    HdlValueInt: ff
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: exp_f2i_1
                            HdlOp: DOWNTO
                                list: ops
                                    HdlValueInt: 55
                                    HdlValueInt: 48
    HdlValueId: exp_f2i

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlValueId: op_f2i
            HdlValueId: exp_f2i
            HdlValueId: exp_i2f
    HdlValueId: conv_exp

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        INS HdlOp@@OR to ops
        UPD HdlOp@@OR to OR
            INS list@@ops to OR
            INS HdlOp@@AND to ops
            HdlOp: AND
                list: ops
                    HdlValueId: f2i_zero
                    HdlValueId: op_f2i

UPD HdlStmAssign@@ to 
    MOV HdlOp@@TERNARY to 
    HdlOp: TERNARY
        list: ops
            HdlValueId: op_div
            HdlValueId: exp_div
            HdlOp: TERNARY
                list: ops
                    HdlValueId: exp_zero
                    HdlValueInt: 0
                    HdlOp: TERNARY
                        list: ops
                            HdlValueId: dn
                            HdlOp: CONCAT
                                list: ops
                                    HdlValueInt: 0
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: fract_in
                                            HdlOp: DOWNTO
                                                list: ops
                                                    HdlValueInt: 47
                                                    HdlValueInt: 46
                            HdlValueId: exp_out1
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlValueId@@exp_div to conv_exp
        UPD HdlValueId@@op_div to op_f2i
        MOV HdlValueId@@op_div to ops
        HdlValueId: op_div


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -321,18 +350,16 @@ assign s = grs_sel_div ? |fract_trunc[24:0]             : (|fract_trunc[23:0] |
 assign round = (g & r) | (r & s) ;
 assign {exp_rnd_adj0, fract_out_rnd0} = round ? fract_out_pl1 : {1'b0, fract_out};
 assign exp_out_rnd0 =  exp_rnd_adj0 ? exp_out_pl1 : exp_out;
-assign ovf0 = exp_out_final_ff & !rmode_01;
+assign ovf0 = exp_out_final_ff & !rmode_01 & !op_f2i;
 
 // round to zero
-assign fract_out_rnd1 = (exp_out_ff & !op_div & !dn) ? 23'h7fffff : fract_out;
-assign exp_fix_div    = (fi_ldz>23) ? exp_fix_diva : exp_fix_divb;
+assign fract_out_rnd1 = (exp_out_ff & !op_div & !dn & !op_f2i) ? 23'h7fffff : fract_out;
+assign exp_fix_div    = (fi_ldz>22) ? exp_fix_diva : exp_fix_divb;
 assign exp_out_rnd1   = (g & r & s & exp_in_ff) ? (op_div ? exp_fix_div : exp_next_mi[7:0]) :
-			exp_out_ff ? exp_in : exp_out;
-
+			(exp_out_ff & !op_f2i) ? exp_in : exp_out;
 assign ovf1 = exp_out_ff & !dn;
 
 // round to +inf (UP) and -inf (DOWN)
-//assign r_sign = rmode_11 ? !sign : sign;
 assign r_sign = sign;
 
 assign round2a = !exp_out_fe | !fract_out_7fffff | (exp_out_fe & fract_out_7fffff);

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: GT
                list: ops
                    HdlValueId: fi_ldz
                    HdlValueInt: 22
            HdlValueId: exp_fix_diva
            HdlValueId: exp_fix_divb
    HdlValueId: exp_fix_div

UPD HdlStmAssign@@ to 
    INS HdlOp@@TERNARY to 
    UPD HdlOp@@TERNARY to TERNARY
        INS list@@ops to TERNARY
        INS HdlValueId@@op_div to ops
        INS HdlValueId@@exp_div to ops
        UPD HdlOp@@TERNARY to TERNARY
            INS HdlOp@@OR to ops
            UPD HdlOp@@OR to OR
                INS list@@ops to OR
                INS HdlValueId@@op_i2f to ops

UPD HdlStmAssign@@ to 
    MOV HdlOp@@AND to 
    HdlOp: AND
        list: ops
            HdlValueId: exp_out_final_ff
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: rmode_01

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to AND
    MOV HdlOp@@TERNARY to 
    HdlOp: TERNARY
        list: ops
            HdlOp: AND
                list: ops
                    HdlOp: AND
                        list: ops
                            HdlValueId: exp_out_ff
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: op_div
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: dn
            HdlValueInt: 7fffff
            HdlValueId: fract_out
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlValueInt@@7fffff to ops
        HdlValueInt: 7fffff
        UPD HdlValueId@@fract_out to op_f2i
        MOV HdlValueId@@fract_out to ops
        HdlValueId: fract_out

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@TERNARY to TERNARY
            MOV HdlValueId@@exp_out_ff to ops
            HdlValueId: exp_out_ff

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: GT
                list: ops
                    HdlValueId: fi_ldz
                    HdlValueInt: 23
            HdlValueId: exp_fix_diva
            HdlValueId: exp_fix_divb
    HdlValueId: exp_fix_div


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -351,13 +378,14 @@ assign round2_fmul = !r_sign &
 			)
 		);
 
-assign round2 = (op_mul | op_div) ? round2_fmul : round2_fasu;
+assign round2_f2i = rmode_10 & (( |fract_in[23:0] & !opas & (exp_in<8'h80 )) | (|fract_trunc));
+assign round2 = (op_mul | op_div) ? round2_fmul : op_f2i ? round2_f2i : round2_fasu;
 
 assign {exp_rnd_adj2a, fract_out_rnd2a} = round2 ? fract_out_pl1 : {1'b0, fract_out};
-assign exp_out_rnd2a  = exp_rnd_adj2a ? (exp_ovf[1] & op_mul) ? exp_out_mi1 : exp_out_pl1 : exp_out;
+assign exp_out_rnd2a  = exp_rnd_adj2a ? ((exp_ovf[1] & op_mul) ? exp_out_mi1 : exp_out_pl1) : exp_out;
 
-assign fract_out_rnd2 = (r_sign & exp_out_ff & !op_div & !dn) ? 23'h7fffff : fract_out_rnd2a;
-assign exp_out_rnd2   = (r_sign & exp_out_ff) ? 8'hfe      : exp_out_rnd2a;
+assign fract_out_rnd2 = (r_sign & exp_out_ff & !op_div & !dn & !op_f2i) ? 23'h7fffff : fract_out_rnd2a;
+assign exp_out_rnd2   = (r_sign & exp_out_ff & !op_f2i) ? 8'hfe      : exp_out_rnd2a;
 
 
 // Choose rounding mode

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: AND
        list: ops
            HdlValueId: rmode_10
            HdlOp: OR
                list: ops
                    HdlOp: AND
                        list: ops
                            HdlOp: AND
                                list: ops
                                    HdlOp: OR_UNARY
                                        list: ops
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: fract_in
                                                    HdlOp: DOWNTO
                                                        list: ops
                                                            HdlValueInt: 23
                                                            HdlValueInt: 0
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: opas
                            HdlOp: LT
                                list: ops
                                    HdlValueId: exp_in
                                    HdlValueInt: 80
                    HdlOp: OR_UNARY
                        list: ops
                            HdlValueId: fract_trunc
    HdlValueId: round2_f2i

UPD HdlStmAssign@@ to 
    INS HdlOp@@AND to 
    UPD HdlOp@@AND to AND
        INS list@@ops to AND
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: op_f2i

UPD HdlStmAssign@@ to 
    INS HdlOp@@TERNARY to 
    UPD HdlOp@@TERNARY to TERNARY
        INS list@@ops to TERNARY
        INS HdlValueId@@fract_out to ops
        UPD HdlOp@@AND to AND
            INS HdlOp@@NEG_LOG to ops
            UPD HdlOp@@NEG_LOG to NEG_LOG
                INS list@@ops to NEG_LOG

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to AND
    MOV HdlOp@@TERNARY to 
    HdlOp: TERNARY
        list: ops
            HdlOp: AND
                list: ops
                    HdlOp: AND
                        list: ops
                            HdlOp: AND
                                list: ops
                                    HdlValueId: r_sign
                                    HdlValueId: exp_out_ff
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: op_div
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: dn
            HdlValueInt: 7fffff
            HdlValueId: fract_out_rnd2a
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlValueInt@@7fffff to ops
        HdlValueInt: 7fffff
        UPD HdlValueId@@fract_out_rnd2a to op_f2i
        MOV HdlValueId@@fract_out_rnd2a to ops
        HdlValueId: fract_out_rnd2a

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to AND
    MOV HdlOp@@TERNARY to 
    HdlOp: TERNARY
        list: ops
            HdlOp: AND
                list: ops
                    HdlValueId: r_sign
                    HdlValueId: exp_out_ff
            HdlValueInt: fe
            HdlValueId: exp_out_rnd2a
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlValueInt@@fe to ops
        HdlValueInt: fe
        UPD HdlValueId@@exp_out_rnd2a to op_f2i
        MOV HdlValueId@@exp_out_rnd2a to ops
        HdlValueId: exp_out_rnd2a

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlValueId@@round2_fasu to ops
        HdlValueId: round2_fasu


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -426,12 +454,12 @@ assign inf_out = (rmode[1] & (op_mul | op_div) & !r_sign & (	(exp_in_ff & !op_di
 				)
 		) | (op_div & rmode[1] & exp_in_ff & op_dn & !r_sign & (fi_ldz_2 < 24)  & (exp_out_rnd!=8'hfe) );
 
-assign fract_out_final =	(inf_out | ovf0 | output_zero) ? 23'h0 :
-				max_num ? 23'h7fffff :
+assign fract_out_final =	(inf_out | ovf0 | output_zero ) ? 23'h0 :
+				(max_num | (f2i_max & op_f2i) ) ? 23'h7fffff :
 				fract_out_rnd;
 
-assign exp_out_final =	((op_div & exp_ovf[1] & !exp_ovf[0]) | output_zero) ? 8'h00 :
-			((op_div & exp_ovf[1] &  exp_ovf[0] & rmode_00) | inf_out) ? 8'hff :
+assign exp_out_final =	((op_div & exp_ovf[1] & !exp_ovf[0]) | output_zero ) ? 8'h00 :
+			((op_div & exp_ovf[1] &  exp_ovf[0] & rmode_00) | inf_out | (f2i_max & op_f2i) ) ? 8'hff :
 			max_num ? 8'hfe :
 			exp_out_rnd;
 

ParseResult:
INS HdlStmAssign@@ to objs

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlOp@@OR to ops
        HdlOp: OR
            list: ops
                HdlOp: OR
                    list: ops
                        HdlValueId: inf_out
                        HdlValueId: ovf0
                HdlValueId: output_zero
        DEL HdlValueInt@@0 from ops
        DEL HdlOp@@TERNARY from ops
        HdlOp: TERNARY
            list: ops
                HdlValueId: max_num
                HdlValueInt: 7fffff
                HdlValueId: fract_out_rnd
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from 
    DEL HdlValueId@@fract_out_final from 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@TERNARY to TERNARY
            MOV HdlOp@@OR to ops
            HdlOp: OR
                list: ops
                    HdlOp: AND
                        list: ops
                            HdlOp: AND
                                list: ops
                                    HdlOp: AND
                                        list: ops
                                            HdlValueId: op_div
                                            HdlOp: INDEX
                                                list: ops
                                                    HdlValueId: exp_ovf
                                                    HdlValueInt: 1
                                    HdlOp: INDEX
                                        list: ops
                                            HdlValueId: exp_ovf
                                            HdlValueInt: 0
                            HdlValueId: rmode_00
                    HdlValueId: inf_out

DEL HdlStmAssign@@ from objs


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -491,7 +519,19 @@ assign overflow_fdiv =	inf_out |
 			(exp_ovf[0] & (exp_ovf[1] | exp_out_ff) );
 
 assign overflow  = op_div ? overflow_fdiv : (ovf0 | ovf1);
-assign ine = (r & !dn) | (s & !dn) | max_num | (op_div & !rem_00);
+
+wire		f2i_ine;
+
+assign f2i_ine =	(f2i_zero & !fract_in_00 & !opas) |
+			(|fract_trunc) |
+			(f2i_zero & (exp_in<8'h80) & opas & !fract_in_00) |
+			(f2i_max & rmode_11 & (exp_in<8'h80));
+
+
+
+assign ine =	op_f2i ? f2i_ine :
+		op_i2f ? (|fract_trunc) :
+		((r & !dn) | (s & !dn) | max_num | (op_div & !rem_00));
 
 // ---------------------------------------------------------------------
 // Debugging Stuff

ParseResult:
INS HdlIdDef@@f2i_ine to objs
HdlIdDef: f2i_ine
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: OR
        list: ops
            HdlOp: OR
                list: ops
                    HdlOp: OR
                        list: ops
                            HdlOp: AND
                                list: ops
                                    HdlOp: AND
                                        list: ops
                                            HdlValueId: f2i_zero
                                            HdlOp: NEG_LOG
                                                list: ops
                                                    HdlValueId: fract_in_00
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: opas
                            HdlOp: OR_UNARY
                                list: ops
                                    HdlValueId: fract_trunc
                    HdlOp: AND
                        list: ops
                            HdlOp: AND
                                list: ops
                                    HdlOp: AND
                                        list: ops
                                            HdlValueId: f2i_zero
                                            HdlOp: LT
                                                list: ops
                                                    HdlValueId: exp_in
                                                    HdlValueInt: 80
                                    HdlValueId: opas
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: fract_in_00
            HdlOp: AND
                list: ops
                    HdlOp: AND
                        list: ops
                            HdlValueId: f2i_max
                            HdlValueId: rmode_11
                    HdlOp: LT
                        list: ops
                            HdlValueId: exp_in
                            HdlValueInt: 80
    HdlValueId: f2i_ine

UPD HdlStmAssign@@ to 
    MOV HdlOp@@OR to 
    HdlOp: OR
        list: ops
            HdlOp: OR
                list: ops
                    HdlOp: OR
                        list: ops
                            HdlOp: AND
                                list: ops
                                    HdlValueId: r
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: dn
                            HdlOp: AND
                                list: ops
                                    HdlValueId: s
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: dn
                    HdlValueId: max_num
            HdlOp: AND
                list: ops
                    HdlValueId: op_div
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: rem_00


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -507,7 +547,7 @@ wire	[22:0]	fract_out_del;
 wire	[47:0]	fract_in_del;
 wire		overflow_del;
 wire	[1:0]	exp_ovf_del;
-wire	[22:0]	fract_out_x_del;
+wire	[22:0]	fract_out_x_del, fract_out_rnd2a_del;
 wire	[24:0]	trunc_xx_del;
 wire		exp_rnd_adj2a_del;
 wire	[22:0]	fract_dn_del;

ParseResult:
INS HdlIdDef@@fract_out_rnd2a_del to objs
HdlIdDef: fract_out_rnd2a_del
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 22
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -520,6 +560,8 @@ wire		inf_out_del, max_out_del;
 wire	[5:0]	fi_ldz_del;
 wire		rx_del;
 wire		ez_del;
+wire		lr;
+wire	[7:0]	shr, shl, exp_div_del;
 
 delay2 #26 ud000(clk, test.u0.fracta, fracta_del);
 delay2 #26 ud001(clk, test.u0.fractb, fractb_del);

ParseResult:
INS HdlIdDef@@lr to objs
HdlIdDef: lr
    HdlDirection: INTERNAL

INS HdlIdDef@@shr to objs
HdlIdDef: shr
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@shl to objs
HdlIdDef: shl
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@exp_div_del to objs
HdlIdDef: exp_div_del
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/post_norm.v
+++ b/verilog/post_norm.v
@@ -543,6 +585,13 @@ delay1 	#0 ud026(clk, max_num, max_num_del);
 delay1 	#5 ud027(clk, fi_ldz, fi_ldz_del);
 delay1  #0 ud028(clk, rem_00, rx_del);
 
+delay1  #0 ud029(clk, left_right, lr);
+delay1  #7 ud030(clk, shift_right, shr);
+delay1  #7 ud031(clk, shift_left, shl);
+delay1 #22 ud032(clk, fract_out_rnd2a, fract_out_rnd2a_del);
+
+delay1  #7 ud033(clk, exp_div, exp_div_del);
+
 always @(test.error_event)
    begin
 

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@TERNARY to 
    UPD HdlOp@@TERNARY to TERNARY
        INS list@@ops to TERNARY
        INS HdlValueId@@op_f2i to ops
        INS HdlValueId@@f2i_ine to ops
        INS HdlOp@@TERNARY to ops
        UPD HdlOp@@TERNARY to TERNARY
            INS list@@ops to TERNARY
            INS HdlValueId@@op_i2f to ops
            INS HdlOp@@OR_UNARY to ops
            HdlOp: OR_UNARY
                list: ops
                    HdlValueId: fract_trunc


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/fpu.v
+++ b/verilog/fpu.v
@@ -382,7 +414,7 @@ assign out_fixed = (	(qnan_d | snan_d) |
 		   )  ? QNAN : INF;
 
 always @(posedge clk)
-	out[30:0] <= #1 (mul_inf | div_inf | (inf_d & (fpu_op_r3!=3'b011)) | snan_d | qnan_d) ? out_fixed :
+	out[30:0] <= #1 (mul_inf | div_inf | (inf_d & (fpu_op_r3!=3'b011) & (fpu_op_r3!=3'b101)) | snan_d | qnan_d) & fpu_op_r3!=3'b100 ? out_fixed :
 			out_d;
 
 assign out_d_00 = !(|out_d);

ParseResult:
UPD HdlStmAssign@@body to body
    UPD HdlOp@@TERNARY to AND
    MOV HdlOp@@TERNARY to body
    HdlOp: TERNARY
        list: ops
            HdlOp: OR
                list: ops
                    HdlOp: OR
                        list: ops
                            HdlOp: OR
                                list: ops
                                    HdlOp: OR
                                        list: ops
                                            HdlValueId: mul_inf
                                            HdlValueId: div_inf
                                    HdlOp: AND
                                        list: ops
                                            HdlValueId: inf_d
                                            HdlOp: NE
                                                list: ops
                                                    HdlValueId: fpu_op_r3
                                                    HdlValueInt: 011
                            HdlValueId: snan_d
                    HdlValueId: qnan_d
            HdlValueId: out_fixed
            HdlValueId: out_d
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlValueId@@out_d to ops
        HdlValueId: out_d
        UPD HdlValueId@@out_fixed to fpu_op_r3
        MOV HdlValueId@@out_fixed to ops
        HdlValueId: out_fixed
        UPD HdlOp@@OR to OR
            UPD HdlOp@@OR to OR
                UPD HdlOp@@OR to OR
                    MOV HdlOp@@AND to ops
                    HdlOp: AND
                        list: ops
                            HdlValueId: inf_d
                            HdlOp: NE
                                list: ops
                                    HdlValueId: fpu_op_r3
                                    HdlValueInt: 011


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/fpu.v
+++ b/verilog/fpu.v
@@ -391,7 +423,8 @@ assign sign_mul_final = (sign_exe_r & ((opa_00 & opb_inf) | (opb_00 & opa_inf)))
 assign sign_div_final = (sign_exe_r & (opa_inf & opb_inf)) ? !sign_mul_r : sign_mul_r | (opa_00 & opb_00);
 
 always @(posedge clk)
-	out[31] <= #1	((fpu_op_r3==3'b010) & !(snan_d | qnan_d)) ?	sign_mul_final :
+	out[31] <= #1	((fpu_op_r3==3'b101) & out_d_00) ? (f2i_out_sign & !(qnan_d | snan_d) ) :
+			((fpu_op_r3==3'b010) & !(snan_d | qnan_d)) ?	sign_mul_final :
 			((fpu_op_r3==3'b011) & !(snan_d | qnan_d)) ?	sign_div_final :
 			(snan_d | qnan_d | ind_d) ?			nan_sign_d :
 			output_zero_fasu ?				result_zero_sign_d :

ParseResult:
UPD HdlStmAssign@@body to body
    MOV HdlOp@@TERNARY to body
    HdlOp: TERNARY
        list: ops
            HdlOp: AND
                list: ops
                    HdlOp: EQ
                        list: ops
                            HdlValueId: fpu_op_r3
                            HdlValueInt: 010
                    HdlOp: NEG_LOG
                        list: ops
                            HdlOp: OR
                                list: ops
                                    HdlValueId: snan_d
                                    HdlValueId: qnan_d
            HdlValueId: sign_mul_final
            HdlOp: TERNARY
                list: ops
                    HdlOp: AND
                        list: ops
                            HdlOp: EQ
                                list: ops
                                    HdlValueId: fpu_op_r3
                                    HdlValueInt: 011
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlOp: OR
                                        list: ops
                                            HdlValueId: snan_d
                                            HdlValueId: qnan_d
                    HdlValueId: sign_div_final
                    HdlOp: TERNARY
                        list: ops
                            HdlOp: OR
                                list: ops
                                    HdlOp: OR
                                        list: ops
                                            HdlValueId: snan_d
                                            HdlValueId: qnan_d
                                    HdlValueId: ind_d
                            HdlValueId: nan_sign_d
                            HdlOp: TERNARY
                                list: ops
                                    HdlValueId: output_zero_fasu
                                    HdlValueId: result_zero_sign_d
                                    HdlValueId: sign_fasu_r


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/fpu.v
+++ b/verilog/fpu.v
@@ -407,8 +440,9 @@ assign ine_div  = (ine_d | overflow_d | underflow_d) & !(opb_00 | snan_d | qnan_
 assign ine_fasu = (ine_d | overflow_d | underflow_d) & !(snan_d | qnan_d | inf_d);
 
 always @(posedge  clk)
-	ine <= #1 !fpu_op_r3[1] ? ine_fasu :
-		   fpu_op_r3[0] ? ine_div  : ine_mul;
+	ine <= #1	 fpu_op_r3[2] ? ine_d :
+			!fpu_op_r3[1] ? ine_fasu :
+			 fpu_op_r3[0] ? ine_div  : ine_mul;
 
 
 assign overflow_fasu = overflow_d & !(snan_d | qnan_d | inf_d);

ParseResult:
UPD HdlStmAssign@@body to body
    INS HdlOp@@TERNARY to body
    UPD HdlOp@@TERNARY to TERNARY
        INS list@@ops to TERNARY
        INS HdlOp@@AND to ops
        HdlOp: AND
            list: ops
                HdlOp: EQ
                    list: ops
                        HdlValueId: fpu_op_r3
                        HdlValueInt: 101
                HdlValueId: out_d_00
        INS HdlOp@@AND to ops
        HdlOp: AND
            list: ops
                HdlValueId: f2i_out_sign
                HdlOp: NEG_LOG
                    list: ops
                        HdlOp: OR
                            list: ops
                                HdlValueId: qnan_d
                                HdlValueId: snan_d

UPD HdlStmAssign@@body to body
    MOV HdlOp@@TERNARY to body
    HdlOp: TERNARY
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: fpu_op_r3
                            HdlValueInt: 1
            HdlValueId: ine_fasu
            HdlOp: TERNARY
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: fpu_op_r3
                            HdlValueInt: 0
                    HdlValueId: ine_div
                    HdlValueId: ine_mul


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/fpu.v
+++ b/verilog/fpu.v
@@ -416,8 +450,9 @@ assign overflow_fmul = !inf_d & (inf_mul_r | inf_mul2 | overflow_d) & !(snan_d |
 assign overflow_fdiv = (overflow_d & !(opb_00 | inf_d | snan_d | qnan_d));
 
 always @(posedge clk)
-	overflow <= #1 !fpu_op_r3[1] ? overflow_fasu :
-			fpu_op_r3[0] ? overflow_fdiv : overflow_fmul;
+	overflow <= #1	 fpu_op_r3[2] ? 0 :
+			!fpu_op_r3[1] ? overflow_fasu :
+			 fpu_op_r3[0] ? overflow_fdiv : overflow_fmul;
 
 always @(posedge clk)
 	underflow_fmul_r <= #1 underflow_fmul_d;

ParseResult:
UPD HdlStmAssign@@body to body
    INS HdlOp@@TERNARY to body
    UPD HdlOp@@TERNARY to TERNARY
        INS list@@ops to TERNARY
        INS HdlOp@@AND to ops
        HdlOp: AND
            list: ops
                HdlOp: EQ
                    list: ops
                        HdlValueId: fpu_op_r3
                        HdlValueInt: 101
                HdlValueId: out_d_00
        INS HdlOp@@AND to ops
        HdlOp: AND
            list: ops
                HdlValueId: f2i_out_sign
                HdlOp: NEG_LOG
                    list: ops
                        HdlOp: OR
                            list: ops
                                HdlValueId: qnan_d
                                HdlValueId: snan_d

UPD HdlStmAssign@@body to body
    MOV HdlOp@@TERNARY to body
    HdlOp: TERNARY
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: fpu_op_r3
                            HdlValueInt: 1
            HdlValueId: overflow_fasu
            HdlOp: TERNARY
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: fpu_op_r3
                            HdlValueInt: 0
                    HdlValueId: overflow_fdiv
                    HdlValueId: overflow_fmul


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/fpu.v
+++ b/verilog/fpu.v
@@ -433,7 +468,8 @@ assign underflow_fmul = underflow_fmul1 & !(snan_d | qnan_d | inf_mul_r);
 assign underflow_fdiv = underflow_fasu & !opb_00;
 
 always @(posedge clk)
-	underflow <= #1 !fpu_op_r3[1] ? underflow_fasu :
+	underflow <= #1  fpu_op_r3[2] ? 0 :
+			!fpu_op_r3[1] ? underflow_fasu :
 			 fpu_op_r3[0] ? underflow_fdiv : underflow_fmul;
 
 always @(posedge clk)

ParseResult:
UPD HdlStmAssign@@body to body
    INS HdlOp@@TERNARY to body
    UPD HdlOp@@TERNARY to TERNARY
        INS list@@ops to TERNARY
        INS HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: fpu_op_r3
                HdlValueInt: 2
        INS HdlValueId@@ine_d to ops

UPD HdlStmAssign@@body to body
    MOV HdlOp@@TERNARY to body
    HdlOp: TERNARY
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: fpu_op_r3
                            HdlValueInt: 1
            HdlValueId: underflow_fasu
            HdlOp: TERNARY
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: fpu_op_r3
                            HdlValueInt: 0
                    HdlValueId: underflow_fdiv
                    HdlValueId: underflow_fmul


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/fpu.v
+++ b/verilog/fpu.v
@@ -481,22 +517,26 @@ always @(test.error_event)
 
 // Status Outputs
 always @(posedge clk)
-	qnan <= #1	snan_d | qnan_d | (ind_d & !fasu_op_r2) |
-			(opa_00 & opb_00 & fpu_op_r3==3'b011) |
-			(((opa_inf & opb_00) | (opb_inf & opa_00 )) & fpu_op_r3==3'b010);
+	qnan <= #1	fpu_op_r3[2] ? 0 : (
+						snan_d | qnan_d | (ind_d & !fasu_op_r2) |
+						(opa_00 & opb_00 & fpu_op_r3==3'b011) |
+						(((opa_inf & opb_00) | (opb_inf & opa_00 )) & fpu_op_r3==3'b010)
+					   );
 
 assign inf_fmul = 	(((inf_mul_r | inf_mul2) & (rmode_r3==2'h0)) | opa_inf | opb_inf) & 
 			!((opa_inf & opb_00) | (opb_inf & opa_00 )) &
 			fpu_op_r3==3'b010;
 
 always @(posedge clk)
-	inf <= #1	!(qnan_d | snan_d) & (
+	inf <= #1	fpu_op_r3[2] ? 0 :
+			(!(qnan_d | snan_d) & (
 						((&out_d[30:23]) & !(|out_d[22:0]) & !(opb_00 & fpu_op_r3==3'b011)) |
 						(inf_d & !(ind_d & !fasu_op_r2) & !fpu_op_r3[1]) |
 						inf_fmul |
 						(!opa_00 & opb_00 & fpu_op_r3==3'b011) |
 						(fpu_op_r3==3'b011 & opa_inf & !opb_inf)
-					);
+					      )
+			);
 
 assign output_zero_fasu = out_d_00 & !(inf_d | snan_d | qnan_d);
 assign output_zero_fdiv = (div_00 | (out_d_00 & !opb_00)) & !(opa_inf & opb_inf) &

ParseResult:
UPD HdlStmAssign@@body to body
    MOV HdlOp@@OR to body
    HdlOp: OR
        list: ops
            HdlOp: OR
                list: ops
                    HdlOp: OR
                        list: ops
                            HdlOp: OR
                                list: ops
                                    HdlValueId: snan_d
                                    HdlValueId: qnan_d
                            HdlOp: AND
                                list: ops
                                    HdlValueId: ind_d
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlValueId: fasu_op_r2
                    HdlOp: AND
                        list: ops
                            HdlOp: AND
                                list: ops
                                    HdlValueId: opa_00
                                    HdlValueId: opb_00
                            HdlOp: EQ
                                list: ops
                                    HdlValueId: fpu_op_r3
                                    HdlValueInt: 011
            HdlOp: AND
                list: ops
                    HdlOp: OR
                        list: ops
                            HdlOp: AND
                                list: ops
                                    HdlValueId: opa_inf
                                    HdlValueId: opb_00
                            HdlOp: AND
                                list: ops
                                    HdlValueId: opb_inf
                                    HdlValueId: opa_00
                    HdlOp: EQ
                        list: ops
                            HdlValueId: fpu_op_r3
                            HdlValueInt: 010

UPD HdlStmAssign@@body to body
    MOV HdlOp@@AND to body
    HdlOp: AND
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlOp: OR
                        list: ops
                            HdlValueId: qnan_d
                            HdlValueId: snan_d
            HdlOp: OR
                list: ops
                    HdlOp: OR
                        list: ops
                            HdlOp: OR
                                list: ops
                                    HdlOp: OR
                                        list: ops
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlOp: AND_UNARY
                                                                list: ops
                                                                    HdlOp: INDEX
                                                                        list: ops
                                                                            HdlValueId: out_d
                                                                            HdlOp: DOWNTO
                                                                                list: ops
                                                                                    HdlValueInt: 30
                                                                                    HdlValueInt: 23
                                                            HdlOp: NEG_LOG
                                                                list: ops
                                                                    HdlOp: OR_UNARY
                                                                        list: ops
                                                                            HdlOp: INDEX
                                                                                list: ops
                                                                                    HdlValueId: out_d
                                                                                    HdlOp: DOWNTO
                                                                                        list: ops
                                                                                            HdlValueInt: 22
                                                                                            HdlValueInt: 0
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlOp: AND
                                                                list: ops
                                                                    HdlValueId: opb_00
                                                                    HdlOp: EQ
                                                                        list: ops
                                                                            HdlValueId: fpu_op_r3
                                                                            HdlValueInt: 011
                                            HdlOp: AND
                                                list: ops
                                                    HdlOp: AND
                                                        list: ops
                                                            HdlValueId: inf_d
                                                            HdlOp: NEG_LOG
                                                                list: ops
                                                                    HdlOp: AND
                                                                        list: ops
                                                                            HdlValueId: ind_d
                                                                            HdlOp: NEG_LOG
                                                                                list: ops
                                                                                    HdlValueId: fasu_op_r2
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlOp: INDEX
                                                                list: ops
                                                                    HdlValueId: fpu_op_r3
                                                                    HdlValueInt: 1
                                    HdlValueId: inf_fmul
                            HdlOp: AND
                                list: ops
                                    HdlOp: AND
                                        list: ops
                                            HdlOp: NEG_LOG
                                                list: ops
                                                    HdlValueId: opa_00
                                            HdlValueId: opb_00
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: fpu_op_r3
                                            HdlValueInt: 011
                    HdlOp: AND
                        list: ops
                            HdlOp: AND
                                list: ops
                                    HdlOp: EQ
                                        list: ops
                                            HdlValueId: fpu_op_r3
                                            HdlValueInt: 011
                                    HdlValueId: opa_inf
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlValueId: opb_inf


CommitId: af78a81c8d0e85d7d47c5190a9eab8614b52be05
This commit was generated by cvs2svn to compensate for changes in r5, which
--- a/verilog/fpu.v
+++ b/verilog/fpu.v
@@ -506,7 +546,8 @@ assign output_zero_fmul = (out_d_00 | opa_00 | opb_00) &
 			  !(opa_inf & opb_00) & !(opb_inf & opa_00);
 
 always @(posedge clk)
-	zero <= #1	fpu_op_r3==3'b011 ?	output_zero_fdiv :
+	zero <= #1	fpu_op_r3==3'b101 ?	out_d_00 & !(snan_d | qnan_d):
+			fpu_op_r3==3'b011 ?	output_zero_fdiv :
 			fpu_op_r3==3'b010 ?	output_zero_fmul :
 						output_zero_fasu ;
 
ParseResult:
UPD HdlStmAssign@@body to body
    INS HdlOp@@TERNARY to body
    UPD HdlOp@@TERNARY to TERNARY
        INS list@@ops to TERNARY
        INS HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: fpu_op_r3
                HdlValueInt: 2
        INS HdlValueInt@@0 to ops

UPD HdlStmAssign@@body to body
    MOV HdlOp@@TERNARY to body
    HdlOp: TERNARY
        list: ops
            HdlOp: EQ
                list: ops
                    HdlValueId: fpu_op_r3
                    HdlValueInt: 011
            HdlValueId: output_zero_fdiv
            HdlOp: TERNARY
                list: ops
                    HdlOp: EQ
                        list: ops
                            HdlValueId: fpu_op_r3
                            HdlValueInt: 010
                    HdlValueId: output_zero_fmul
                    HdlValueId: output_zero_fasu


