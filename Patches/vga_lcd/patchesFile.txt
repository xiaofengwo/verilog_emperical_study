CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/vga.vhd
+++ b/vga.vhd
@@ -6,7 +6,7 @@
 -- rev 1.0 May  10th, 2001
 -- rev 1.1 June  3th, 2001. Changed WISHBONE addresses. Addresses are byte oriented, instead of databus-independent
 -- rev 1.2 June 29th, 2001. Many hanges in design to reflect changes in fifo's. Design now correctly maps to Xilinx-BlockRAMs.
---
+-- rev 1.3 July 15th, 2001. Added CLUT bank switching
 
 library ieee;
 use ieee.std_logic_1164.all;

ParseResult:
INS HdlLibrary@@ieee to objs

DEL HdlLibrary@@ieee from objs


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/vga.vhd
+++ b/vga.vhd
@@ -98,25 +98,25 @@ architecture dataflow of vga is
 		INTA_O : out std_logic;
 
 		-- control register settings
-		BL : out std_logic;
-		CSL : out std_logic;
-		VSL : out std_logic;
-		HSL : out std_logic;
-		PC : out std_logic;
-		CD : out std_logic_vector(1 downto 0);
-		VBL : out std_logic_vector(1 downto 0);
-		BSW : out std_logic;
-		Ven : out std_logic;
+		BL   : out std_logic;		                  -- blanking level
+		CSL  : out std_logic;                    -- composite sync level
+		VSL  : out std_logic;                    -- vsync level
+		HSL  : out std_logic;                    -- hsync level
+		PC   : out std_logic;                    -- pseudo color
+ 		CD   : out std_logic_vector(1 downto 0); -- color depth
+		VBL  : out std_logic_vector(1 downto 0); -- burst length
+		CBSW : out std_logic;                    -- clut bank switching enable
+		VBSW : out std_logic;                    -- video page bank switching enable
+		Ven  : out std_logic;                    -- video system enable
 
 		-- status register inputs
-		AMP : in std_logic; -- active memory page
-
-		-- interrupt signals
-		bsint_in,                                    -- bank switch interrupt
-		hint_in,                                     -- horizontal sync. interrupt
-		vint_in,                                     -- vertical sync. interrupt
-		luint_in,                                    -- line-fifo under-run (no more data in fifo)
-		sint_in : in std_logic;                      -- Serious System interrupt (fault during memory read)
+		AVMP,                -- active video memory page
+		ACMP : in std_logic; -- active clut page
+		bsint_in,
+		hint_in,
+		vint_in,
+		luint_in,
+		sint_in : in std_logic; -- interrupt request signals
 
 		-- Horizontal Timing Register
 		Thsync : out unsigned(7 downto 0);

ParseResult:
UPD HdlIdDef@@BSW to CBSW

INS HdlIdDef@@VBSW to ports
HdlIdDef: VBSW
    HdlValueId: std_logic
    HdlDirection: OUT

UPD HdlIdDef@@AMP to AVMP

INS HdlIdDef@@ACMP to ports
HdlIdDef: ACMP
    HdlValueId: std_logic
    HdlDirection: IN


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/vga.vhd
+++ b/vga.vhd
@@ -131,8 +131,8 @@ architecture dataflow of vga is
 		Tvlen : out unsigned(15 downto 0);
 
 		VBARa,
-		VBARb,
-		CBAR : buffer unsigned(31 downto 2)
+		VBARb : buffer unsigned(31 downto  2);
+		CBAR  : buffer unsigned(31 downto 11)
 	);
 	end component wb_slave;
 

ParseResult:
UPD HdlIdDef@@CBAR to CBAR
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@2 to 11


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/vga.vhd
+++ b/vga.vhd
@@ -160,18 +160,20 @@ architecture dataflow of vga is
 		ctrl_cd : in std_logic_vector(1 downto 0);   -- color depth
 		ctrl_pc : in std_logic;                      -- 8bpp pseudo color/bw
 		ctrl_vbl : in std_logic_vector(1 downto 0);  -- burst length
-		ctrl_bsw : in std_logic;                     -- enable video page switch
+		ctrl_vbsw : in std_logic;                    -- enable video bank switching
+		ctrl_cbsw : in std_logic;                    -- enable clut bank switching
 
 		-- video memory addresses
 		VBAa,                                        -- Video Memory Base Address-A
 		VBAb : in unsigned(31 downto 2);             -- Video Memory Base Address-B
-		CBA : in unsigned(31 downto 2);              -- CLUT Base Address Register
+		CBA : in unsigned(31 downto 11);             -- CLUT Base Address Register
 
 		Thgate : unsigned(15 downto 0);              -- horizontal visible area (in pixels)
 		Tvgate : unsigned(15 downto 0);              -- vertical visible area (in horizontal lines)
 
-		stat_AMP : out std_logic;                    -- active memory page
-		bs_req : out std_logic;
+		stat_AVMP : out std_logic;                   -- active video memory page
+		stat_ACMP : out std_logic;                   -- active color lookup table
+		bs_req : out std_logic;                      -- bank-switch request: memory page switched (when enabled). bs_req is always generated
 
 		-- to/from line fifo
 		line_fifo_wreq : out std_logic;

ParseResult:
UPD HdlIdDef@@ctrl_bsw to ctrl_vbsw

INS HdlIdDef@@ctrl_cbsw to ports
HdlIdDef: ctrl_cbsw
    HdlValueId: std_logic
    HdlDirection: IN

UPD HdlIdDef@@stat_AMP to stat_AVMP

INS HdlIdDef@@stat_ACMP to ports
HdlIdDef: stat_ACMP
    HdlValueId: std_logic
    HdlDirection: OUT

UPD HdlIdDef@@CBA to CBA
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@2 to 11


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/vga.vhd
+++ b/vga.vhd
@@ -223,14 +225,15 @@ architecture dataflow of vga is
 	--
 
 	-- from wb_slave
-	signal ctrl_bl, ctrl_csl, ctrl_vsl, ctrl_hsl, ctrl_pc, ctrl_bsw, ctrl_ven : std_logic;
+	signal ctrl_bl, ctrl_csl, ctrl_vsl, ctrl_hsl, ctrl_pc, ctrl_cbsw, ctrl_vbsw, ctrl_ven : std_logic;
 	signal ctrl_cd, ctrl_vbl : std_logic_vector(1 downto 0);
 	signal Thsync, Thgdel, Tvsync, Tvgdel : unsigned(7 downto 0);
 	signal Thgate, Thlen, Tvgate, Tvlen : unsigned(15 downto 0);
-	signal VBARa, VBARb, CBAR : unsigned(31 downto 2);
+	signal VBARa, VBARb : unsigned(31 downto 2);
+	signal CBAR : unsigned(31 downto 11);
 
 	-- to wb_slave
-	signal stat_amp, bsint, hint, vint, luint, sint : std_logic;
+	signal stat_avmp, stat_acmp, bsint, hint, vint, luint, sint : std_logic;
 
 	-- from wb_master
 	signal line_fifo_wreq : std_logic;

ParseResult:
INS HdlIdDef@@ctrl_cbsw to objs
HdlIdDef: ctrl_cbsw
    HdlValueId: std_logic
    HdlDirection: INTERNAL

INS HdlIdDef@@ctrl_vbsw to objs
HdlIdDef: ctrl_vbsw
    HdlValueId: std_logic
    HdlDirection: INTERNAL

INS HdlIdDef@@CBAR to objs
HdlIdDef: CBAR
    HdlOp: INDEX
        list: ops
            HdlValueId: unsigned
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 11
    HdlDirection: INTERNAL

INS HdlIdDef@@stat_avmp to objs
HdlIdDef: stat_avmp
    HdlValueId: std_logic
    HdlDirection: INTERNAL

INS HdlIdDef@@stat_acmp to objs
HdlIdDef: stat_acmp
    HdlValueId: std_logic
    HdlDirection: INTERNAL

DEL HdlIdDef@@ctrl_bsw from objs
HdlIdDef: ctrl_bsw
    HdlValueId: std_logic
    HdlDirection: INTERNAL

DEL HdlIdDef@@CBAR from objs
HdlIdDef: CBAR
    HdlOp: INDEX
        list: ops
            HdlValueId: unsigned
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 2
    HdlDirection: INTERNAL

DEL HdlIdDef@@stat_amp from objs
HdlIdDef: stat_amp
    HdlValueId: std_logic
    HdlDirection: INTERNAL


CommitId: 6b5e57be543e4493d94418f7994f6b860cbb332f
Fixed some Wishbone RevB.3 related bugs.
--- a/rtl/verilog/vga_enh_top.v
+++ b/rtl/verilog/vga_enh_top.v
@@ -57,13 +60,20 @@
 //               Changed top-level name to vga_enh_top.v
 //
 
+//synopsys translate_off
 `include "timescale.v"
+//synopsys translate_on
 `include "vga_defines.v"
 
-module vga_enh_top (wb_clk_i, wb_rst_i, rst_i, wb_inta_o, 
-	wbs_adr_i, wbs_dat_i, wbs_dat_o, wbs_sel_i, wbs_we_i, wbs_stb_i, wbs_cyc_i, wbs_ack_o, wbs_err_o,
+module vga_enh_top (
+	wb_clk_i, wb_rst_i, rst_i, wb_inta_o,
+	wbs_adr_i, wbs_dat_i, wbs_dat_o, wbs_sel_i, wbs_we_i, wbs_stb_i, wbs_cyc_i, wbs_ack_o, wbs_rty_o, wbs_err_o,
 	wbm_adr_o, wbm_dat_i, wbm_cti_o, wbm_bte_o, wbm_sel_o, wbm_we_o, wbm_stb_o, wbm_cyc_o, wbm_ack_i, wbm_err_i,
-	clk_p_i, hsync_pad_o, vsync_pad_o, csync_pad_o, blank_pad_o, r_pad_o, g_pad_o, b_pad_o
+	clk_p_i,
+`ifdef VGA_12BIT_DVI
+	dvi_pclk_p_o, dvi_pclk_m_o, dvi_hsync_o, dvi_vsync_o, dvi_de_o, dvi_d_o,
+`endif
+	clk_p_o, hsync_pad_o, vsync_pad_o, csync_pad_o, blank_pad_o, r_pad_o, g_pad_o, b_pad_o
 	);
 
 	//

ParseResult:
INS HdlIdDef@@wbs_rty_o to ports
HdlIdDef: wbs_rty_o
    HdlDirection: OUT

INS HdlIdDef@@dvi_pclk_p_o to ports
HdlIdDef: dvi_pclk_p_o
    HdlDirection: OUT

INS HdlIdDef@@dvi_pclk_m_o to ports
HdlIdDef: dvi_pclk_m_o
    HdlDirection: OUT

INS HdlIdDef@@dvi_hsync_o to ports
HdlIdDef: dvi_hsync_o
    HdlDirection: OUT

INS HdlIdDef@@dvi_vsync_o to ports
HdlIdDef: dvi_vsync_o
    HdlDirection: OUT

INS HdlIdDef@@dvi_de_o to ports
HdlIdDef: dvi_de_o
    HdlDirection: OUT

UPD HdlIdDef@@hsync_pad_o to dvi_d_o

INS HdlIdDef@@clk_p_o to ports
HdlIdDef: clk_p_o
    HdlDirection: OUT

INS HdlIdDef@@hsync_pad_o to ports
HdlIdDef: hsync_pad_o
    HdlDirection: OUT

UPD HdlIdDef@@hsync_pad_o to hsync_pad_o
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@reg to wire

UPD HdlIdDef@@dvi_d_o to dvi_d_o
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        INS HdlOp@@DOWNTO to ops
        HdlOp: DOWNTO
            list: ops
                HdlValueInt: 11
                HdlValueInt: 0

UPD HdlIdDef@@wbm_cti_o to wbm_cti_o
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@3 to 2

UPD HdlIdDef@@vsync_pad_o to vsync_pad_o
    DEL HdlOp@@PARAMETRIZATION from vsync_pad_o
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg

UPD HdlIdDef@@csync_pad_o to csync_pad_o
    DEL HdlOp@@PARAMETRIZATION from csync_pad_o
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg

UPD HdlIdDef@@blank_pad_o to blank_pad_o
    DEL HdlOp@@PARAMETRIZATION from blank_pad_o
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg


CommitId: 6b5e57be543e4493d94418f7994f6b860cbb332f
Fixed some Wishbone RevB.3 related bugs.
--- a/rtl/verilog/vga_enh_top.v
+++ b/rtl/verilog/vga_enh_top.v
@@ -125,11 +144,13 @@ module vga_enh_top (wb_clk_i, wb_rst_i, rst_i, wb_inta_o,
 	wire arst = rst_i ^ ARST_LVL;
 
 	// from wb_slave
-	wire ctrl_bl, ctrl_csl, ctrl_vsl, ctrl_hsl, ctrl_pc, ctrl_cbsw, ctrl_vbsw, ctrl_ven;
-	wire [ 1: 0] ctrl_cd, ctrl_vbl;
+	wire         ctrl_bl, ctrl_csl, ctrl_vsl, ctrl_hsl, ctrl_pc, ctrl_cbsw, ctrl_vbsw, ctrl_ven;
+	wire [ 1: 0] ctrl_cd, ctrl_vbl, ctrl_dvi_odf;
 	wire [ 7: 0] Thsync, Thgdel, Tvsync, Tvgdel;
 	wire [15: 0] Thgate, Thlen, Tvgate, Tvlen;
 	wire [31: 2] VBARa, VBARb;
+
+	wire [ 8: 0] cursor_adr;
 	wire [31: 0] cursor0_xy, cursor1_xy;
 	wire         cursor0_en, cursor1_en;
 	wire [31:11] cursor0_ba, cursor1_ba;

ParseResult:
INS HdlIdDef@@ctrl_dvi_odf to objs
HdlIdDef: ctrl_dvi_odf
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 6b5e57be543e4493d94418f7994f6b860cbb332f
Fixed some Wishbone RevB.3 related bugs.
--- a/rtl/verilog/vga_enh_top.v
+++ b/rtl/verilog/vga_enh_top.v
@@ -139,16 +160,18 @@ module vga_enh_top (wb_clk_i, wb_rst_i, rst_i, wb_inta_o,
 
 	// to wb_slave
 	wire stat_avmp, stat_acmp, vmem_swint, clut_swint, hint, vint, sint;
+	wire wmb_busy;
 	reg luint;
 	wire [ 3: 0] cc0_adr_i, cc1_adr_i;
 
-	// from pixel generator
-	wire cgate; // composite gate signal
-	wire ihsync, ivsync, icsync, iblank; // intermediate horizontal/vertical/composite sync, intermediate blank
+	// pixel generator
+	wire        fb_data_fifo_rreq, fb_data_fifo_empty;
+	wire [31:0] fb_data_fifo_q;
+	wire        ImDoneFifoQ;
 
 	// line fifo connections
-	wire line_fifo_dpm_wreq, line_fifo_empty_rd;
-	wire [23:0] line_fifo_dpm_d, line_fifo_dpm_q;
+	wire        line_fifo_wreq, line_fifo_rreq, line_fifo_empty_rd;
+	wire [23:0] line_fifo_d, line_fifo_q;
 
 	// clut connections
 	wire        ext_clut_req, ext_clut_ack;

ParseResult:
INS HdlIdDef@@cursor_adr to objs
HdlIdDef: cursor_adr
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 8
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@wmb_busy to objs
HdlIdDef: wmb_busy
    HdlDirection: INTERNAL


CommitId: 6b5e57be543e4493d94418f7994f6b860cbb332f
Fixed some Wishbone RevB.3 related bugs.
--- a/rtl/verilog/vga_tgen.v
+++ b/rtl/verilog/vga_tgen.v
@@ -95,36 +103,37 @@ module vga_tgen(clk, rst, HSyncL, Thsync, Thgdel, Thgate, Thlen, VSyncL, Tvsync,
 	// hookup horizontal timing generator
 	vga_vtim hor_gen(
 		.clk(clk),
-		.ena(1'b1),
+		.ena(clk_ena),
 		.rst(rst),
 		.Tsync(Thsync),
 		.Tgdel(Thgdel),
 		.Tgate(Thgate),
 		.Tlen(Thlen),
-		.Sync(iHsync),
+		.Sync(hsync),
 		.Gate(Hgate),
-		.Done(Hdone));
+		.Done(Hdone)
+	);
 
 
 	// hookup vertical timing generator
+	wire vclk_ena = Hdone & clk_ena;
+
 	vga_vtim ver_gen(
 		.clk(clk),
-		.ena(Hdone),
+		.ena(vclk_ena),
 		.rst(rst),
 		.Tsync(Tvsync),
 		.Tgdel(Tvgdel),
 		.Tgate(Tvgate),
 		.Tlen(Tvlen),
-		.Sync(iVsync),
+		.Sync(vsync),
 		.Gate(Vgate),
-		.Done(eof));
+		.Done(eof)
+	);
 
 	// assign outputs
 	assign eol  = Hdone;
 	assign gate = Hgate & Vgate;
-
-	assign Hsync = iHsync ^ HSyncL;
-	assign Vsync = iVsync ^ VSyncL;
-	assign Csync = (iHsync | iVsync) ^ CSyncL;
-	assign Blank = !(gate ^ BlankL);
+	assign csync = hsync | vsync;
+	assign blank = ~gate;
 endmodule
ParseResult:
INS HdlIdDef@@vclk_ena to objs
HdlIdDef: vclk_ena
    HdlOp: AND
        list: ops
            HdlValueId: Hdone
            HdlValueId: clk_ena
    HdlDirection: INTERNAL

UPD HdlStmAssign@@ to 
    UPD HdlOp@@XOR to XOR
        MOV HdlOp@@OR to ops
        HdlOp: OR
            list: ops
                HdlValueId: iHsync
                HdlValueId: iVsync
        UPD HdlOp@@OR to OR
            UPD HdlValueId@@iHsync to hsync
            UPD HdlValueId@@iVsync to vsync
        DEL HdlValueId@@CSyncL from ops
        DEL list@@ops from XOR
    UPD HdlValueId@@Csync to csync
    DEL HdlOp@@XOR from 

UPD HdlStmAssign@@ to 
    UPD HdlOp@@NEG_LOG to NEG
    UPD HdlValueId@@Blank to blank
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlOp@@XOR to XOR
            MOV list@@ops to XOR
            list: ops
                HdlValueId: gate
                HdlValueId: BlankL
            DEL HdlValueId@@BlankL from ops
        DEL HdlOp@@XOR from ops
        DEL list@@ops from NEG_LOG

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: XOR
        list: ops
            HdlValueId: iHsync
            HdlValueId: HSyncL
    HdlValueId: Hsync

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: XOR
        list: ops
            HdlValueId: iVsync
            HdlValueId: VSyncL
    HdlValueId: Vsync


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/ro_cnt.v
+++ b/rtl/verilog/ro_cnt.v
@@ -40,7 +40,7 @@ module ro_cnt (clk, nReset, rst, cnt_en, go, done, d, q, id);
 			rci <= #1 1'b0;
 		else if (rst)
 			rci <= #1 1'b0;
-		else if (cnt_en)
+		else //if (cnt_en)
 			rci <= #1 (go | rci) & !rco;
 
 	assign nld = !go;

ParseResult:
UPD HdlStmIf@@body to body
    INS list@@elifs to body

UPD HdlStmAssign@@ to if_false

MOV HdlStmAssign@@ to 
HdlStmAssign
    HdlOp: AND
        list: ops
            HdlOp: OR
                list: ops
                    HdlValueId: go
                    HdlValueId: rci
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: rco
    HdlValueId: rci
    HdlValueInt: 1

UPD HdlStmIf@@body to body
    MOV tuple@@ to elifs
    tuple
        HdlValueId: rst
        HdlStmAssign
            HdlValueInt: 0
            HdlValueId: rci
            HdlValueInt: 1
    DEL HdlValueId@@cnt_en from 
    DEL tuple@@ from elifs
    DEL list@@elifs from body


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/wb_slave.vhd
+++ b/wb_slave.vhd
@@ -2,9 +2,9 @@
 -- file: wb_slave.vhd
 -- project: VGA/LCD controller
 -- author: Richard Herveille
--- rev 1.0 may 10th 2001
--- rev 1.1 june 3rd 2001. Changed WISHBONE ADR_I. Addresses are defined as byte-oriented, instead of databus independent.
---
+-- rev 1.0 May  10th, 2001
+-- rev 1.1 June  3rd, 2001. Changed WISHBONE ADR_I. Addresses are defined as byte-oriented, instead of databus independent.
+-- rev 1.2 July 15th, 2001. Added CLUT bank switching.
 
 library ieee;
 use ieee.std_logic_1164.all;

ParseResult:
INS HdlLibrary@@ieee to objs

DEL HdlLibrary@@ieee from objs


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/wb_slave.vhd
+++ b/wb_slave.vhd
@@ -27,18 +27,20 @@ entity wb_slave is
 		INTA_O : out std_logic;
 
 		-- control register settings
-		BL : out std_logic;
-		CSL : out std_logic;
-		VSL : out std_logic;
-		HSL : out std_logic;
-		PC : out std_logic;
-		CD : out std_logic_vector(1 downto 0);
-		VBL : out std_logic_vector(1 downto 0);
-		BSW : out std_logic;
-		Ven : out std_logic;
+		BL   : out std_logic;		                  -- blanking level
+		CSL  : out std_logic;                    -- composite sync level
+		VSL  : out std_logic;                    -- vsync level
+		HSL  : out std_logic;                    -- hsync level
+		PC   : out std_logic;                    -- pseudo color
+ 		CD   : out std_logic_vector(1 downto 0); -- color depth
+		VBL  : out std_logic_vector(1 downto 0); -- burst length
+		CBSW : out std_logic;                    -- clut bank switching enable
+		VBSW : out std_logic;                    -- video page bank switching enable
+		Ven  : out std_logic;                    -- video system enable
 
 		-- status register inputs
-		AMP : in std_logic; -- active memory page
+		AVMP,                -- active video memory page
+		ACMP : in std_logic; -- active clut page
 		bsint_in,
 		hint_in,
 		vint_in,

ParseResult:
UPD HdlIdDef@@BSW to CBSW

INS HdlIdDef@@VBSW to ports
HdlIdDef: VBSW
    HdlValueId: std_logic
    HdlDirection: OUT

UPD HdlIdDef@@AMP to AVMP

INS HdlIdDef@@ACMP to ports
HdlIdDef: ACMP
    HdlValueId: std_logic
    HdlDirection: IN


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/wb_slave.vhd
+++ b/wb_slave.vhd
@@ -58,8 +60,8 @@ entity wb_slave is
 		Tvlen : out unsigned(15 downto 0);
 
 		VBARa,
-		VBARb,
-		CBAR : buffer unsigned(31 downto 2)
+		VBARb : buffer unsigned(31 downto  2);
+		CBAR  : buffer unsigned(31 downto 11)
 );
 end entity wb_slave;
 

ParseResult:
UPD HdlIdDef@@CBAR to CBAR
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@2 to 11


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/wb_slave.vhd
+++ b/wb_slave.vhd
@@ -103,7 +105,7 @@ begin
 					when "100" => hvlen <= DAT_I;
 					when "101" => VBARa <= unsigned(DAT_I(31 downto 2));
 					when "110" => VBARb <= unsigned(DAT_I(31 downto 2));
-					when "111" => CBAR <= (unsigned(DAT_I(31 downto 10)) & "00000000");
+					when "111" => CBAR  <= unsigned(DAT_I(31 downto 11));
 
 					when others => null; -- should never happen
 				end case;

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: unsigned
                HdlOp: INDEX
                    list: ops
                        HdlValueId: DAT_I
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 31
                                HdlValueInt: 10
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    UPD HdlValueInt@@10 to 11
        DEL str@@ from ops
        DEL list@@ops from CONCAT
    DEL HdlOp@@CONCAT from 


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/wb_slave.vhd
+++ b/wb_slave.vhd
@@ -120,12 +122,13 @@ begin
 			if (RST_I = '1') then
 				stat <= (others => '0');
 			else
-				stat(16) <= AMP;
-				stat(6) <= bsint_in or (stat(6) and not (reg_acc and WE_I and DAT_I(6)) );
-				stat(5) <= hint_in  or (stat(5) and not (reg_acc and WE_I and DAT_I(5)) );
-				stat(4) <= vint_in  or (stat(4) and not (reg_acc and WE_I and DAT_I(4)) );
-				stat(1) <= luint_in or (stat(1) and not (reg_acc and WE_I and DAT_I(1)) );
-				stat(0) <= sint_in  or (stat(0) and not (reg_acc and WE_I and DAT_I(0)) );
+				stat(17) <= ACMP;
+				stat(16) <= AVMP;
+				stat( 6) <= bsint_in or (stat(6) and not (reg_acc and WE_I and DAT_I(6)) );
+				stat( 5) <= hint_in  or (stat(5) and not (reg_acc and WE_I and DAT_I(5)) );
+				stat( 4) <= vint_in  or (stat(4) and not (reg_acc and WE_I and DAT_I(4)) );
+				stat( 1) <= luint_in or (stat(1) and not (reg_acc and WE_I and DAT_I(1)) );
+				stat( 0) <= sint_in  or (stat(0) and not (reg_acc and WE_I and DAT_I(0)) );
 			end if;
 		end if;
 	end process gen_stat;

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: ACMP
    HdlOp: INDEX
        list: ops
            HdlValueId: stat
            HdlValueInt: 17

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@AMP to AVMP


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/wb_slave.vhd
+++ b/wb_slave.vhd
@@ -138,7 +141,8 @@ begin
 	PC   <= ctrl(11);
 	CD   <= ctrl(10 downto 9);
 	VBL  <= ctrl(8 downto 7);
-	BSW  <= ctrl(4);
+	CBSW <= ctrl(5);
+	VBSW <= ctrl(4);
 	BSIE <= ctrl(3);
 	HIE  <= ctrl(2);
 	VIE  <= ctrl(1);

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: ctrl
            HdlValueInt: 5
    HdlValueId: CBSW

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@BSW to VBSW


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/wb_slave.vhd
+++ b/wb_slave.vhd
@@ -173,7 +177,7 @@ begin
 		         hvlen when "100",
 		         std_logic_vector(VBARa & "00") when "101",
 		         std_logic_vector(VBARb & "00") when "110",
-		         std_logic_vector(CBAR & "00")  when others;
+		         std_logic_vector(CBAR & ACMP & "0000000000")  when others;
 
 	-- generate interrupt request signal
 	INTA_O <= (HINT and HIE) or (VINT and VIE) or (BSINT and BSIE) or LUINT or SINT;
ParseResult:
UPD HdlStmAssign@@default to default
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@CONCAT to CONCAT
            MOV HdlValueId@@CBAR to ops
            HdlValueId: CBAR


CommitId: f5c55e4e7b06e70c9c8c3ce088790b5c29130937
Changed video timing generator.
--- a/rtl/verilog/vga_vtim.v
+++ b/rtl/verilog/vga_vtim.v
@@ -74,7 +79,6 @@ module vga_vtim(clk, ena, rst, Tsync, Tgdel, Tgate, Tlen, Sync, Gate, Done);
 
 	wire Dsync, Dgdel, Dgate, Dlen;
 	reg go, drst;
-	reg hDlen, hDgate;
 
 	//
 	// module body

ParseResult:
DEL HdlIdDef@@hDlen from objs
HdlIdDef: hDlen
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

DEL HdlIdDef@@hDgate from objs
HdlIdDef: hDgate
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL


CommitId: f5c55e4e7b06e70c9c8c3ce088790b5c29130937
Changed video timing generator.
--- a/rtl/verilog/vga_vtim.v
+++ b/rtl/verilog/vga_vtim.v
@@ -84,13 +88,13 @@ module vga_vtim(clk, ena, rst, Tsync, Tgdel, Tgate, Tlen, Sync, Gate, Done);
 	always@(posedge clk)
 		if (rst)
 			begin
-				go <= 1'b0;
-				drst <= 1'b1;
+				go   <= #1 1'b0;
+				drst <= #1 1'b1;
 			end
-		else if (ena)
+		else // if (ena)
 			begin
-				go <= Dlen | hDlen | (!rst & drst);
-				drst <= rst;
+				go   <= #1 Dlen | (!rst & drst);
+				drst <= #1 rst;
 			end
 
 	// hookup sync counter

ParseResult:
UPD HdlStmIf@@body to body
    INS list@@elifs to body

UPD HdlStmIf@@body to body
    MOV HdlStmBlock@@SEQ to 
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: OR
                    list: ops
                        HdlOp: OR
                            list: ops
                                HdlValueId: Dlen
                                HdlValueId: hDlen
                        HdlOp: AND
                            list: ops
                                HdlOp: NEG_LOG
                                    list: ops
                                        HdlValueId: rst
                                HdlValueId: drst
                HdlValueId: go
            HdlStmAssign
                HdlValueId: rst
                HdlValueId: drst
    DEL HdlValueId@@ena from 
    DEL tuple@@ from elifs
    DEL list@@elifs from body

UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR to OR
        UPD HdlOp@@OR to OR
            MOV HdlValueId@@Dlen to ops
            HdlValueId: Dlen
            DEL HdlValueId@@hDlen from ops
            DEL list@@ops from OR
        DEL HdlOp@@OR from ops


CommitId: f5c55e4e7b06e70c9c8c3ce088790b5c29130937
Changed video timing generator.
--- a/rtl/verilog/vga_vtim.v
+++ b/rtl/verilog/vga_vtim.v
@@ -145,32 +149,18 @@ module vga_vtim(clk, ena, rst, Tsync, Tgdel, Tgate, Tlen, Sync, Gate, Done);
 			.done(Dlen)
 		);
 
-	// hold dgate signal
-	always@(posedge clk)
-		if (rst)
-			hDgate <= 1'b0;
-		else
-			hDgate <= (Dgate | hDgate) & Gate;
-
-	// hold dlen signal
-	always@(posedge clk)
-		if (rst)
-			hDlen <= 1'b0;
-		else
-			hDlen <= (Dlen | hDlen) & !go;
-
 	// generate output signals
 	always@(posedge clk)
 		if (rst)
-			Sync <= 1'b0;
+			Sync <= #1 1'b0;
 		else
-			Sync <= (go | Sync) & !Dsync;
+			Sync <= #1 (go | Sync) & !Dsync;
 
 	always@(posedge clk)
 		if (rst)
-			Gate <= 1'b0;
+			Gate <= #1 1'b0;
 		else
-			Gate <= (Dgdel | Gate) & !( (Dgate | hDgate) & ena);
+			Gate <= #1 (Dgdel | Gate) & !Dgate;
 
 	assign Done = Dlen;
 endmodule
ParseResult:
UPD HdlStmAssign@@if_true to if_true
    INS HdlValueInt@@1 to if_true

UPD HdlStmAssign@@if_false to if_false
    INS HdlValueInt@@1 to if_false

UPD HdlStmAssign@@if_true to if_true
    INS HdlValueInt@@1 to if_true

UPD HdlStmAssign@@if_false to if_false
    INS HdlValueInt@@1 to if_false

UPD HdlStmAssign@@if_false to if_false
    UPD HdlOp@@AND to AND
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlOp@@AND to AND
                UPD HdlOp@@OR to OR
                    MOV list@@ops to OR
                    list: ops
                        HdlValueId: Dgate
                        HdlValueId: hDgate
                    DEL HdlValueId@@hDgate from ops
                DEL HdlOp@@OR from ops
                DEL HdlValueId@@ena from ops
                DEL list@@ops from AND
            DEL HdlOp@@AND from ops
            DEL list@@ops from NEG_LOG

DEL HdlStmProcess@@ from objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk
    HdlStmIf: body
        HdlValueId: rst
        HdlStmAssign: if_true
            HdlValueInt: 0
            HdlValueId: hDgate
        list: elifs
        HdlStmAssign: if_false
            HdlOp: AND
                list: ops
                    HdlOp: OR
                        list: ops
                            HdlValueId: Dgate
                            HdlValueId: hDgate
                    HdlValueId: Gate
            HdlValueId: hDgate

DEL HdlStmProcess@@ from objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk
    HdlStmIf: body
        HdlValueId: rst
        HdlStmAssign: if_true
            HdlValueInt: 0
            HdlValueId: hDlen
        list: elifs
        HdlStmAssign: if_false
            HdlOp: AND
                list: ops
                    HdlOp: OR
                        list: ops
                            HdlValueId: Dlen
                            HdlValueId: hDlen
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: go
            HdlValueId: hDlen


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_vtim.v
+++ b/rtl/verilog/vga_vtim.v
@@ -31,6 +31,7 @@ module vga_vtim(clk, ena, rst, Tsync, Tgdel, Tgate, Tlen, Sync, Gate, Done);
 
 	wire Dsync, Dgdel, Dgate, Dlen;
 	reg go, drst;
+	reg hDlen, hDgate;
 
 	//
 	// module body

ParseResult:
INS HdlIdDef@@hDlen to objs
HdlIdDef: hDlen
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

INS HdlIdDef@@hDgate to objs
HdlIdDef: hDgate
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_vtim.v
+++ b/rtl/verilog/vga_vtim.v
@@ -45,7 +46,7 @@ module vga_vtim(clk, ena, rst, Tsync, Tgdel, Tgate, Tlen, Sync, Gate, Done);
 			end
 		else if (ena)
 			begin
-				go <= Dlen | (!rst & drst);
+				go <= Dlen | hDlen | (!rst & drst);
 				drst <= rst;
 			end
 

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR to OR
        INS HdlOp@@OR to ops
        UPD HdlOp@@OR to OR
            INS list@@ops to OR
            INS HdlValueId@@hDlen to ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR to OR
        MOV HdlValueId@@Dlen to ops
        HdlValueId: Dlen


CommitId: 6a53adb05046cdd897c259288445cdc73eed5273
Major bug fixes in Wishbone Master and ColorProcessor blocks.
--- a/wb_master.vhd
+++ b/wb_master.vhd
@@ -107,7 +111,7 @@ architecture structural of wb_master is
 	end component colproc;
 
 	signal nVen : std_logic;                                                 -- NOT ctrl_Ven (video enable)
-	signal vmem_acc, dvmem_acc, bvmem_acc, clut_acc, dclut_acc : std_logic;  -- video memory access // delayed vmem_acc // video memory burst // clut access
+	signal vmem_acc, clut_acc : std_logic;                                   -- video memory access // clut access
 	signal clut_req, clut_ack : std_logic;                                   -- clut access request // clut access acknowledge
 	signal clut_offs : unsigned(7 downto 0);                                 -- clut memory offset
 	signal nvmem_req, vmem_ack : std_logic;                                  -- NOT video memory access request // video memory access acknowledge

ParseResult:
DEL HdlIdDef@@dvmem_acc from objs
HdlIdDef: dvmem_acc
    HdlValueId: std_logic
    HdlDirection: INTERNAL

DEL HdlIdDef@@bvmem_acc from objs
HdlIdDef: bvmem_acc
    HdlValueId: std_logic
    HdlDirection: INTERNAL

DEL HdlIdDef@@dclut_acc from objs
HdlIdDef: dclut_acc
    HdlValueId: std_logic
    HdlDirection: INTERNAL


CommitId: cad81739c16fa2507e6686ee711b5d4642f94142
1) Rewrote vga_fifo_dc. It now uses gray codes and a more elaborate anti-metastability scheme.
--- a/rtl/verilog/vga_wb_master.v
+++ b/rtl/verilog/vga_wb_master.v
@@ -437,8 +442,8 @@ module vga_wb_master (clk_i, rst_i, nrst_i,
 
 	//
 	// video-data buffer (temporary store data read from video memory)
-	wire [3:0] fb_data_fifo_nword;
-	wire       fb_data_fifo_full;
+	wire [4:0] fb_data_fifo_nword;
+//	wire       fb_data_fifo_full;
 
 	vga_fifo #(4, 32) data_fifo (
 		.clk    ( clk_i              ),

ParseResult:
INS HdlIdDef@@fb_data_fifo_nword to objs
HdlIdDef: fb_data_fifo_nword
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 4
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@fb_data_fifo_nword from objs
HdlIdDef: fb_data_fifo_nword
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 3
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@fb_data_fifo_full from objs
HdlIdDef: fb_data_fifo_full
    HdlDirection: INTERNAL


CommitId: cad81739c16fa2507e6686ee711b5d4642f94142
1) Rewrote vga_fifo_dc. It now uses gray codes and a more elaborate anti-metastability scheme.
--- a/rtl/verilog/vga_wb_master.v
+++ b/rtl/verilog/vga_wb_master.v
@@ -450,12 +455,11 @@ module vga_wb_master (clk_i, rst_i, nrst_i,
 		.rreq   ( fb_data_fifo_rreq  ),
 		.nword  ( fb_data_fifo_nword ),
 		.empty  ( fb_data_fifo_empty ),
-		.full   ( fb_data_fifo_full  ),
+		.full   ( ),//fb_data_fifo_full  ),
 		.aempty ( ),
 		.afull  ( )
 	);
 
-//	assign vmem_req = ~(fb_data_fifo_nword[3] | fb_data_fifo_full);
-	assign vmem_req = ~fb_data_fifo_nword[3];
+	assign vmem_req = ~fb_data_fifo_nword[4] & ~fb_data_fifo_nword[3];
 
 endmodule
ParseResult:
UPD HdlStmAssign@@ to 
    MOV HdlOp@@NEG to 
    HdlOp: NEG
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: fb_data_fifo_nword
                    HdlValueInt: 3


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_csm_pb.v
+++ b/rtl/verilog/vga_csm_pb.v
@@ -1,16 +1,14 @@
 //
-// Wishbone compliant cycle shared memory, priority based selection
+// Cycle shared memory, priority based selection (port0 has higher priority than port1)
 // author: Richard Herveille
 // 
-// rev.: 1.0  August 13th, 2001. Initial Verilog release
-//
+// rev.: 1.0  August  13th, 2001. Initial Verilog release
+// rev.: 1.1  October  2nd, 2001. Removed wishbone interface
 // 
 
 `include "timescale.v"
 
-module vga_csm_pb (wb_clk_i, wb_rst_i, rst_nreset_i,
-		wb_adr0_i, wb_dat0_i, wb_dat0_o, wb_sel0_i, wb_we0_i, wb_stb0_i, wb_cyc0_i, wb_ack0_o, wb_err0_o,
-		wb_adr1_i, wb_dat1_i, wb_dat1_o, wb_sel1_i, wb_we1_i, wb_stb1_i, wb_cyc1_i, wb_ack1_o, wb_err1_o );
+module vga_csm_pb (clk_i, req0_i, ack0_o, adr0_i, dat0_i, dat0_o, we0_i, req1_i, ack1_o, adr1_i, dat1_i, dat1_o, we1_i);
 		
 	//
 	// parameters

ParseResult:
MOV HdlIdDef@@wb_dat0_i to ports
HdlIdDef: wb_dat0_i
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DWIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: IN

MOV HdlIdDef@@wb_dat1_i to ports
HdlIdDef: wb_dat1_i
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlValueId: DWIDTH
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: IN

UPD HdlIdDef@@wb_clk_i to clk_i

UPD HdlIdDef@@wb_rst_i to req0_i

UPD HdlIdDef@@rst_nreset_i to ack0_o

UPD HdlIdDef@@wb_adr0_i to adr0_i

UPD HdlIdDef@@wb_dat0_o to dat0_i

UPD HdlIdDef@@wb_dat0_i to dat0_o

UPD HdlIdDef@@wb_we0_i to we0_i

UPD HdlIdDef@@wb_stb0_i to req1_i

UPD HdlIdDef@@wb_ack0_o to ack1_o

UPD HdlIdDef@@wb_adr1_i to adr1_i

UPD HdlIdDef@@wb_dat1_o to dat1_i

UPD HdlIdDef@@wb_dat1_i to dat1_o

UPD HdlIdDef@@wb_we1_i to we1_i

UPD HdlIdDef@@rst_nreset_i to rst_nreset_i
    UPD HdlDirection@@IN to OUT

UPD HdlIdDef@@wb_dat0_o to wb_dat0_o
    UPD HdlDirection@@OUT to IN

UPD HdlIdDef@@wb_dat0_i to wb_dat0_i
    UPD HdlDirection@@IN to OUT

UPD HdlIdDef@@wb_dat1_o to wb_dat1_o
    UPD HdlDirection@@OUT to IN

UPD HdlIdDef@@wb_dat1_i to wb_dat1_i
    UPD HdlDirection@@IN to OUT

DEL HdlIdDef@@wb_sel0_i from ports
HdlIdDef: wb_sel0_i
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DWIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: IN

DEL HdlIdDef@@wb_cyc0_i from ports
HdlIdDef: wb_cyc0_i
    HdlDirection: IN

DEL HdlIdDef@@wb_err0_o from ports
HdlIdDef: wb_err0_o
    HdlDirection: OUT

DEL HdlIdDef@@wb_sel1_i from ports
HdlIdDef: wb_sel1_i
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlOp: SUB
                        list: ops
                            HdlOp: DIV
                                list: ops
                                    HdlValueId: DWIDTH
                                    HdlValueInt: 8
                            HdlValueInt: 1
                    HdlValueInt: 0
    HdlDirection: IN

DEL HdlIdDef@@wb_stb1_i from ports
HdlIdDef: wb_stb1_i
    HdlDirection: IN

DEL HdlIdDef@@wb_cyc1_i from ports
HdlIdDef: wb_cyc1_i
    HdlDirection: IN

DEL HdlIdDef@@wb_ack1_o from ports
HdlIdDef: wb_ack1_o
    HdlDirection: OUT

DEL HdlIdDef@@wb_err1_o from ports
HdlIdDef: wb_err1_o
    HdlDirection: OUT


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_csm_pb.v
+++ b/rtl/verilog/vga_csm_pb.v
@@ -117,19 +92,12 @@ module vga_csm_pb (wb_clk_i, wb_rst_i, rst_nreset_i,
 	);
 
 	// assign DAT_O outputs
-	assign wb_dat0_o = mem_q;
-	assign wb_dat1_o = mem_q;
-
-	// generate ack signals
-	assign wb0_ack = ( (sel_wb0 && wb_we0_i) || ack0 );
-	assign wb1_ack = ( (sel_wb1 && wb_we1_i) || ack1 );
+	assign dat0_o = mem_q;
+	assign dat1_o = mem_q;
 
-	// ACK outputs
-	assign wb_ack0_o = wb0_ack;
-	assign wb_ack1_o = wb1_ack;
+	// generate ack outputs
+	assign ack0_o = ( (sel0 && we0_i) || ack0 );
+	assign ack1_o = ( (sel1 && we1_i) || ack1 );
+endmodule
 
-	// ERR outputs
-	assign wb_err0_o = !(&wb_sel0_i) && wb_cyc0_i && wb_stb0_i;
-	assign wb_err1_o = !(&wb_sel1_i) && wb_cyc1_i && wb_stb1_i;
 
-endmodule
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlValueId@@wb_dat0_o to dat0_o

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@wb_dat1_o to dat1_o

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@wb0_ack to ack0_o
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@sel_wb0 to sel0
            UPD HdlValueId@@wb_we0_i to we0_i

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@wb1_ack to ack1_o
    UPD HdlOp@@OR_LOG to OR_LOG
        UPD HdlOp@@AND_LOG to AND_LOG
            UPD HdlValueId@@sel_wb1 to sel1
            UPD HdlValueId@@wb_we1_i to we1_i

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlValueId: wb0_ack
    HdlValueId: wb_ack0_o

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlValueId: wb1_ack
    HdlValueId: wb_ack1_o

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlOp: AND_UNARY
                                list: ops
                                    HdlValueId: wb_sel0_i
                    HdlValueId: wb_cyc0_i
            HdlValueId: wb_stb0_i
    HdlValueId: wb_err0_o

DEL HdlStmAssign@@ from objs
HdlStmAssign
    HdlOp: AND_LOG
        list: ops
            HdlOp: AND_LOG
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlOp: AND_UNARY
                                list: ops
                                    HdlValueId: wb_sel1_i
                    HdlValueId: wb_cyc1_i
            HdlValueId: wb_stb1_i
    HdlValueId: wb_err1_o


CommitId: 3a123759abaf9bc4638b781590368567c03f3ef0
Added hardware cursor support to wishbone master.
--- a/rtl/verilog/vga_wb_master.v
+++ b/rtl/verilog/vga_wb_master.v
@@ -163,8 +166,17 @@ module vga_wb_master (clk_i, rst_i, nrst_i, cyc_o, stb_o, cab_o, we_o, adr_o, se
 
 	wire [7:0] clut_offs; // color lookup table offset
 
-	reg [8:0] cursor_adr;
-	reg       cursor0_we, cursor1_we;
+	//
+	// hardware cursors
+	reg [31:11] cursor_ba;              // cursor pattern base address
+	reg [ 8: 0] cursor_adr;             // cursor pattern offset
+	wire        cursor0_we, cursor1_we; // cursor buffers write_request
+	reg         ld_cursor0, ld_cursor1; // reload cursor0, cursor1
+	reg         cur_acc;                // cursor processors request memory access
+	reg         cur_acc_sel;            // which cursor to reload
+	wire        cur_ack;                // cursor processor memory access acknowledge
+	wire        cur_done;               // done reading cursor pattern
+
 
 	//
 	// module body

ParseResult:
INS HdlIdDef@@cursor_ba to objs
HdlIdDef: cursor_ba
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 11
    HdlDirection: INTERNAL


CommitId: 3a123759abaf9bc4638b781590368567c03f3ef0
Added hardware cursor support to wishbone master.
--- a/rtl/verilog/vga_wb_master.v
+++ b/rtl/verilog/vga_wb_master.v
@@ -218,6 +239,7 @@ module vga_wb_master (clk_i, rst_i, nrst_i, cyc_o, stb_o, cab_o, we_o, adr_o, se
 		.full()
 	);
 
+	//
 	// clut bank switch / cursor data delay2: Account for ColorProcessor DataBuffer delay
 	always@(posedge clk_i)
 		if (sclr)

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    MOV HdlOp@@AND to if_false
    HdlOp: AND
        list: ops
            HdlOp: OR
                list: ops
                    HdlOp: NEG_LOG
                        list: ops
                            HdlValueId: nvmem_req
                    HdlOp: AND
                        list: ops
                            HdlValueId: vmem_acc
                            HdlOp: NEG_LOG
                                list: ops
                                    HdlOp: AND
                                        list: ops
                                            HdlValueId: burst_done
                                            HdlValueId: vmem_ack
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: ImDone


CommitId: 3a123759abaf9bc4638b781590368567c03f3ef0
Added hardware cursor support to wishbone master.
--- a/rtl/verilog/vga_wb_master.v
+++ b/rtl/verilog/vga_wb_master.v
@@ -239,9 +261,11 @@ module vga_wb_master (clk_i, rst_i, nrst_i, cyc_o, stb_o, cab_o, we_o, adr_o, se
 		else if (ctrl_cbsw)
 			stat_acmp <= #1 stat_acmp ^ clut_switch;  // select next clut when finished reading clut for current video bank (and bank switch enabled)
 
+	//
 	// generate clut-address
 	assign clut_adr = {stat_acmp, clut_offs};
 
+	//
 	// generate burst counter
 	wire [3:0] burst_cnt_val;
 	assign burst_cnt_val = {1'b0, burst_cnt} -4'h1;

ParseResult:
UPD HdlStmAssign@@if_false to if_false
    INS HdlOp@@AND to if_false
    UPD HdlOp@@AND to AND
        INS list@@ops to AND
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: cur_acc


CommitId: 3a123759abaf9bc4638b781590368567c03f3ef0
Added hardware cursor support to wishbone master.
--- a/rtl/verilog/vga_wb_master.v
+++ b/rtl/verilog/vga_wb_master.v
@@ -391,6 +458,7 @@ module vga_wb_master (clk_i, rst_i, nrst_i, cyc_o, stb_o, cab_o, we_o, adr_o, se
 					we_o  <= #1 1'b0;      // read only
 				end
 
+	//
 	// video-data buffer (temporary store data read from video memory)
 	vga_fifo #(4, 32) data_fifo (
 		.clk(clk_i),

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_i
    HdlStmIf: body
        HdlValueId: ImDone
        HdlStmAssign: if_true
            HdlValueId: ld_cursor0
            HdlValueId: cur_acc_sel
            HdlValueInt: 1
        list: elifs

INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_i
    HdlStmIf: body
        HdlValueId: sclr
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: ld_cursor0
                    HdlValueInt: 1
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: ld_cursor1
                    HdlValueInt: 1
        list: elifs
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlOp: OR
                        list: ops
                            HdlValueId: cursor0_ld
                            HdlOp: AND
                                list: ops
                                    HdlValueId: ld_cursor0
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlOp: AND
                                                list: ops
                                                    HdlValueId: cur_done
                                                    HdlValueId: cur_acc_sel
                    HdlValueId: ld_cursor0
                    HdlValueInt: 1
                HdlStmAssign
                    HdlOp: OR
                        list: ops
                            HdlValueId: cursor1_ld
                            HdlOp: AND
                                list: ops
                                    HdlValueId: ld_cursor1
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlOp: AND
                                                list: ops
                                                    HdlValueId: cur_done
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: cur_acc_sel
                    HdlValueId: ld_cursor1
                    HdlValueInt: 1


CommitId: 3a123759abaf9bc4638b781590368567c03f3ef0
Added hardware cursor support to wishbone master.
--- a/rtl/verilog/vga_wb_master.v
+++ b/rtl/verilog/vga_wb_master.v
@@ -407,7 +475,7 @@ module vga_wb_master (clk_i, rst_i, nrst_i, cyc_o, stb_o, cab_o, we_o, adr_o, se
 
 	assign nvmem_req = data_fifo_hfull;
 
-
+	//
 	// hookup color processor
 	vga_colproc color_proc (
 		.clk(clk_i),

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_i
    HdlStmIf: body
        HdlValueId: sclr
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: ld_cursor0
                    HdlValueInt: 1
                HdlStmAssign
                    HdlValueInt: 0
                    HdlValueId: ld_cursor1
                    HdlValueInt: 1
        list: elifs
        HdlStmBlock: SEQ
            list: body
                HdlStmAssign
                    HdlOp: OR
                        list: ops
                            HdlValueId: cursor0_ld
                            HdlOp: AND
                                list: ops
                                    HdlValueId: ld_cursor0
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlOp: AND
                                                list: ops
                                                    HdlValueId: cur_done
                                                    HdlValueId: cur_acc_sel
                    HdlValueId: ld_cursor0
                    HdlValueInt: 1
                HdlStmAssign
                    HdlOp: OR
                        list: ops
                            HdlValueId: cursor1_ld
                            HdlOp: AND
                                list: ops
                                    HdlValueId: ld_cursor1
                                    HdlOp: NEG_LOG
                                        list: ops
                                            HdlOp: AND
                                                list: ops
                                                    HdlValueId: cur_done
                                                    HdlOp: NEG_LOG
                                                        list: ops
                                                            HdlValueId: cur_acc_sel
                    HdlValueId: ld_cursor1
                    HdlValueInt: 1

INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk_i
    HdlStmIf: body
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: cur_acc
        HdlStmAssign: if_true
            HdlOp: TERNARY
                list: ops
                    HdlValueId: ld_cursor0
                    HdlValueId: cursor0_ba
                    HdlValueId: cursor1_ba
            HdlValueId: cursor_ba
            HdlValueInt: 1
        list: elifs


CommitId: 3a123759abaf9bc4638b781590368567c03f3ef0
Added hardware cursor support to wishbone master.
--- a/rtl/verilog/vga_wb_master.v
+++ b/rtl/verilog/vga_wb_master.v
@@ -428,31 +496,28 @@ module vga_wb_master (clk_i, rst_i, nrst_i, cyc_o, stb_o, cab_o, we_o, adr_o, se
 		.clut_q(clut_q)
 	);
 
+	//
 	// hookup data-source-selector && hardware cursor module
 `ifdef VGA_HWC1	// generate Hardware Cursor1 (if enabled)
-	reg scursor1_ld;
+	wire cursor1_ld_strb;
 	reg scursor1_en;
 	reg scursor1_res;
 	reg [31:0] scursor1_xy;
 
-	always@(posedge clk_i)
-		if (sclr)
-			scursor1_ld <= #1 1'b0;
-		else
-			scursor1_ld <= #1 cursor1_ld | (scursor1_ld & !(ddImDoneFifoQ & !dImDoneFifoQ));
+	assign cursor1_ld_strb = ddImDoneFifoQ & !dImDoneFifoQ;
 
 	always@(posedge clk_i)
 		if (sclr)
 			scursor1_en <= #1 1'b0;
-		else if (scursor1_ld)
+		else if (cursor1_ld_strb)
 			scursor1_en <= #1 cursor1_en;
 
 	always@(posedge clk_i)
-		if (scursor1_ld)
+		if (cursor1_ld_strb)
 			scursor1_xy <= #1 cursor1_xy;
 
 	always@(posedge clk_i)
-		if (scursor1_ld)
+		if (cursor1_ld_strb)
 			scursor1_res <= #1 cursor1_res;
 
 	vga_curproc hw_cursor1 (

ParseResult:
INS HdlStmAssign@@ to objs

UPD HdlStmAssign@@ to 
    MOV HdlOp@@CONCAT to 
    HdlOp: CONCAT
        list: ops
            HdlValueId: vmemA
            HdlValueInt: 00
    DEL HdlValueId@@adr_o from 

UPD HdlIdDef@@wb_cycle to wb_cycle
    MOV HdlOp@@AND to wb_cycle
    HdlOp: AND
        list: ops
            HdlOp: AND
                list: ops
                    HdlValueId: vmem_acc
                    HdlOp: NEG_LOG
                        list: ops
                            HdlOp: AND
                                list: ops
                                    HdlOp: AND
                                        list: ops
                                            HdlValueId: burst_done
                                            HdlValueId: vmem_ack
                                    HdlValueId: nvmem_req
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: ImDone

DEL HdlStmAssign@@ from objs


CommitId: 3a123759abaf9bc4638b781590368567c03f3ef0
Added hardware cursor support to wishbone master.
--- a/rtl/verilog/vga_wb_master.v
+++ b/rtl/verilog/vga_wb_master.v
@@ -503,29 +567,25 @@ module vga_wb_master (clk_i, rst_i, nrst_i, cyc_o, stb_o, cab_o, we_o, adr_o, se
 
 
 `ifdef VGA_HWC0	// generate Hardware Cursor0 (if enabled)
-	reg scursor0_ld;
+	wire cursor0_ld_strb;
 	reg scursor0_en;
 	reg scursor0_res;
 	reg [31:0] scursor0_xy;
 
-	always@(posedge clk_i)
-		if (sclr)
-			scursor0_ld <= #1 1'b0;
-		else
-			scursor0_ld <= #1 cursor0_ld | (scursor0_ld & !(sddImDoneFifoQ & !sdImDoneFifoQ));
+	assign cursor0_ld_strb = sddImDoneFifoQ & !sdImDoneFifoQ;
 
 	always@(posedge clk_i)
 		if (sclr)
 			scursor0_en <= #1 1'b0;
-		else if (scursor0_ld)
+		else if (cursor0_ld_strb)
 			scursor0_en <= #1 cursor0_en;
 
 	always@(posedge clk_i)
-		if (scursor0_ld)
+		if (cursor0_ld_strb)
 			scursor0_xy <= #1 cursor0_xy;
 
 	always@(posedge clk_i)
-		if (scursor0_ld)
+		if (cursor0_ld_strb)
 			scursor0_res <= #1 cursor0_res;
 
 	vga_curproc hw_cursor0 (

ParseResult:
UPD HdlStmAssign@@ to 
    INS HdlOp@@TERNARY to 
    INS HdlValueId@@adr_o to 
    UPD HdlOp@@TERNARY to TERNARY
        INS list@@ops to TERNARY
        INS HdlValueId@@cur_acc to ops
        INS HdlOp@@CONCAT to ops
        HdlOp: CONCAT
            list: ops
                HdlOp: CONCAT
                    list: ops
                        HdlValueId: cursor_ba
                        HdlValueId: cursor_adr
                HdlValueInt: 00

UPD HdlIdDef@@wb_cycle to wb_cycle
    INS HdlOp@@OR_LOG to wb_cycle
    UPD HdlOp@@OR_LOG to OR_LOG
        INS list@@ops to OR_LOG
        INS HdlOp@@AND to ops
        HdlOp: AND
            list: ops
                HdlValueId: cur_acc
                HdlOp: NEG_LOG
                    list: ops
                        HdlValueId: cur_done


CommitId: 3a123759abaf9bc4638b781590368567c03f3ef0
Added hardware cursor support to wishbone master.
--- a/rtl/verilog/vga_curproc.v
+++ b/rtl/verilog/vga_curproc.v
@@ -106,10 +109,9 @@ module vga_curproc (clk, rst_i, Thgate, Tvgate, idat, idat_wreq,
 	reg  [15:0] xcnt, ycnt;
 	wire        xdone, ydone;
 	wire [15:0] cursor_x, cursor_y;
-	reg         alpha, dalpha;
-	wire        cursor_alpha;
-	reg  [ 4:0] r, g, b, dr, dg, db;
-	wire [ 7:0] cursor_r, cursor_g, cursor_b;
+	wire        cursor_isalpha;
+	reg  [15:0] cdat, dcdat;
+	wire [ 7:0] cursor_r, cursor_g, cursor_b, cursor_alpha;
 	reg         inbox_x, inbox_y;
 	wire        inbox;
 	reg         dinbox, ddinbox, dddinbox;

ParseResult:
UPD HdlIdDef@@cursor_alpha to cursor_isalpha

UPD HdlIdDef@@r to cdat

UPD HdlIdDef@@dr to dcdat

INS HdlIdDef@@cursor_alpha to objs
HdlIdDef: cursor_alpha
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: INTERNAL

UPD HdlIdDef@@r to r
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@4 to 15

UPD HdlIdDef@@dr to dr
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@4 to 15

DEL HdlIdDef@@alpha from objs
HdlIdDef: alpha
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

DEL HdlIdDef@@dalpha from objs
HdlIdDef: dalpha
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

DEL HdlIdDef@@g from objs
HdlIdDef: g
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 4
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@b from objs
HdlIdDef: b
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 4
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@dg from objs
HdlIdDef: dg
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 4
                    HdlValueInt: 0
    HdlDirection: INTERNAL

DEL HdlIdDef@@db from objs
HdlIdDef: db
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 4
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: 3a123759abaf9bc4638b781590368567c03f3ef0
Added hardware cursor support to wishbone master.
--- a/rtl/verilog/vga_curproc.v
+++ b/rtl/verilog/vga_curproc.v
@@ -200,20 +202,10 @@ module vga_curproc (clk, rst_i, Thgate, Tvgate, idat, idat_wreq,
 	// decode cursor data for 32x32x16bpp mode
 	always@(posedge clk)
 		if (didat_wreq)
-			begin
-				alpha <= #1 dcbuf_ra[0] ? cbuf_q[31]    : cbuf_q[15];
-				r     <= #1 dcbuf_ra[0] ? cbuf_q[30:26] : cbuf_q[14:10];
-				g     <= #1 dcbuf_ra[0] ? cbuf_q[25:21] : cbuf_q[ 9: 5];
-				b     <= #1 dcbuf_ra[0] ? cbuf_q[20:16] : cbuf_q[ 4: 0];
-			end
+			cdat <= #1 dcbuf_ra[0] ? cbuf_q[31:16] : cbuf_q[15:0];
 
 	always@(posedge clk)
-		begin
-			dalpha <= #1 alpha;
-			dr     <= #1 r;
-			dg     <= #1 g;
-			db     <= #1 b;
-		end
+		dcdat <= #1 cdat;
 
 	//
 	// decode cursor data for 64x64x4bpp mode

ParseResult:
UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk

UPD HdlStmAssign@@ to body

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: r
    HdlValueId: dr
    HdlValueInt: 1

UPD HdlStmAssign@@ to if_true

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dcbuf_ra
                    HdlValueInt: 0
            HdlOp: INDEX
                list: ops
                    HdlValueId: cbuf_q
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 20
                            HdlValueInt: 16
            HdlOp: INDEX
                list: ops
                    HdlValueId: cbuf_q
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 4
                            HdlValueInt: 0
    HdlValueId: b
    HdlValueInt: 1

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@r to cdat
    UPD HdlValueId@@dr to dcdat

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@b to cdat
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: cbuf_q
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 4
                        HdlValueInt: 0
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@cbuf_q to dcdat
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlValueInt@@20 to 31
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dcbuf_ra
                HdlValueInt: 0

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dcbuf_ra
                HdlValueInt: 0
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: cbuf_q
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 14
                        HdlValueInt: 10
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@cbuf_q to dcdat
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: cbuf_q
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 30
                        HdlValueInt: 26
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from 
    DEL HdlValueId@@r from 
    DEL HdlValueInt@@1 from 

UPD HdlStmAssign@@if_true to if_true
    UPD HdlOp@@TERNARY to TERNARY
        INS HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: cbuf_q
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 15
                        HdlValueInt: 0

UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        MOV HdlOp@@INDEX to ops
        HdlOp: INDEX
            list: ops
                HdlValueId: cbuf_q
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 9
                        HdlValueInt: 5
        UPD HdlOp@@INDEX to INDEX
            UPD HdlValueId@@cbuf_q to dcdat
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: dcbuf_ra
                HdlValueInt: 0
        DEL HdlOp@@INDEX from ops
        HdlOp: INDEX
            list: ops
                HdlValueId: cbuf_q
                HdlOp: DOWNTO
                    list: ops
                        HdlValueInt: 25
                        HdlValueInt: 21
        DEL list@@ops from TERNARY
    DEL HdlOp@@TERNARY from 
    DEL HdlValueId@@g from 
    DEL HdlValueInt@@1 from 

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: dcbuf_ra
                    HdlValueInt: 0
            HdlOp: INDEX
                list: ops
                    HdlValueId: cbuf_q
                    HdlValueInt: 31
            HdlOp: INDEX
                list: ops
                    HdlValueId: cbuf_q
                    HdlValueInt: 15
    HdlValueId: alpha
    HdlValueInt: 1

DEL HdlStmAssign@@ from body

DEL HdlStmAssign@@ from body

UPD HdlStmIf@@body to body
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from body

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueId: alpha
    HdlValueId: dalpha
    HdlValueInt: 1

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueId: g
    HdlValueId: dg
    HdlValueInt: 1

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueId: b
    HdlValueId: db
    HdlValueInt: 1


CommitId: 3a123759abaf9bc4638b781590368567c03f3ef0
Added hardware cursor support to wishbone master.
--- a/rtl/verilog/vga_curproc.v
+++ b/rtl/verilog/vga_curproc.v
@@ -234,11 +226,11 @@ module vga_curproc (clk, rst_i, Thgate, Tvgate, idat, idat_wreq,
 
 	//
 	// generate cursor colors
-	assign cursor_alpha =  cursor_res ? cc_dat_i[15]    : dalpha;
-	assign cursor_r     = {cursor_res ? cc_dat_i[14:10] : dr, 3'h0};
-	assign cursor_g     = {cursor_res ? cc_dat_i[ 9: 5] : dg, 3'h0};
-	assign cursor_b     = {cursor_res ? cc_dat_i[ 4: 0] : db, 3'h0};
-
+	assign cursor_isalpha =  cursor_res ? cc_dat_i[15]    : dcdat[15];
+	assign cursor_alpha   =  cursor_res ? cc_dat_i[7:0]   : dcdat[7:0];
+	assign cursor_r       = {cursor_res ? cc_dat_i[14:10] : dcdat[14:10], 3'h0};
+	assign cursor_g       = {cursor_res ? cc_dat_i[ 9: 5] : dcdat[ 9: 5], 3'h0};
+	assign cursor_b       = {cursor_res ? cc_dat_i[ 4: 0] : dcdat[ 4: 0], 3'h0};
 
 	//
 	// delay image data

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: TERNARY
        list: ops
            HdlValueId: cursor_res
            HdlOp: INDEX
                list: ops
                    HdlValueId: cc_dat_i
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 7
                            HdlValueInt: 0
            HdlOp: INDEX
                list: ops
                    HdlValueId: dcdat
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 7
                            HdlValueInt: 0
    HdlValueId: cursor_alpha

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@cursor_alpha to cursor_isalpha
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlValueId@@dalpha to dcdat
        MOV HdlValueId@@dalpha to ops
        HdlValueId: dalpha

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@TERNARY to TERNARY
            DEL HdlValueId@@dr from ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@TERNARY to TERNARY
            DEL HdlValueId@@dg from ops

UPD HdlStmAssign@@ to 
    UPD HdlOp@@CONCAT to CONCAT
        UPD HdlOp@@TERNARY to TERNARY
            DEL HdlValueId@@db from ops


CommitId: 3a123759abaf9bc4638b781590368567c03f3ef0
Added hardware cursor support to wishbone master.
--- a/rtl/verilog/vga_curproc.v
+++ b/rtl/verilog/vga_curproc.v
@@ -270,12 +262,22 @@ module vga_curproc (clk, rst_i, Thgate, Tvgate, idat, idat_wreq,
 	always@(posedge clk)
 		dddcursor_en <= #1 ddcursor_en;
 
+	// Alpha blending:
+	// rgb = (rgb1 * alhpa1) + (rgb2 * alpha2)
+	// We generate an alpha mixer (alpha1 + alpha2 = 1)
+	// rgb = (alpha1)(rgb1) + (1-alpha1)(rgb2)
+	// We always mix to black (rgb2 = 0)
+	// rgb = (alpha1)(rgb1)
 	always@(posedge clk)
 		if (ddidat_wreq)
 			if (!dddcursor_en || !dddinbox)
 				rgb <= #1 dddidat;
-			else if (cursor_alpha)
-				rgb <= #1 dddidat;
+			else if (cursor_isalpha)
+				`ifdef VGA_HWC_3D
+					rgb <= #1 dddidat * cursor_alpha;
+				`else
+					rgb <= #1 dddidat;
+				`endif
 			else
 				rgb <= #1 {cursor_r, cursor_g, cursor_b};
 
ParseResult:
UPD HdlStmIf@@if_true to if_true
    UPD HdlValueId@@cursor_alpha to cursor_isalpha


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -50,9 +50,9 @@
 
 `include "timescale.v"
 
-module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor, 
-						pixel_buffer_empty, pixel_buffer_rreq, RGB_fifo_full,
-						RGB_fifo_wreq, R, G, B, 
+module vga_colproc(clk, srst, vdat_buffer_di, ColorDepth, PseudoColor, 
+						vdat_buffer_empty, vdat_buffer_rreq, rgb_fifo_full,
+						rgb_fifo_wreq, r, g, b, 
 						clut_req, clut_ack, clut_offs, clut_q);
 
 	//

ParseResult:
UPD HdlIdDef@@pixel_buffer_di to vdat_buffer_di

UPD HdlIdDef@@pixel_buffer_empty to vdat_buffer_empty

UPD HdlIdDef@@pixel_buffer_rreq to vdat_buffer_rreq

UPD HdlIdDef@@RGB_fifo_full to rgb_fifo_full

UPD HdlIdDef@@RGB_fifo_wreq to rgb_fifo_wreq

UPD HdlIdDef@@R to r

UPD HdlIdDef@@G to g

UPD HdlIdDef@@B to b


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -98,8 +98,8 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 
 	// store word from pixelbuffer / wishbone input
 	always@(posedge clk)
-		if (pixel_buffer_rreq)
-			DataBuffer <= #1 pixel_buffer_di;
+		if (vdat_buffer_rreq)
+			DataBuffer <= #1 vdat_buffer_di;
 
 	//
 	// generate statemachine

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk

INS HdlStmIf@@body to 
HdlStmIf: body
    HdlValueId: vdat_buffer_rreq
    HdlStmAssign: if_true
        HdlValueId: vdat_buffer_di
        HdlValueId: DataBuffer
        HdlValueInt: 1
    list: elifs

DEL HdlStmIf@@body from 
HdlStmIf: body
    HdlValueId: pixel_buffer_rreq
    HdlStmAssign: if_true
        HdlValueId: pixel_buffer_di
        HdlValueId: DataBuffer
        HdlValueInt: 1
    list: elifs

DEL HdlStmProcess@@ from objs


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -118,7 +118,7 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 	reg [6:0] nxt_state; // synopsys enum_state
 
 	// next state decoder
-	always@(c_state or pixel_buffer_empty or ColorDepth or PseudoColor or RGB_fifo_full or colcnt or clut_ack)
+	always@(c_state or vdat_buffer_empty or ColorDepth or PseudoColor or rgb_fifo_full or colcnt or clut_ack)
 	begin : nxt_state_decoder
 		// initial value
 		nxt_state = c_state;

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
    UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -126,7 +126,7 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 		case (c_state) // synopsis full_case parallel_case
 			// idle state
 			idle:
-				if (!pixel_buffer_empty)
+				if (!vdat_buffer_empty && !rgb_fifo_full)
 					nxt_state = fill_buf;
 
 			// fill data buffer

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
    UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@ to 
    INS HdlOp@@AND_LOG to 
    UPD HdlOp@@AND_LOG to AND_LOG
        INS list@@ops to AND_LOG
        INS HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: rgb_fifo_full

UPD HdlStmIf@@ to 
    MOV HdlOp@@NEG_LOG to 
    HdlOp: NEG_LOG
        list: ops
            HdlValueId: pixel_buffer_empty
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -153,30 +153,34 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 			// 8 bits per pixel
 			//
 			bw_8bpp:
-				if (!RGB_fifo_full && !(|colcnt) )
-					if (!pixel_buffer_empty)
+				if (!rgb_fifo_full && !(|colcnt) )
+					if (!vdat_buffer_empty)
 						nxt_state = fill_buf;
 					else
 						nxt_state = idle;
 
 			col_8bpp:
-				if (!RGB_fifo_full && !(|colcnt) )
-					if (clut_ack)
-						if (!pixel_buffer_empty)
-							nxt_state = fill_buf;
-						else
-							nxt_state = idle;
+				// do NOT check for rgb_fifo_full here, because in 8bpp_pc mode
+				// the color-processor always finishes the current 4pixel-block
+				// i.e. it runs until colcnt = '11'
+				// This is because of the late clut-response which shuffles all
+				// signals the state-machine depends on.
+				if (!(|colcnt))
+					if (!vdat_buffer_empty)
+						nxt_state = fill_buf;
+					else
+						nxt_state = idle;
 
 			//
 			// 16 bits per pixel
 			//
 			col_16bpp_a:
-				if (!RGB_fifo_full)
+				if (!rgb_fifo_full)
 					nxt_state = col_16bpp_b;
 
 			col_16bpp_b:
-				if (!RGB_fifo_full)
-					if (!pixel_buffer_empty)
+				if (!rgb_fifo_full)
+					if (!vdat_buffer_empty)
 						nxt_state = fill_buf;
 					else
 						nxt_state = idle;

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
    UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@if_true to 

MOV HdlStmIf@@if_true to 
HdlStmIf: if_true
    HdlValueId: clut_ack
    HdlStmIf: if_true
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: pixel_buffer_empty
        HdlOp: ASSIGN
            list: ops
                HdlValueId: nxt_state
                HdlValueId: fill_buf
        list: elifs
        HdlOp: ASSIGN
            list: ops
                HdlValueId: nxt_state
                HdlValueId: idle
    list: elifs

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlOp: OR_UNARY
                    list: ops
                        HdlValueId: colcnt
        DEL HdlOp@@NEG_LOG from ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: RGB_fifo_full
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 
    DEL list@@elifs from 

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@if_true to if_true
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty

UPD HdlStmIf@@if_true to if_true
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty

UPD HdlStmIf@@if_true to if_true
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@if_true to if_true
    DEL HdlValueId@@clut_ack from if_true

DEL HdlStmIf@@ from 


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -185,10 +189,10 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 			// 24 bits per pixel
 			//
 			col_24bpp:
-				if (!RGB_fifo_full)
+				if (!rgb_fifo_full)
 					if (colcnt == 2'h1) // (colcnt == 1)
 						nxt_state = col_24bpp; // stay in current state
-					else if (!pixel_buffer_empty)
+					else if (!vdat_buffer_empty)
 						nxt_state = fill_buf;
 					else
 						nxt_state = idle;

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
    UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@if_true to if_true
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty

UPD HdlStmIf@@if_true to if_true
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -197,8 +201,8 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 			// 32 bits per pixel
 			//
 			col_32bpp:
-				if (!RGB_fifo_full)
-					if (!pixel_buffer_empty)
+				if (!rgb_fifo_full)
+					if (!vdat_buffer_empty)
 						nxt_state = fill_buf;
 					else
 						nxt_state = idle;

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
    UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@if_true to if_true
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty

UPD HdlStmIf@@if_true to if_true
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -214,15 +218,15 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 
 
 	reg iclut_req;
-	reg pixelbuf_rreq;
+	reg ivdat_buf_rreq;
 	reg [7:0] iR, iG, iB, iRa, iGa, iBa;
 
 	// output decoder
-	always@(c_state or pixel_buffer_empty or colcnt or DataBuffer or RGB_fifo_full or clut_ack or clut_q or Ba or Ga or Ra)
+	always@(c_state or vdat_buffer_empty or colcnt or DataBuffer or rgb_fifo_full or clut_ack or clut_q or Ba or Ga or Ra)
 	begin : output_decoder
 
 		// initial values
-		pixelbuf_rreq = 1'b0;
+		ivdat_buf_rreq = 1'b0;
 		RGBbuf_wreq = 1'b0;
 		iclut_req = 1'b0;
 				

ParseResult:
UPD HdlIdDef@@pixelbuf_rreq to ivdat_buf_rreq

UPD HdlStmProcess@@ to 
    UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
    UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@pixelbuf_rreq to ivdat_buf_rreq


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -284,22 +308,22 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 
 			col_8bpp:
 			begin
-				if (!RGB_fifo_full & clut_ack)
-					begin
-						RGBbuf_wreq = 1'b1;
+				// do NOT check for rgb_fifo_full here, because in 8bpp_pc mode
+				// the color-processor always finishes the current 4pixel-block
+				// i.e. it runs until colcnt = '11'.
+				// This is because of the late clut-response which shuffles all
+				// signals the state-machine depends on.
+				if (!(|colcnt))
+					if (!vdat_buffer_empty && !(|colcnt) )
+						ivdat_buf_rreq = 1'b1;
 
-						if ( (!pixel_buffer_empty) && !(|colcnt) )
-							pixelbuf_rreq = 1'b1;
-					end
+				RGBbuf_wreq = clut_ack;
 
 				iR = clut_q[23:16];
 				iG = clut_q[15: 8];
 				iB = clut_q[ 7: 0];
 
-				iclut_req = ~RGB_fifo_full;
-
-				if ( !(|colcnt) && clut_ack)
-					iclut_req =1'b0;
+				iclut_req = !rgb_fifo_full || (colcnt[1] ^ colcnt[0]);
 			end
 
 			//

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
    UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@pixelbuf_rreq to ivdat_buf_rreq

UPD HdlStmCase@@c_state to c_state
    INS tuple@@ to cases
    INS HdlStmBlock@@SEQ to 
    INS HdlValueId@@fill_buf to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN
            INS HdlOp@@OR_LOG to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS list@@ops to OR_LOG
                INS HdlOp@@XOR to ops
                HdlOp: XOR
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 0

UPD HdlStmCase@@c_state to c_state
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        UPD HdlOp@@ASSIGN to ASSIGN
            MOV HdlValueId@@iclut_req to ops
            HdlValueId: iclut_req
            UPD HdlOp@@NEG to NEG_LOG
            MOV HdlOp@@NEG to ops
            HdlOp: NEG
                list: ops
                    HdlValueId: RGB_fifo_full
            UPD HdlOp@@NEG to NEG
                UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full
            DEL list@@ops from ASSIGN
        DEL HdlOp@@ASSIGN from body

UPD HdlStmIf@@ to if_true

MOV HdlStmIf@@ to body
HdlStmIf
    HdlOp: AND_LOG
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlOp: OR_UNARY
                        list: ops
                            HdlValueId: colcnt
            HdlValueId: clut_ack
    HdlOp: ASSIGN
        list: ops
            HdlValueId: iclut_req
            HdlValueInt: 0
    list: elifs

UPD HdlStmIf@@ to 
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueInt: 1
        DEL list@@body from SEQ
    DEL HdlOp@@AND from 
    HdlOp: AND
        list: ops
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: RGB_fifo_full
            HdlValueId: clut_ack
    DEL HdlStmBlock@@SEQ from 

UPD HdlStmIf@@ to 
    UPD HdlOp@@AND_LOG to AND_LOG
        MOV HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlValueId: pixel_buffer_empty
        MOV HdlOp@@NEG_LOG to ops
        HdlOp: NEG_LOG
            list: ops
                HdlOp: OR_UNARY
                    list: ops
                        HdlValueId: colcnt
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
        DEL list@@ops from AND_LOG
    DEL HdlOp@@AND_LOG from 
    DEL HdlOp@@ASSIGN from 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: pixelbuf_rreq
            HdlValueInt: 1
    DEL list@@elifs from 

UPD HdlStmIf@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@iclut_req to ivdat_buf_rreq
        UPD HdlValueInt@@0 to 1
    UPD HdlOp@@AND_LOG to AND_LOG
        DEL HdlValueId@@clut_ack from ops

DEL HdlStmIf@@ from body


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -307,7 +331,7 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 			//
 			col_16bpp_a:
 			begin
-				if (!RGB_fifo_full)
+				if (!rgb_fifo_full)
 					RGBbuf_wreq = 1'b1;
 
 				iR[7:3] = DataBuffer[31:27];

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
    UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@pixelbuf_rreq to ivdat_buf_rreq

UPD HdlStmCase@@c_state to c_state
    INS tuple@@ to cases
    INS HdlStmBlock@@SEQ to 
    INS HdlValueId@@fill_buf to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN
            INS HdlOp@@OR_LOG to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS list@@ops to OR_LOG
                INS HdlOp@@XOR to ops
                HdlOp: XOR
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 0

UPD HdlStmCase@@c_state to c_state
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        UPD HdlOp@@ASSIGN to ASSIGN
            MOV HdlValueId@@iclut_req to ops
            HdlValueId: iclut_req
            UPD HdlOp@@NEG to NEG_LOG
            MOV HdlOp@@NEG to ops
            HdlOp: NEG
                list: ops
                    HdlValueId: RGB_fifo_full
            UPD HdlOp@@NEG to NEG
                UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full
            DEL list@@ops from ASSIGN
        DEL HdlOp@@ASSIGN from body

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -317,12 +341,12 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 
 			col_16bpp_b:
 			begin
-				if (!RGB_fifo_full)
+				if (!rgb_fifo_full)
 					begin
 						RGBbuf_wreq = 1'b1;
 
-						if (!pixel_buffer_empty)
-							pixelbuf_rreq = 1'b1;
+						if (!vdat_buffer_empty)
+							ivdat_buf_rreq = 1'b1;
 					end
 
 				iR[7:3] = DataBuffer[15:11];

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
    UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@pixelbuf_rreq to ivdat_buf_rreq

UPD HdlStmCase@@c_state to c_state
    INS tuple@@ to cases
    INS HdlStmBlock@@SEQ to 
    INS HdlValueId@@fill_buf to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN
            INS HdlOp@@OR_LOG to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS list@@ops to OR_LOG
                INS HdlOp@@XOR to ops
                HdlOp: XOR
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 0

UPD HdlStmCase@@c_state to c_state
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        UPD HdlOp@@ASSIGN to ASSIGN
            MOV HdlValueId@@iclut_req to ops
            HdlValueId: iclut_req
            UPD HdlOp@@NEG to NEG_LOG
            MOV HdlOp@@NEG to ops
            HdlOp: NEG
                list: ops
                    HdlValueId: RGB_fifo_full
            UPD HdlOp@@NEG to NEG
                UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full
            DEL list@@ops from ASSIGN
        DEL HdlOp@@ASSIGN from body

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@pixelbuf_rreq to ivdat_buf_rreq


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -335,12 +359,12 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 			//
 			col_24bpp:
 			begin
-				if (!RGB_fifo_full)
+				if (!rgb_fifo_full)
 					begin
 						RGBbuf_wreq = 1'b1;
 
-						if ( (colcnt != 2'h1) && !pixel_buffer_empty)
-							pixelbuf_rreq = 1'b1;
+						if ( (colcnt != 2'h1) && !vdat_buffer_empty)
+							ivdat_buf_rreq = 1'b1;
 					end
 
 

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
    UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@pixelbuf_rreq to ivdat_buf_rreq

UPD HdlStmCase@@c_state to c_state
    INS tuple@@ to cases
    INS HdlStmBlock@@SEQ to 
    INS HdlValueId@@fill_buf to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN
            INS HdlOp@@OR_LOG to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS list@@ops to OR_LOG
                INS HdlOp@@XOR to ops
                HdlOp: XOR
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 0

UPD HdlStmCase@@c_state to c_state
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        UPD HdlOp@@ASSIGN to ASSIGN
            MOV HdlValueId@@iclut_req to ops
            HdlValueId: iclut_req
            UPD HdlOp@@NEG to NEG_LOG
            MOV HdlOp@@NEG to ops
            HdlOp: NEG
                list: ops
                    HdlValueId: RGB_fifo_full
            UPD HdlOp@@NEG to NEG
                UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full
            DEL list@@ops from ASSIGN
        DEL HdlOp@@ASSIGN from body

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@pixelbuf_rreq to ivdat_buf_rreq
    UPD HdlOp@@AND_LOG to AND_LOG
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -386,12 +410,12 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 			//
 			col_32bpp:
 			begin
-				if (!RGB_fifo_full)
+				if (!rgb_fifo_full)
 					begin
 						RGBbuf_wreq = 1'b1;
 
-						if (!pixel_buffer_empty)
-							pixelbuf_rreq = 1'b1;
+						if (!vdat_buffer_empty)
+							ivdat_buf_rreq = 1'b1;
 					end
 
 				iR[7:0] = DataBuffer[23:16];

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
    UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@pixelbuf_rreq to ivdat_buf_rreq

UPD HdlStmCase@@c_state to c_state
    INS tuple@@ to cases
    INS HdlStmBlock@@SEQ to 
    INS HdlValueId@@fill_buf to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN
            INS HdlOp@@OR_LOG to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS list@@ops to OR_LOG
                INS HdlOp@@XOR to ops
                HdlOp: XOR
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 0

UPD HdlStmCase@@c_state to c_state
    UPD HdlStmBlock@@SEQ to SEQ
        MOV HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        UPD HdlOp@@ASSIGN to ASSIGN
            MOV HdlValueId@@iclut_req to ops
            HdlValueId: iclut_req
            UPD HdlOp@@NEG to NEG_LOG
            MOV HdlOp@@NEG to ops
            HdlOp: NEG
                list: ops
                    HdlValueId: RGB_fifo_full
            UPD HdlOp@@NEG to NEG
                UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full
            DEL list@@ops from ASSIGN
        DEL HdlOp@@ASSIGN from body

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@RGB_fifo_full to rgb_fifo_full

UPD HdlStmIf@@ to 
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@pixel_buffer_empty to vdat_buffer_empty
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@pixelbuf_rreq to ivdat_buf_rreq


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -405,9 +429,9 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 	// generate output registers
 	always@(posedge clk)
 		begin
-			R  <= #1 iR;
-			G  <= #1 iG;
-			B  <= #1 iB;
+			r  <= #1 iR;
+			g  <= #1 iG;
+			b  <= #1 iB;
 
 			if (RGBbuf_wreq)
 				begin

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: iR
    HdlValueId: r
    HdlValueInt: 1

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: iG
    HdlValueId: g
    HdlValueInt: 1

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: iB
    HdlValueId: b
    HdlValueInt: 1

MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: RGBbuf_wreq
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueId: iRa
                HdlValueId: Ra
                HdlValueInt: 1
            HdlStmAssign
                HdlValueId: iBa
                HdlValueId: Ba
                HdlValueInt: 1
            HdlStmAssign
                HdlValueId: iGa
                HdlValueId: Ga
                HdlValueInt: 1
    list: elifs

UPD HdlStmCase@@c_state to c_state
    INS tuple@@ to cases
    INS HdlStmBlock@@SEQ to 
    INS HdlValueId@@fill_buf to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN
            INS HdlOp@@OR_LOG to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS list@@ops to OR_LOG
                INS HdlOp@@XOR to ops
                HdlOp: XOR
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 0

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueId: iR
    HdlValueId: R
    HdlValueInt: 1

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueId: iG
    HdlValueId: G
    HdlValueInt: 1

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueId: iB
    HdlValueId: B
    HdlValueInt: 1

DEL HdlStmProcess@@ from objs


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -418,14 +442,14 @@ module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor,
 
 			if (srst)
 				begin
-					pixel_buffer_rreq <= #1 1'b0;
-					RGB_fifo_wreq <= #1 1'b0;
+					vdat_buffer_rreq <= #1 1'b0;
+					rgb_fifo_wreq <= #1 1'b0;
 					clut_req <= #1 1'b0;
 				end
 			else
 				begin
-					pixel_buffer_rreq <= #1 pixelbuf_rreq;
-					RGB_fifo_wreq <= #1 RGBbuf_wreq;
+					vdat_buffer_rreq <= #1 ivdat_buf_rreq;
+					rgb_fifo_wreq <= #1 RGBbuf_wreq;
 					clut_req <= #1 iclut_req;
 				end
 	end

ParseResult:
INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: clk
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

MOV HdlStmIf@@ to body
HdlStmIf
    HdlValueId: RGBbuf_wreq
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlValueId: iRa
                HdlValueId: Ra
                HdlValueInt: 1
            HdlStmAssign
                HdlValueId: iBa
                HdlValueId: Ba
                HdlValueInt: 1
            HdlStmAssign
                HdlValueId: iGa
                HdlValueId: Ga
                HdlValueInt: 1
    list: elifs

INS HdlStmIf@@ to body

UPD HdlStmCase@@c_state to c_state
    INS tuple@@ to cases
    INS HdlStmBlock@@SEQ to 
    INS HdlValueId@@fill_buf to 
    INS HdlStmBlock@@SEQ to 
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS list@@body to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iG
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 15
                                HdlValueInt: 8
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iB
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 7
                                HdlValueInt: 0
    UPD HdlStmBlock@@SEQ to SEQ
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: RGBbuf_wreq
                HdlValueId: clut_ack
        INS HdlOp@@ASSIGN to body
        HdlOp: ASSIGN
            list: ops
                HdlValueId: iR
                HdlOp: INDEX
                    list: ops
                        HdlValueId: clut_q
                        HdlOp: DOWNTO
                            list: ops
                                HdlValueInt: 23
                                HdlValueInt: 16
        INS HdlOp@@ASSIGN to body
        UPD HdlOp@@ASSIGN to ASSIGN
            INS list@@ops to ASSIGN
            INS HdlOp@@OR_LOG to ops
            UPD HdlOp@@OR_LOG to OR_LOG
                INS list@@ops to OR_LOG
                INS HdlOp@@XOR to ops
                HdlOp: XOR
                    list: ops
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 1
                        HdlOp: INDEX
                            list: ops
                                HdlValueId: colcnt
                                HdlValueInt: 0

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: vdat_buffer_rreq
    HdlValueInt: 1

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: rgb_fifo_wreq
    HdlValueInt: 1

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: clut_req
    HdlValueInt: 1

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: ivdat_buf_rreq
    HdlValueId: vdat_buffer_rreq
    HdlValueInt: 1

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: RGBbuf_wreq
    HdlValueId: rgb_fifo_wreq
    HdlValueInt: 1

MOV HdlStmAssign@@ to body
HdlStmAssign
    HdlValueId: iclut_req
    HdlValueId: clut_req
    HdlValueInt: 1

UPD HdlStmIf@@ to 
    DEL HdlValueId@@srst from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 
    DEL list@@elifs from 
    UPD HdlStmBlock@@SEQ to SEQ
        DEL list@@body from SEQ
    DEL HdlStmBlock@@SEQ from 

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: pixel_buffer_rreq
    HdlValueInt: 1

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: RGB_fifo_wreq
    HdlValueInt: 1

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueId: pixelbuf_rreq
    HdlValueId: pixel_buffer_rreq
    HdlValueInt: 1

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueId: RGBbuf_wreq
    HdlValueId: RGB_fifo_wreq
    HdlValueInt: 1

DEL HdlStmIf@@ from body

DEL HdlStmProcess@@ from objs


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -50,9 +50,12 @@
 
 
 `include "timescale.v"
+`include "vga_defines.v"
 
 module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_I, CYC_I, ACK_O, ERR_O, INTA_O,
-		bl, csl, vsl, hsl, pc, cd, vbl, cbsw, vbsw, ven, avmp, acmp, vbsint_in, cbsint_in, hint_in, vint_in, luint_in, sint_in,
+		bl, csl, vsl, hsl, pc, cd, vbl, cbsw, vbsw, ven, avmp, acmp, 
+		cursor0_en, cursor0_xy, cursor0_ba, cursor0_ld, cursor1_en, cursor1_xy, cursor1_ba, cursor1_ld,
+		vbsint_in, cbsint_in, hint_in, vint_in, luint_in, sint_in,
 		Thsync, Thgdel, Thgate, Thlen, Tvsync, Tvgdel, Tvgate, Tvlen, VBARa, VBARb, clut_acc, clut_ack, clut_q);
 
 	//

ParseResult:
INS HdlIdDef@@cursor0_en to ports
HdlIdDef: cursor0_en
    HdlDirection: OUT

INS HdlIdDef@@cursor0_xy to ports
HdlIdDef: cursor0_xy
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: OUT

INS HdlIdDef@@cursor0_ba to ports
HdlIdDef: cursor0_ba
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 11
    HdlDirection: OUT

INS HdlIdDef@@cursor0_ld to ports
HdlIdDef: cursor0_ld
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: OUT

INS HdlIdDef@@cursor1_en to ports
HdlIdDef: cursor1_en
    HdlDirection: OUT

INS HdlIdDef@@cursor1_xy to ports
HdlIdDef: cursor1_xy
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: OUT

INS HdlIdDef@@cursor1_ba to ports
HdlIdDef: cursor1_ba
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 11
    HdlDirection: OUT

INS HdlIdDef@@cursor1_ld to ports
HdlIdDef: cursor1_ld
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: OUT


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -127,16 +147,22 @@ module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_
 	//
 	// variable declarations
 	//
-	wire [2:0] REG_ADR  = ADR_I[4:2];
-	wire       CLUT_ADR = ADR_I[11];
+	parameter REG_ADR_HIBIT = 3;
 
-	parameter [2:0] CTRL_ADR  = 3'b000;
-	parameter [2:0] STAT_ADR  = 3'b001;
-	parameter [2:0] HTIM_ADR  = 3'b010;
-	parameter [2:0] VTIM_ADR  = 3'b011;
-	parameter [2:0] HVLEN_ADR = 3'b100;
-	parameter [2:0] VBARA_ADR = 3'b101;
-	parameter [2:0] VBARB_ADR = 3'b110;
+	wire [REG_ADR_HIBIT:0] REG_ADR  = ADR_I[REG_ADR_HIBIT +2 : 2];
+	wire                   CLUT_ADR = ADR_I[11];
+
+	parameter [REG_ADR_HIBIT : 0] CTRL_ADR  = 4'b0000;
+	parameter [REG_ADR_HIBIT : 0] STAT_ADR  = 4'b0001;
+	parameter [REG_ADR_HIBIT : 0] HTIM_ADR  = 4'b0010;
+	parameter [REG_ADR_HIBIT : 0] VTIM_ADR  = 4'b0011;
+	parameter [REG_ADR_HIBIT : 0] HVLEN_ADR = 4'b0100;
+	parameter [REG_ADR_HIBIT : 0] VBARA_ADR = 4'b0101;
+	parameter [REG_ADR_HIBIT : 0] VBARB_ADR = 4'b0110;
+	parameter [REG_ADR_HIBIT : 0] C0XY_ADR  = 4'b1000;
+	parameter [REG_ADR_HIBIT : 0] C0BAR_ADR = 4'b1001;
+	parameter [REG_ADR_HIBIT : 0] C1XY_ADR  = 4'b1010;
+	parameter [REG_ADR_HIBIT : 0] C1BAR_ADR = 4'b1011;
 
 
 	reg [31:0] ctrl, stat, htim, vtim, hvlen;

ParseResult:
UPD HdlIdDef@@CTRL_ADR to CTRL_ADR
    UPD HdlValueInt@@000 to 0000
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            DEL HdlValueInt@@2 from ops

UPD HdlIdDef@@STAT_ADR to STAT_ADR
    UPD HdlValueInt@@001 to 0001
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            DEL HdlValueInt@@2 from ops

UPD HdlIdDef@@HTIM_ADR to HTIM_ADR
    UPD HdlValueInt@@010 to 0010
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            DEL HdlValueInt@@2 from ops

UPD HdlIdDef@@VTIM_ADR to VTIM_ADR
    UPD HdlValueInt@@011 to 0011
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            DEL HdlValueInt@@2 from ops

UPD HdlIdDef@@HVLEN_ADR to HVLEN_ADR
    UPD HdlValueInt@@100 to 0100
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            DEL HdlValueInt@@2 from ops

UPD HdlIdDef@@VBARA_ADR to VBARA_ADR
    UPD HdlValueInt@@101 to 0101
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            DEL HdlValueInt@@2 from ops

UPD HdlIdDef@@VBARB_ADR to VBARB_ADR
    UPD HdlValueInt@@110 to 0110
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            DEL HdlValueInt@@2 from ops

UPD HdlIdDef@@REG_ADR to REG_ADR
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@4 to 2
            MOV HdlValueInt@@4 to ops
            HdlValueInt: 4
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            DEL HdlValueInt@@2 from ops


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -185,14 +211,23 @@ module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_
 			end
 		else if (reg_wacc)
 			case (ADR_I)	// synopsis full_case parallel_case
-				HTIM_ADR  : htim  <= #1 DAT_I;
-				VTIM_ADR  : vtim  <= #1 DAT_I;
-				HVLEN_ADR : hvlen <= #1 DAT_I;
-				VBARA_ADR : VBARa <= #1 DAT_I[31: 2];
-				VBARB_ADR : VBARb <= #1 DAT_I[31: 2];
+				HTIM_ADR  : htim       <= #1 DAT_I;
+				VTIM_ADR  : vtim       <= #1 DAT_I;
+				HVLEN_ADR : hvlen      <= #1 DAT_I;
+				VBARA_ADR : VBARa      <= #1 DAT_I[31: 2];
+				VBARB_ADR : VBARb      <= #1 DAT_I[31: 2];
+				C0XY_ADR  : cursor0_xy <= #1 DAT_I[31: 0];
+				C0BAR_ADR : cursor0_ba <= #1 DAT_I[31:11];
+				C1XY_ADR  : cursor1_xy <= #1 DAT_I[31: 0];
+				C1BAR_ADR : cursor1_ba <= #1 DAT_I[31:11];
 			endcase
 	end
 
+	always@(posedge CLK_I)
+		begin
+			cursor0_ld <= #1 reg_wacc && (ADR_I == C0BAR_ADR);
+			cursor1_ld <= #1 reg_wacc && (ADR_I == C1BAR_ADR);
+		end
 
 	// generate control register
 	always@(posedge CLK_I or negedge nRESET)

ParseResult:
INS HdlIdDef@@C0XY_ADR to params
HdlIdDef: C0XY_ADR
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueId: REG_ADR_HIBIT
                    HdlValueInt: 0
    HdlValueInt: 1000
    HdlDirection: INTERNAL

INS HdlIdDef@@C0BAR_ADR to params
HdlIdDef: C0BAR_ADR
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueId: REG_ADR_HIBIT
                    HdlValueInt: 0
    HdlValueInt: 1001
    HdlDirection: INTERNAL

INS HdlIdDef@@C1XY_ADR to params
HdlIdDef: C1XY_ADR
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueId: REG_ADR_HIBIT
                    HdlValueInt: 0
    HdlValueInt: 1010
    HdlDirection: INTERNAL

INS HdlIdDef@@C1BAR_ADR to params
HdlIdDef: C1BAR_ADR
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueId: REG_ADR_HIBIT
                    HdlValueInt: 0
    HdlValueInt: 1011
    HdlDirection: INTERNAL


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -217,8 +252,20 @@ module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_
 			stat <= #1 0;
 		else
 			begin
+				`ifdef VGA_HWC1
+					stat[21] <= #1 1'b1;
+				`else
+					stat[21] <= #1 1'b0;
+				`endif
+				`ifdef VGA_HWC0
+					stat[20] <= #1 1'b1;
+				`else
+					stat[20] <= #1 1'b0;
+				`endif
+
 				stat[17] <= #1 acmp;
 				stat[16] <= #1 avmp;
+
 				if (reg_wacc & (REG_ADR == STAT_ADR) )
 					begin
 						stat[7] <= #1 cbsint_in | (stat[7] & !DAT_I[7]);

ParseResult:
UPD HdlIdDef@@REG_ADR to REG_ADR
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            INS HdlValueId@@REG_ADR_HIBIT to ops
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            INS HdlOp@@ADD to ops
            UPD HdlOp@@ADD to ADD
                INS list@@ops to ADD
                INS HdlValueId@@REG_ADR_HIBIT to ops

UPD HdlIdDef@@CTRL_ADR to CTRL_ADR
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlOp@@DOWNTO to DOWNTO
            INS HdlValueId@@REG_ADR_HIBIT to ops


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -241,20 +288,22 @@ module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_
 
 
 	// decode control register
-	assign bl    = ctrl[15];
-	assign csl   = ctrl[14];
-	assign vsl   = ctrl[13];
-	assign hsl   = ctrl[12];
-	assign pc    = ctrl[11];
-	assign cd    = ctrl[10:9];
-	assign vbl   = ctrl[8:7];
-	assign cbsw  = ctrl[6];
-	assign vbsw  = ctrl[5];
-	assign cbsie = ctrl[4];
-	assign vbsie = ctrl[3];
-	assign hie   = ctrl[2];
-	assign vie   = ctrl[1];
-	assign ven   = ctrl[0];
+	assign cursor1_en = ctrl[21];
+	assign cursor0_en = ctrl[20];
+	assign bl         = ctrl[15];
+	assign csl        = ctrl[14];
+	assign vsl        = ctrl[13];
+	assign hsl        = ctrl[12];
+	assign pc         = ctrl[11];
+	assign cd         = ctrl[10:9];
+	assign vbl        = ctrl[8:7];
+	assign cbsw       = ctrl[6];
+	assign vbsw       = ctrl[5];
+	assign cbsie      = ctrl[4];
+	assign vbsie      = ctrl[3];
+	assign hie        = ctrl[2];
+	assign vie        = ctrl[1];
+	assign ven        = ctrl[0];
 
 	// decode status register
 	assign cbsint = stat[7];

ParseResult:
INS HdlStmProcess@@ to objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: CLK_I
    HdlStmBlock: SEQ
        list: body
            HdlStmAssign
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: reg_wacc
                        HdlOp: EQ
                            list: ops
                                HdlValueId: ADR_I
                                HdlValueId: C0BAR_ADR
                HdlValueId: cursor0_ld
                HdlValueInt: 1
            HdlStmAssign
                HdlOp: AND_LOG
                    list: ops
                        HdlValueId: reg_wacc
                        HdlOp: EQ
                            list: ops
                                HdlValueId: ADR_I
                                HdlValueId: C1BAR_ADR
                HdlValueId: cursor1_ld
                HdlValueInt: 1


CommitId: de9bd31b0e79e918627cd98275efbd547bfafa1d
Fixed some bugs discovered by modified testbench
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -287,6 +336,10 @@ module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_
 		HVLEN_ADR : reg_dato = hvlen;
 		VBARA_ADR : reg_dato = {VBARa, 2'b0};
 		VBARB_ADR : reg_dato = {VBARb, 2'b0};
+		C0XY_ADR  : reg_dato = cursor0_xy;
+		C0BAR_ADR : reg_dato = {cursor0_ba, 11'h0};
+		C1XY_ADR  : reg_dato = cursor1_xy;
+		C1BAR_ADR : reg_dato = {cursor1_ba, 11'h0};
 		default   : reg_dato = 32'h0000_0000;
 	endcase
 

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: ctrl
            HdlValueInt: 21
    HdlValueId: cursor1_en

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: ctrl
            HdlValueInt: 20
    HdlValueId: cursor0_en

UPD HdlStmCase@@ADR_I to ADR_I
    INS tuple@@ to cases
    tuple
        HdlValueId: C0XY_ADR
        HdlStmAssign
            HdlOp: INDEX
                list: ops
                    HdlValueId: DAT_I
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 31
                            HdlValueInt: 0
            HdlValueId: cursor0_xy
            HdlValueInt: 1
    INS tuple@@ to cases
    tuple
        HdlValueId: C0BAR_ADR
        HdlStmAssign
            HdlOp: INDEX
                list: ops
                    HdlValueId: DAT_I
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 31
                            HdlValueInt: 11
            HdlValueId: cursor0_ba
            HdlValueInt: 1
    INS tuple@@ to cases
    tuple
        HdlValueId: C1XY_ADR
        HdlStmAssign
            HdlOp: INDEX
                list: ops
                    HdlValueId: DAT_I
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 31
                            HdlValueInt: 0
            HdlValueId: cursor1_xy
            HdlValueInt: 1
    INS tuple@@ to cases
    tuple
        HdlValueId: C1BAR_ADR
        HdlStmAssign
            HdlOp: INDEX
                list: ops
                    HdlValueId: DAT_I
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 31
                            HdlValueInt: 11
            HdlValueId: cursor1_ba
            HdlValueInt: 1


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -2,14 +2,15 @@
 // file: wb_slave.v
 // project: VGA/LCD controller
 // author: Richard Herveille
-// rev 1.0 August  6th, 2001. Initial verilog release
+// rev. 1.0 August   6th, 2001. Initial verilog release
+// rev. 2.0 October  2nd, 2001. Revised core. Moved color lookup-table to color processor. Changed wishbone slave to access clut, made outputs registered.
 //
 
 `include "timescale.v"
 
 module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_I, CYC_I, ACK_O, ERR_O, INTA_O,
-		bl, csl, vsl, hsl, pc, cd, vbl, cbsw, vbsw, ven, avmp, acmp, bsint_in, hint_in, vint_in, luint_in, sint_in,
-		Thsync, Thgdel, Thgate, Thlen, Tvsync, Tvgdel, Tvgate, Tvlen, VBARa, VBARb, CBAR);
+		bl, csl, vsl, hsl, pc, cd, vbl, cbsw, vbsw, ven, avmp, acmp, vbsint_in, cbsint_in, hint_in, vint_in, luint_in, sint_in,
+		Thsync, Thgdel, Thgate, Thlen, Tvsync, Tvgdel, Tvgate, Tvlen, VBARa, VBARb, clut_acc, clut_ack, clut_q);
 
 	//
 	// inputs & outputs

ParseResult:
UPD HdlIdDef@@bsint_in to vbsint_in

INS HdlIdDef@@cbsint_in to ports
HdlIdDef: cbsint_in
    HdlDirection: IN

INS HdlIdDef@@clut_acc to ports
HdlIdDef: clut_acc
    HdlDirection: OUT

INS HdlIdDef@@clut_ack to ports
HdlIdDef: clut_ack
    HdlDirection: IN

UPD HdlIdDef@@CBAR to clut_q

UPD HdlIdDef@@ADR_I to ADR_I
    UPD HdlOp@@PARAMETRIZATION to INDEX
    MOV HdlOp@@PARAMETRIZATION to ADR_I
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 4
                    HdlValueInt: 2
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@wire to ADR_I

UPD HdlIdDef@@ADR_I to ADR_I
    INS HdlOp@@PARAMETRIZATION to ADR_I
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 11
                    HdlValueInt: 2

UPD HdlIdDef@@ACK_O to ACK_O
    INS HdlOp@@PARAMETRIZATION to ACK_O
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg

UPD HdlIdDef@@ERR_O to ERR_O
    INS HdlOp@@PARAMETRIZATION to ERR_O
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg

UPD HdlIdDef@@INTA_O to INTA_O
    INS HdlOp@@PARAMETRIZATION to INTA_O
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg

UPD HdlIdDef@@CBAR to CBAR
    UPD HdlDirection@@OUT to IN
    UPD HdlOp@@PARAMETRIZATION to PARAMETRIZATION
        UPD HdlValueId@@reg to wire
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@31 to 23
            UPD HdlValueInt@@11 to 0


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -64,16 +69,24 @@ module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_
 	output [15:0] Tvgate;
 	output [15:0] Tvlen;
 
+	// video base addresses
 	output [31: 2] VBARa;
 	reg [31: 2] VBARa;
 	output [31: 2] VBARb;
 	reg [31: 2] VBARb;
-	output [31:11] CBAR;
-	reg [31:11] CBAR;
+
+	// color lookup table signals
+	output        clut_acc;
+	input         clut_ack;
+	input  [23:0] clut_q;
+
 
 	//
 	// variable declarations
 	//
+	wire [2:0] REG_ADR  = ADR_I[4:2];
+	wire       CLUT_ADR = ADR_I[11];
+
 	parameter [2:0] CTRL_ADR  = 3'b000;
 	parameter [2:0] STAT_ADR  = 3'b001;
 	parameter [2:0] HTIM_ADR  = 3'b010;

ParseResult:
INS HdlIdDef@@CLUT_ADR to objs
HdlIdDef: CLUT_ADR
    HdlOp: INDEX
        list: ops
            HdlValueId: ADR_I
            HdlValueInt: 11
    HdlDirection: INTERNAL


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -81,23 +94,31 @@ module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_
 	parameter [2:0] HVLEN_ADR = 3'b100;
 	parameter [2:0] VBARA_ADR = 3'b101;
 	parameter [2:0] VBARB_ADR = 3'b110;
-	parameter [2:0] CBAR_ADR  = 3'b111;
 
 
 	reg [31:0] ctrl, stat, htim, vtim, hvlen;
-	wire HINT, VINT, BSINT, LUINT, SINT;
-	wire hie, vie, bsie;
-	wire acc, acc32, reg_acc;
+	wire hint, vint, vbsint, cbsint, luint, sint;
+	wire hie, vie, vbsie, cbsie;
+	wire acc, acc32, reg_acc, reg_wacc;
+
+
+	reg [31:0] reg_dato; // data output from registers
 
 	//
 	// Module body
 	//
 
-	assign acc     = CYC_I & STB_I;
-	assign acc32   = (SEL_I == 4'b1111);
-	assign reg_acc = acc & acc32  & WE_I;
-	assign ACK_O   = acc &  acc32;
-	assign ERR_O   = acc & !acc32;
+	assign acc      =  CYC_I & STB_I;
+	assign acc32    = (SEL_I == 4'b1111);
+	assign clut_acc =  CLUT_ADR & acc & acc32;
+	assign reg_acc  = !CLUT_ADR & acc & acc32;
+	assign reg_wacc =  reg_acc & WE_I;
+
+	always@(posedge CLK_I)
+		ACK_O <= #1 ((reg_acc & acc32) | clut_ack) & !ACK_O;
+
+	always@(posedge CLK_I)
+		ERR_O <= #1 acc & !acc32;
 
 
 	// generate registers

ParseResult:
UPD HdlIdDef@@CBAR_ADR to REG_ADR

MOV HdlIdDef@@CBAR_ADR to params
HdlIdDef: CBAR_ADR
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 2
                    HdlValueInt: 0
    HdlValueInt: 111
    HdlDirection: INTERNAL

UPD HdlIdDef@@HINT to hint

UPD HdlIdDef@@VINT to vint

UPD HdlIdDef@@BSINT to vbsint

UPD HdlIdDef@@LUINT to cbsint

UPD HdlIdDef@@SINT to luint

INS HdlIdDef@@sint to objs
HdlIdDef: sint
    HdlDirection: INTERNAL

UPD HdlIdDef@@bsie to vbsie

INS HdlIdDef@@cbsie to objs
HdlIdDef: cbsie
    HdlDirection: INTERNAL

INS HdlIdDef@@reg_wacc to objs
HdlIdDef: reg_wacc
    HdlDirection: INTERNAL

INS HdlIdDef@@reg_dato to objs
HdlIdDef: reg_dato
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: AND
        list: ops
            HdlOp: AND
                list: ops
                    HdlValueId: CLUT_ADR
                    HdlValueId: acc
            HdlValueId: acc32
    HdlValueId: clut_acc

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: AND
        list: ops
            HdlValueId: reg_acc
            HdlValueId: WE_I
    HdlValueId: reg_wacc

INS HdlStmProcess@@ to objs

INS HdlStmProcess@@ to objs

UPD HdlStmAssign@@ to body

MOV HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: AND
        list: ops
            HdlValueId: acc
            HdlValueId: acc32
    HdlValueId: ACK_O

UPD HdlStmAssign@@ to body

MOV HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: AND
        list: ops
            HdlValueId: acc
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: acc32
    HdlValueId: ERR_O

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND to AND
        UPD HdlValueId@@WE_I to acc32
        UPD HdlOp@@AND to AND
            UPD HdlValueId@@acc32 to acc
            UPD HdlValueId@@acc to CLUT_ADR
            MOV HdlValueId@@acc to ops
            HdlValueId: acc

UPD HdlStmAssign@@ to 
    MOV HdlOp@@AND to 
    HdlOp: AND
        list: ops
            HdlValueId: acc
            HdlValueId: acc32
    MOV HdlValueId@@ACK_O to 
    HdlValueId: ACK_O
    UPD HdlOp@@AND to AND
        UPD HdlValueId@@acc to reg_acc

UPD HdlIdDef@@CBAR_ADR to CBAR_ADR
    DEL HdlValueInt@@111 from CBAR_ADR


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -110,7 +131,6 @@ module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_
 				hvlen <= #1 0;
 				VBARa <= #1 0;
 				VBARb <= #1 0;
-				CBAR  <= #1 0;
 			end
 		else if (RST_I)
 			begin

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlValueId@@reg_acc to reg_wacc

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: CBAR
    HdlValueInt: 1


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -119,16 +139,14 @@ module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_
 				hvlen <= #1 0;
 				VBARa <= #1 0;
 				VBARb <= #1 0;
-				CBAR  <= #1 0;
 			end
-		else if (reg_acc)
+		else if (reg_wacc)
 			case (ADR_I)	// synopsis full_case parallel_case
 				HTIM_ADR  : htim  <= #1 DAT_I;
 				VTIM_ADR  : vtim  <= #1 DAT_I;
 				HVLEN_ADR : hvlen <= #1 DAT_I;
 				VBARA_ADR : VBARa <= #1 DAT_I[31: 2];
 				VBARB_ADR : VBARb <= #1 DAT_I[31: 2];
-				CBAR_ADR  : CBAR  <= #1 DAT_I[31:11];
 			endcase
 	end
 

ParseResult:
UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: CLK_I

UPD HdlStmProcess@@ to 
    INS list@@sensitivity to 
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: CLK_I

UPD HdlStmAssign@@body to body
    INS HdlOp@@AND to body
    INS HdlValueId@@ACK_O to body
    INS HdlValueInt@@1 to body
    UPD HdlOp@@AND to AND
        INS list@@ops to AND
        INS HdlOp@@OR to ops
        INS HdlOp@@NEG_LOG to ops
        UPD HdlOp@@OR to OR
            INS list@@ops to OR
            INS HdlValueId@@clut_ack to ops
        UPD HdlOp@@NEG_LOG to NEG_LOG
            INS list@@ops to NEG_LOG

UPD HdlStmAssign@@body to body
    INS HdlValueInt@@1 to body

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND to AND
        UPD HdlOp@@AND to AND
            INS HdlOp@@NEG_LOG to ops
            UPD HdlOp@@NEG_LOG to NEG_LOG
                INS list@@ops to NEG_LOG

UPD HdlStmIf@@ to 
    UPD HdlValueId@@reg_acc to reg_wacc

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlValueInt: 0
    HdlValueId: CBAR
    HdlValueInt: 1

UPD HdlStmCase@@ADR_I to ADR_I
    DEL tuple@@ from cases
    tuple
        HdlValueId: CBAR_ADR
        HdlStmAssign
            HdlOp: INDEX
                list: ops
                    HdlValueId: DAT_I
                    HdlOp: DOWNTO
                        list: ops
                            HdlValueInt: 31
                            HdlValueInt: 11
            HdlValueId: CBAR
            HdlValueInt: 1


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -139,12 +157,12 @@ module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_
 			ctrl <= #1 0;
 		else if (RST_I)
 			ctrl <= #1 0;
-		else if (reg_acc & (ADR_I == CTRL_ADR) )
+		else if (reg_wacc & (REG_ADR == CTRL_ADR) )
 			ctrl <= #1 DAT_I;
 		else
 			begin
-				ctrl[5] <= #1 ctrl[5] & !bsint_in;
-				ctrl[4] <= #1 ctrl[4] & !bsint_in;
+				ctrl[6] <= #1 ctrl[6] & !cbsint_in;
+				ctrl[5] <= #1 ctrl[5] & !vbsint_in;
 			end
 
 

ParseResult:
INS HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: AND
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: ctrl
                    HdlValueInt: 6
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: cbsint_in
    HdlOp: INDEX
        list: ops
            HdlValueId: ctrl
            HdlValueInt: 6
    HdlValueInt: 1

UPD HdlStmIf@@body to body
    UPD HdlOp@@AND to AND
        UPD HdlValueId@@reg_acc to reg_wacc
        UPD HdlOp@@EQ to EQ
            UPD HdlValueId@@ADR_I to REG_ADR

UPD HdlStmAssign@@ to 
    UPD HdlOp@@AND to AND
        UPD HdlOp@@NEG_LOG to NEG_LOG
            UPD HdlValueId@@bsint_in to vbsint_in

DEL HdlStmAssign@@ from body
HdlStmAssign
    HdlOp: AND
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: ctrl
                    HdlValueInt: 4
            HdlOp: NEG_LOG
                list: ops
                    HdlValueId: bsint_in
    HdlOp: INDEX
        list: ops
            HdlValueId: ctrl
            HdlValueInt: 4
    HdlValueInt: 1


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -158,17 +176,19 @@ module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_
 			begin
 				stat[17] <= #1 acmp;
 				stat[16] <= #1 avmp;
-				if (reg_acc & (ADR_I == STAT_ADR) )
+				if (reg_wacc & (REG_ADR == STAT_ADR) )
 					begin
-						stat[6] <= #1 bsint_in | (stat[6] & !DAT_I[6]);
-						stat[5] <= #1 hint_in  | (stat[5] & !DAT_I[5]);
-						stat[4] <= #1 vint_in  | (stat[4] & !DAT_I[4]);
-						stat[1] <= #1 luint_in | (stat[3] & !DAT_I[1]);
-						stat[0] <= #1 sint_in  | (stat[0] & !DAT_I[0]);
+						stat[7] <= #1 cbsint_in | (stat[7] & !DAT_I[7]);
+						stat[6] <= #1 vbsint_in | (stat[6] & !DAT_I[6]);
+						stat[5] <= #1 hint_in   | (stat[5] & !DAT_I[5]);
+						stat[4] <= #1 vint_in   | (stat[4] & !DAT_I[4]);
+						stat[1] <= #1 luint_in  | (stat[3] & !DAT_I[1]);
+						stat[0] <= #1 sint_in   | (stat[0] & !DAT_I[0]);
 					end
 				else
 					begin
-						stat[6] <= #1 stat[6] | bsint_in;
+						stat[7] <= #1 stat[7] | cbsint_in;
+						stat[6] <= #1 stat[6] | vbsint_in;
 						stat[5] <= #1 stat[5] | hint_in;
 						stat[4] <= #1 stat[4] | vint_in;
 						stat[1] <= #1 stat[1] | luint_in;

ParseResult:
UPD HdlStmIf@@ to 
    UPD HdlOp@@AND to AND
        UPD HdlValueId@@reg_acc to reg_wacc
        UPD HdlOp@@EQ to EQ
            UPD HdlValueId@@ADR_I to REG_ADR

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: OR
        list: ops
            HdlValueId: cbsint_in
            HdlOp: AND
                list: ops
                    HdlOp: INDEX
                        list: ops
                            HdlValueId: stat
                            HdlValueInt: 7
                    HdlOp: NEG_LOG
                        list: ops
                            HdlOp: INDEX
                                list: ops
                                    HdlValueId: DAT_I
                                    HdlValueInt: 7
    HdlOp: INDEX
        list: ops
            HdlValueId: stat
            HdlValueInt: 7
    HdlValueInt: 1

INS HdlStmAssign@@ to body
HdlStmAssign
    HdlOp: OR
        list: ops
            HdlOp: INDEX
                list: ops
                    HdlValueId: stat
                    HdlValueInt: 7
            HdlValueId: cbsint_in
    HdlOp: INDEX
        list: ops
            HdlValueId: stat
            HdlValueInt: 7
    HdlValueInt: 1

UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR to OR
        UPD HdlValueId@@bsint_in to vbsint_in

UPD HdlStmAssign@@ to 
    UPD HdlOp@@OR to OR
        UPD HdlValueId@@bsint_in to vbsint_in


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -178,26 +198,28 @@ module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_
 
 
 	// decode control register
-	assign bl   = ctrl[15];
-	assign csl  = ctrl[14];
-	assign vsl  = ctrl[13];
-	assign hsl  = ctrl[12];
-	assign pc   = ctrl[11];
-	assign cd   = ctrl[10:9];
-	assign vbl  = ctrl[8:7];
-	assign cbsw = ctrl[5];
-	assign vbsw = ctrl[4];
-	assign bsie = ctrl[3];
-	assign hie  = ctrl[2];
-	assign vie  = ctrl[1];
-	assign ven  = ctrl[0];
+	assign bl    = ctrl[15];
+	assign csl   = ctrl[14];
+	assign vsl   = ctrl[13];
+	assign hsl   = ctrl[12];
+	assign pc    = ctrl[11];
+	assign cd    = ctrl[10:9];
+	assign vbl   = ctrl[8:7];
+	assign cbsw  = ctrl[6];
+	assign vbsw  = ctrl[5];
+	assign cbsie = ctrl[4];
+	assign vbsie = ctrl[3];
+	assign hie   = ctrl[2];
+	assign vie   = ctrl[1];
+	assign ven   = ctrl[0];
 
 	// decode status register
-	assign BSINT = stat[6];
-	assign HINT  = stat[5];
-	assign VINT  = stat[4];
-	assign LUINT = stat[1];
-	assign SINT  = stat[0];
+	assign cbsint = stat[7];
+	assign vbsint = stat[6];
+	assign hint   = stat[5];
+	assign vint   = stat[4];
+	assign luint  = stat[1];
+	assign sint   = stat[0];
 
 	// decode Horizontal Timing Register
 	assign Thsync = htim[31:24];

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: ctrl
            HdlValueInt: 6
    HdlValueId: cbsw

INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: INDEX
        list: ops
            HdlValueId: stat
            HdlValueInt: 7
    HdlValueId: cbsint

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@cbsw to vbsw

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@vbsw to cbsie

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@bsie to vbsie

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@BSINT to vbsint

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@HINT to hint

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@VINT to vint

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@LUINT to luint

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@SINT to sint


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_wb_slave.v
+++ b/rtl/verilog/vga_wb_slave.v
@@ -213,18 +235,23 @@ module vga_wb_slave(CLK_I, RST_I, nRESET, ADR_I, DAT_I, DAT_O, SEL_I, WE_I, STB_
 
 	
 	// assign output
-	always@(ADR_I or ctrl or stat or htim or vtim or hvlen or VBARa or VBARb or CBAR or acmp)
-	case (ADR_I) // synopsis full_case parallel_case
-		CTRL_ADR  : DAT_O = ctrl;
-		STAT_ADR  : DAT_O = stat;
-		HTIM_ADR  : DAT_O = htim;
-		VTIM_ADR  : DAT_O = vtim;
-		HVLEN_ADR : DAT_O = hvlen;
-		VBARA_ADR : DAT_O = {VBARa, 2'b0};
-		VBARB_ADR : DAT_O = {VBARb, 2'b0};
-		CBAR_ADR  : DAT_O = {CBAR, acmp, 10'b0};
+	always@(REG_ADR or ctrl or stat or htim or vtim or hvlen or VBARa or VBARb or acmp)
+	case (REG_ADR) // synopsis full_case parallel_case
+		CTRL_ADR  : reg_dato = ctrl;
+		STAT_ADR  : reg_dato = stat;
+		HTIM_ADR  : reg_dato = htim;
+		VTIM_ADR  : reg_dato = vtim;
+		HVLEN_ADR : reg_dato = hvlen;
+		VBARA_ADR : reg_dato = {VBARa, 2'b0};
+		VBARB_ADR : reg_dato = {VBARb, 2'b0};
+		default   : reg_dato = 32'h0000_0000;
 	endcase
 
+	always@(posedge CLK_I)
+		DAT_O <= #1 reg_acc ? reg_dato : {8'h0, clut_q};
+
 	// generate interrupt request signal
-	assign INTA_O = (HINT & hie) | (VINT & vie) | (BSINT & bsie) | LUINT | SINT;
+	always@(posedge CLK_I)
+		INTA_O <= #1 (hint & hie) | (vint & vie) | (vbsint & vbsie) | (cbsint & cbsie) | luint | sint;
 endmodule
+
ParseResult:
INS HdlStmProcess@@ to objs

INS HdlStmProcess@@ to objs

INS HdlStmProcess@@ to objs

UPD HdlStmProcess@@ to 
    MOV list@@sensitivity to 
    list: sensitivity
        HdlValueId: ADR_I
        HdlValueId: ctrl
        HdlValueId: stat
        HdlValueId: htim
        HdlValueId: vtim
        HdlValueId: hvlen
        HdlValueId: VBARa
        HdlValueId: VBARb
        HdlValueId: CBAR
        HdlValueId: acmp
    UPD HdlValueId@@ADR_I to REG_ADR
    DEL HdlValueId@@CBAR from sensitivity

INS HdlStmCase@@REG_ADR to 

INS HdlStmAssign@@body to 

UPD HdlStmAssign@@ to body

MOV HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: OR
        list: ops
            HdlOp: OR
                list: ops
                    HdlOp: OR
                        list: ops
                            HdlOp: OR
                                list: ops
                                    HdlOp: AND
                                        list: ops
                                            HdlValueId: HINT
                                            HdlValueId: hie
                                    HdlOp: AND
                                        list: ops
                                            HdlValueId: VINT
                                            HdlValueId: vie
                            HdlOp: AND
                                list: ops
                                    HdlValueId: BSINT
                                    HdlValueId: bsie
                    HdlValueId: LUINT
            HdlValueId: SINT
    HdlValueId: INTA_O

UPD HdlStmCase@@ADR_I to ADR_I
    MOV HdlStmCaseType@@CASE to ADR_I
    HdlStmCaseType: CASE
    UPD HdlValueId@@ADR_I to REG_ADR
    MOV HdlValueId@@ADR_I to ADR_I
    HdlValueId: ADR_I
    UPD HdlOp@@ASSIGN to TERNARY
    MOV HdlOp@@ASSIGN to 
    HdlOp: ASSIGN
        list: ops
            HdlValueId: DAT_O
            HdlOp: CONCAT
                list: ops
                    HdlOp: CONCAT
                        list: ops
                            HdlValueId: CBAR
                            HdlValueId: acmp
                    HdlValueInt: 0
    MOV tuple@@ to cases
    tuple
        HdlValueId: CTRL_ADR
        HdlOp: ASSIGN
            list: ops
                HdlValueId: DAT_O
                HdlValueId: ctrl
    MOV tuple@@ to cases
    tuple
        HdlValueId: STAT_ADR
        HdlOp: ASSIGN
            list: ops
                HdlValueId: DAT_O
                HdlValueId: stat
    MOV tuple@@ to cases
    tuple
        HdlValueId: HTIM_ADR
        HdlOp: ASSIGN
            list: ops
                HdlValueId: DAT_O
                HdlValueId: htim
    MOV tuple@@ to cases
    tuple
        HdlValueId: VTIM_ADR
        HdlOp: ASSIGN
            list: ops
                HdlValueId: DAT_O
                HdlValueId: vtim
    MOV tuple@@ to cases
    tuple
        HdlValueId: HVLEN_ADR
        HdlOp: ASSIGN
            list: ops
                HdlValueId: DAT_O
                HdlValueId: hvlen
    MOV tuple@@ to cases
    tuple
        HdlValueId: VBARA_ADR
        HdlOp: ASSIGN
            list: ops
                HdlValueId: DAT_O
                HdlOp: CONCAT
                    list: ops
                        HdlValueId: VBARa
                        HdlValueInt: 0
    MOV tuple@@ to cases
    tuple
        HdlValueId: VBARB_ADR
        HdlOp: ASSIGN
            list: ops
                HdlValueId: DAT_O
                HdlOp: CONCAT
                    list: ops
                        HdlValueId: VBARb
                        HdlValueInt: 0
    UPD HdlValueId@@CBAR_ADR to CLK_I
    MOV HdlValueId@@CBAR_ADR to 
    HdlValueId: CBAR_ADR
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@DAT_O to reg_acc
        UPD HdlOp@@CONCAT to CONCAT
            DEL HdlOp@@CONCAT from ops
            HdlOp: CONCAT
                list: ops
                    HdlValueId: CBAR
                    HdlValueId: acmp
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@DAT_O to reg_dato
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@DAT_O to reg_dato
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@DAT_O to reg_dato
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@DAT_O to reg_dato
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@DAT_O to reg_dato
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@DAT_O to reg_dato
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@DAT_O to reg_dato
    DEL tuple@@ from cases
    DEL list@@cases from ADR_I

UPD HdlStmAssign@@ to 
    MOV HdlOp@@OR to 
    HdlOp: OR
        list: ops
            HdlOp: OR
                list: ops
                    HdlOp: OR
                        list: ops
                            HdlOp: OR
                                list: ops
                                    HdlOp: AND
                                        list: ops
                                            HdlValueId: HINT
                                            HdlValueId: hie
                                    HdlOp: AND
                                        list: ops
                                            HdlValueId: VINT
                                            HdlValueId: vie
                            HdlOp: AND
                                list: ops
                                    HdlValueId: BSINT
                                    HdlValueId: bsie
                    HdlValueId: LUINT
            HdlValueId: SINT
    UPD HdlOp@@OR to OR
        UPD HdlValueId@@SINT to luint
        UPD HdlOp@@OR to OR
            UPD HdlValueId@@LUINT to cbsint
            MOV HdlValueId@@LUINT to ops
            HdlValueId: LUINT
            UPD HdlOp@@OR to OR
                UPD HdlOp@@AND to AND
                    UPD HdlValueId@@BSINT to vbsint
                    UPD HdlValueId@@bsie to vbsie
                UPD HdlOp@@OR to OR
                    UPD HdlOp@@AND to AND
                        UPD HdlValueId@@HINT to hint
                    UPD HdlOp@@AND to AND
                        UPD HdlValueId@@VINT to vint

DEL HdlStmCase@@ADR_I from 

DEL HdlStmProcess@@ from objs


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/vga_and_clut.vhd
+++ b/vga_and_clut.vhd
@@ -5,6 +5,7 @@
 --
 -- rev. 1.0 July  4th, 2001.
 -- rev. 1.1 July 15th, 2001. Changed cycle_shared_memory to csm_pb. The core does not require a CLKx2 clock anymore.
+--                           Added CLUT bank switching
 
 library ieee;
 use ieee.std_logic_1164.all;

ParseResult:
INS HdlLibrary@@ieee to objs

DEL HdlLibrary@@ieee from objs


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/vga_and_clut.vhd
+++ b/vga_and_clut.vhd
@@ -18,7 +19,7 @@ entity vga_and_clut is
 		INTA_O  : out std_logic;                        -- interrupt request output
 
 		-- slave signals
-		ADR_I      : in unsigned(9 downto 2);           -- addressbus input (only 32bit databus accesses supported)
+		ADR_I      : in unsigned(10 downto 2);          -- addressbus input (only 32bit databus accesses supported)
 		SDAT_I     : in std_logic_vector(31 downto 0);  -- Slave databus output
 		SDAT_O     : out std_logic_vector(31 downto 0); -- Slave databus input
 		SEL_I      : in std_logic_vector(3 downto 0);   -- byte select inputs

ParseResult:
UPD HdlIdDef@@ADR_I to ADR_I
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@9 to 10


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/vga_and_clut.vhd
+++ b/vga_and_clut.vhd
@@ -131,7 +132,7 @@ architecture structural of vga_and_clut is
 	--
 	-- Signal declarations
 	--
-	signal CBA : unsigned(31 downto 10); -- color lookup table base address
+	signal CBA : unsigned(31 downto 11); -- color lookup table base address
 
 	signal vga_clut_acc : std_logic; -- vga access to color lookup table
 	

ParseResult:
UPD HdlIdDef@@CBA to CBA
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@10 to 11


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/vga_and_clut.vhd
+++ b/vga_and_clut.vhd
@@ -158,12 +159,12 @@ begin
 			if (RST_I = '1') then
 				CBA <= (others  => '0');
 			elsif ( (SEL_I = "1111") and (CYC_I = '1') and (VGA_STB_I = '1') and (WE_I = '1') and (std_logic_vector(ADR_I(4 downto 2)) = "111") ) then
-				CBA <= unsigned(SDAT_I(31 downto 10));
+				CBA <= unsigned(SDAT_I(31 downto 11));
 			end if;
 		end if;
 	end process;
 
-	vga_clut_acc <= '1' when (vga_adr_o(31 downto 10) = CBA) else '0';
+	vga_clut_acc <= '1' when (vga_adr_o(31 downto 11) = CBA) else '0';
 
 
 	--

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@TERNARY to TERNARY
        UPD HdlOp@@EQ to EQ
            UPD HdlOp@@INDEX to INDEX
                UPD HdlOp@@DOWNTO to DOWNTO
                    UPD HdlValueInt@@10 to 11

UPD HdlStmAssign@@ to 
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@INDEX to INDEX
            UPD HdlOp@@DOWNTO to DOWNTO
                UPD HdlValueInt@@10 to 11


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_top.v
+++ b/rtl/verilog/vga_top.v
@@ -85,6 +93,14 @@ module vga_top (wb_clk_i, wb_rst_i, rst_nreset_i, wb_inta_o,
 	// line fifo connections
 	wire line_fifo_dpm_wreq;
 	wire [23:0] line_fifo_dpm_d, line_fifo_dpm_q;
+
+	// clut connections
+	wire        clut_req, clut_ack;
+	wire [23:0] clut_q;
+	wire        cp_clut_req, cp_clut_ack;
+	wire [ 8:0] cp_clut_adr;
+	wire [23:0] cp_clut_q;
+
 	//
 	// Module body
 	//

ParseResult:
INS HdlIdDef@@clut_req to objs
HdlIdDef: clut_req
    HdlDirection: INTERNAL

INS HdlIdDef@@clut_ack to objs
HdlIdDef: clut_ack
    HdlDirection: INTERNAL

INS HdlIdDef@@clut_q to objs
HdlIdDef: clut_q
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 23
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@cp_clut_req to objs
HdlIdDef: cp_clut_req
    HdlDirection: INTERNAL

INS HdlIdDef@@cp_clut_ack to objs
HdlIdDef: cp_clut_ack
    HdlDirection: INTERNAL

INS HdlIdDef@@cp_clut_adr to objs
HdlIdDef: cp_clut_adr
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 8
                    HdlValueInt: 0
    HdlDirection: INTERNAL

INS HdlIdDef@@cp_clut_q to objs
HdlIdDef: cp_clut_q
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 23
                    HdlValueInt: 0
    HdlDirection: INTERNAL


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_top.v
+++ b/rtl/verilog/vga_top.v
@@ -205,17 +250,17 @@ module vga_top (wb_clk_i, wb_rst_i, rst_nreset_i, wb_inta_o,
 
 
 	// delay video control signals 1 clock cycle (dual clock fifo synchronizes output)
-	always@(posedge clk_pclk_i)
+	always@(posedge clk_p_i)
 	begin
-		vga_hsync_pad_o <= #1 ihsync;
-		vga_vsync_pad_o <= #1 ivsync;
-		vga_csync_pad_o <= #1 icsync;
-		vga_blank_pad_o <= #1 iblank;
+		hsync_pad_o <= #1 ihsync;
+		vsync_pad_o <= #1 ivsync;
+		csync_pad_o <= #1 icsync;
+		blank_pad_o <= #1 iblank;
 	end
 
 	// hookup line-fifo
 	vga_fifo_dc #(LINE_FIFO_AWIDTH, 24) u4 (
-		.rclk(clk_pclk_i),
+		.rclk(clk_p_i),
 		.wclk(wb_clk_i),
 		.aclr(ctrl_ven),
 		.wreq(line_fifo_dpm_wreq),

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlOp@@RISING to RISING
        UPD HdlValueId@@clk_pclk_i to clk_p_i

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@vga_hsync_pad_o to hsync_pad_o

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@vga_vsync_pad_o to vsync_pad_o

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@vga_csync_pad_o to csync_pad_o

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@vga_blank_pad_o to blank_pad_o


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_top.v
+++ b/rtl/verilog/vga_top.v
@@ -228,18 +273,18 @@ module vga_top (wb_clk_i, wb_rst_i, rst_nreset_i, wb_inta_o,
 		.wr_full(line_fifo_full_wr)
 	);
 
-	assign vga_r_pad_o = line_fifo_dpm_q[23:16];
-	assign vga_g_pad_o = line_fifo_dpm_q[15: 8];
-	assign vga_b_pad_o = line_fifo_dpm_q[ 7: 0];
+	assign r_pad_o = line_fifo_dpm_q[23:16];
+	assign g_pad_o = line_fifo_dpm_q[15: 8];
+	assign b_pad_o = line_fifo_dpm_q[ 7: 0];
 
 	// generate interrupt signal when reading line-fifo while it is empty (line-fifo under-run interrupt)
 	reg luint_pclk, sluint;
 
-	always@(posedge clk_pclk_i)
+	always@(posedge clk_p_i)
 		luint_pclk <= #1 cgate & line_fifo_empty_rd;
 
-	always@(posedge wb_clk_i or negedge rst_nreset_i)
-		if (!rst_nreset_i)
+	always@(posedge wb_clk_i or negedge arst)
+		if (!arst)
 			begin
 				sluint <= #1 1'b0;
 				luint  <= #1 1'b0;

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlValueId@@vga_r_pad_o to r_pad_o

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@vga_g_pad_o to g_pad_o

UPD HdlStmAssign@@ to 
    UPD HdlValueId@@vga_b_pad_o to b_pad_o

UPD HdlStmProcess@@ to 
    UPD HdlOp@@RISING to RISING
        UPD HdlValueId@@clk_pclk_i to clk_p_i

UPD HdlStmProcess@@ to 
    UPD HdlOp@@FALLING to FALLING
        UPD HdlValueId@@rst_nreset_i to arst

UPD HdlStmIf@@body to body
    UPD HdlOp@@NEG_LOG to NEG_LOG
        UPD HdlValueId@@rst_nreset_i to arst


CommitId: 6b5e57be543e4493d94418f7994f6b860cbb332f
Fixed some Wishbone RevB.3 related bugs.
--- a/rtl/verilog/vga_wb_master.v
+++ b/rtl/verilog/vga_wb_master.v
@@ -77,17 +80,17 @@
 //               Changed top-level name to vga_enh_top.v
 //
 
+//synopsys translate_off
 `include "timescale.v"
-`include "vga_defines.v"
+//synopsys translate_on
 
 module vga_wb_master (clk_i, rst_i, nrst_i,
 	cyc_o, stb_o, cti_o, bte_o, we_o, adr_o, sel_o, ack_i, err_i, dat_i, sint,
-	ctrl_ven, ctrl_cd, ctrl_pc, ctrl_vbl, ctrl_vbsw, ctrl_cbsw, 
-	cursor0_en, cursor0_res, cursor0_xy, cursor0_ba, cursor0_ld, cc0_adr_o, cc0_dat_i,
-	cursor1_en, cursor1_res, cursor1_xy, cursor1_ba, cursor1_ld, cc1_adr_o, cc1_dat_i,
+	ctrl_ven, ctrl_cd, ctrl_vbl, ctrl_vbsw, busy,
 	VBAa, VBAb, Thgate, Tvgate,
-	stat_avmp, stat_acmp, vmem_switch, clut_switch, line_fifo_wreq, line_fifo_d, line_fifo_full,
-	clut_req, clut_ack, clut_adr, clut_q);
+	stat_avmp, vmem_switch, ImDoneFifoQ,
+	cursor_adr, cursor0_ba, cursor1_ba, cursor0_ld, cursor1_ld,
+	fb_data_fifo_rreq, fb_data_fifo_q, fb_data_fifo_empty);
 
 	// inputs & outputs
 

ParseResult:
MOV HdlIdDef@@cc1_dat_i to ports
HdlIdDef: cc1_dat_i
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 15
                    HdlValueInt: 0
    HdlDirection: IN

MOV HdlIdDef@@cursor0_ba to ports
HdlIdDef: cursor0_ba
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 11
    HdlDirection: IN

MOV HdlIdDef@@cursor1_ba to ports
HdlIdDef: cursor1_ba
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 11
    HdlDirection: IN

MOV HdlIdDef@@cursor0_ld to ports
HdlIdDef: cursor0_ld
    HdlDirection: IN

MOV HdlIdDef@@cursor1_ld to ports
HdlIdDef: cursor1_ld
    HdlDirection: IN

MOV HdlIdDef@@cursor1_xy to ports
HdlIdDef: cursor1_xy
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: IN

UPD HdlIdDef@@cc1_adr_o to fb_data_fifo_nword

MOV HdlIdDef@@cc1_adr_o to ports
HdlIdDef: cc1_adr_o
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 3
                    HdlValueInt: 0
    HdlDirection: OUT

UPD HdlIdDef@@ctrl_cbsw to busy

INS HdlIdDef@@ImDoneFifoQ to ports
HdlIdDef: ImDoneFifoQ
    HdlDirection: OUT

UPD HdlIdDef@@cc1_dat_i to cursor_adr

UPD HdlIdDef@@line_fifo_wreq to fb_data_fifo_rreq

UPD HdlIdDef@@cursor1_xy to fb_data_fifo_q

UPD HdlIdDef@@cc1_adr_o to cc1_adr_o
    UPD HdlDirection@@OUT to INTERNAL

UPD HdlIdDef@@ctrl_cbsw to ctrl_cbsw
    UPD HdlDirection@@IN to OUT

UPD HdlIdDef@@cc1_dat_i to cc1_dat_i
    UPD HdlDirection@@IN to OUT
    DEL HdlOp@@PARAMETRIZATION from cc1_dat_i
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 15
                    HdlValueInt: 0

UPD HdlIdDef@@line_fifo_wreq to line_fifo_wreq
    UPD HdlDirection@@OUT to IN

UPD HdlIdDef@@cursor1_xy to cursor1_xy
    UPD HdlDirection@@IN to OUT

UPD HdlIdDef@@cti_o to cti_o
    DEL HdlOp@@PARAMETRIZATION from cti_o
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 3
                    HdlValueInt: 0

DEL HdlIdDef@@ctrl_pc from ports
HdlIdDef: ctrl_pc
    HdlDirection: IN

DEL HdlIdDef@@cursor0_en from ports
HdlIdDef: cursor0_en
    HdlDirection: IN

DEL HdlIdDef@@cursor0_res from ports
HdlIdDef: cursor0_res
    HdlDirection: IN

DEL HdlIdDef@@cursor0_xy from ports
HdlIdDef: cursor0_xy
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: IN

DEL HdlIdDef@@cc0_adr_o from ports
HdlIdDef: cc0_adr_o
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 3
                    HdlValueInt: 0
    HdlDirection: OUT

DEL HdlIdDef@@cc0_dat_i from ports
HdlIdDef: cc0_dat_i
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 15
                    HdlValueInt: 0
    HdlDirection: IN

DEL HdlIdDef@@cursor1_en from ports
HdlIdDef: cursor1_en
    HdlDirection: IN

DEL HdlIdDef@@cursor1_res from ports
HdlIdDef: cursor1_res
    HdlDirection: IN

DEL HdlIdDef@@stat_acmp from ports
HdlIdDef: stat_acmp
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: OUT

DEL HdlIdDef@@clut_switch from ports
HdlIdDef: clut_switch
    HdlDirection: OUT


CommitId: 6b5e57be543e4493d94418f7994f6b860cbb332f
Fixed some Wishbone RevB.3 related bugs.
--- a/rtl/verilog/vga_wb_master.v
+++ b/rtl/verilog/vga_wb_master.v
@@ -196,7 +170,6 @@ module vga_wb_master (clk_i, rst_i, nrst_i,
 	wire        cur_ack;                // cursor processor memory access acknowledge
 	wire        cur_done;               // done reading cursor pattern
 
-
 	//
 	// module body
 	//

ParseResult:
UPD HdlIdDef@@cursor_adr to cursor_adr
    MOV HdlOp@@PARAMETRIZATION to cursor_adr
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 8
                    HdlValueInt: 0
    DEL HdlDirection@@INTERNAL from cursor_adr

DEL HdlIdDef@@cursor_adr from objs


CommitId: 6b5e57be543e4493d94418f7994f6b860cbb332f
Fixed some Wishbone RevB.3 related bugs.
--- a/rtl/verilog/vga_wb_master.v
+++ b/rtl/verilog/vga_wb_master.v
@@ -218,14 +191,15 @@ module vga_wb_master (clk_i, rst_i, nrst_i,
 	  if (sclr)
 	    vmem_acc <= #1 1'b0; // video memory access request
 	  else
-	    vmem_acc <= #1 (!vmem_req_n | (vmem_acc & !(burst_done & vmem_ack) ) ) & !ImDone & !cur_acc;
+	    vmem_acc <= #1 (vmem_req | (vmem_acc & !(burst_done & vmem_ack)) ) & !ImDone & !cur_acc;
 
 	always @(posedge clk_i)
 	  if (sclr)
 	    cur_acc <= #1 1'b0; // cursor processor memory access request
 	  else
 	    cur_acc <= #1 (cur_acc | ImDone & (ld_cursor0 | ld_cursor1)) & !cur_done;
-
+	    
+	assign busy = vmem_acc | cur_acc;
 
 	assign vmem_ack = ack_i & stb_o & vmem_acc;
 	assign cur_ack  = ack_i & stb_o & cur_acc;

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: OR
        list: ops
            HdlValueId: vmem_acc
            HdlValueId: cur_acc
    HdlValueId: busy


CommitId: 6b5e57be543e4493d94418f7994f6b860cbb332f
Fixed some Wishbone RevB.3 related bugs.
--- a/rtl/verilog/vga_wb_master.v
+++ b/rtl/verilog/vga_wb_master.v
@@ -441,19 +392,9 @@ module vga_wb_master (clk_i, rst_i, nrst_i,
 	// generate wishbone signals
 	//
 	assign adr_o = cur_acc ? {cursor_ba, cursor_adr, 2'b00} : {vmemA, 2'b00};
-	wire wb_cycle = vmem_acc & !(burst_done & vmem_ack & vmem_req_n) & !ImDone ||
+	wire wb_cycle = vmem_acc & !(burst_done & vmem_ack & !vmem_req) & !ImDone ||
 	                cur_acc & !cur_done;
 
-	wire [2:0] cti_vid = (burst_cnt == 3'h1)   ? 3'b111 : 3'b010;
-	wire [2:0] cti_cur = &next_cursor_adr[8:0] ? 3'b111 : 3'b010;
-	reg  [2:0] cti;
-	always @(ctrl_vbl or cur_acc or cti_cur or cti_vid)
-	  case (ctrl_vbl)
-	    3'b000:  cti <= #1 3'b000; // wishbone classic cycle
-
-	    default: cti <= #1 cur_acc ? cti_cur : cti_vid;
-	  endcase
-
 	always @(posedge clk_i or negedge nrst_i)
 	  if (!nrst_i)
 	    begin

ParseResult:
UPD HdlStmIf@@body to body
    UPD HdlOp@@OR to OR
        DEL HdlValueId@@sclr from ops


CommitId: 6b5e57be543e4493d94418f7994f6b860cbb332f
Fixed some Wishbone RevB.3 related bugs.
--- a/rtl/verilog/vga_vtim.v
+++ b/rtl/verilog/vga_vtim.v
@@ -78,13 +83,6 @@ module vga_vtim(clk, ena, rst, Tsync, Tgdel, Tgate, Tlen, Sync, Gate, Done);
 	reg Gate;
 	reg Done;
 
-	//
-	// variable declarations
-	//
-
-	wire Dsync, Dgdel, Dgate, Dlen;
-	reg go, drst;
-
 	//
 	// module body
 	//

ParseResult:
DEL HdlIdDef@@Dsync from objs
HdlIdDef: Dsync
    HdlDirection: INTERNAL

DEL HdlIdDef@@Dgdel from objs
HdlIdDef: Dgdel
    HdlDirection: INTERNAL

DEL HdlIdDef@@Dgate from objs
HdlIdDef: Dgate
    HdlDirection: INTERNAL

DEL HdlIdDef@@Dlen from objs
HdlIdDef: Dlen
    HdlDirection: INTERNAL

DEL HdlIdDef@@go from objs
HdlIdDef: go
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL

DEL HdlIdDef@@drst from objs
HdlIdDef: drst
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: INTERNAL


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -2,25 +2,28 @@
 // File colproc.vhd, Color Processor
 // Project: VGA
 // Author : Richard Herveille. Ideas and thoughts: Sherif Taher Eid
-// rev. 1.0 August  2nd, 2001. Initial Verilog release
-// rev. 1.1 August 29th, 2001. Changed statemachine to increase bandwidth.
 //
+// rev. 1.0 August   2nd, 2001. Initial Verilog release
+// rev. 1.1 August  29th, 2001. Changed statemachine to increase bandwidth.
+// rev. 2.0 October  2nd, 2001. Revised core. Included color lookup table in Color Processor
 
 `include "timescale.v"
 
-module vga_colproc(clk, srst, pixel_buffer_di, wb_di, ColorDepth, PseudoColor, 
+module vga_colproc(clk, srst, pixel_buffer_di, ColorDepth, PseudoColor, 
 						pixel_buffer_empty, pixel_buffer_rreq, RGB_fifo_full,
-						RGB_fifo_wreq, R, G, B, clut_req, clut_offs, clut_ack);
+						RGB_fifo_wreq, R, G, B, 
+						clut_req, clut_ack, clut_offs, clut_q);
 
+	//
 	// inputs & outputs
+	//
 	input clk;                    // master clock
 	input srst;                   // synchronous reset
 
 	input [31:0] pixel_buffer_di; // Pixel Buffer data input
-	input [31:0] wb_di;           // wishbone data input
 
 	input [1:0] ColorDepth;       // color depth (8bpp, 16bpp, 24bpp)
-	input PseudoColor;            // pseudo color enabled (only for 8bpp color depth)
+	input       PseudoColor;      // pseudo color enabled (only for 8bpp color depth)
 
 	input  pixel_buffer_empty;
 	output pixel_buffer_rreq;     // pixel buffer read request

ParseResult:
MOV HdlIdDef@@clut_offs to ports
HdlIdDef: clut_offs
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 7
                    HdlValueInt: 0
    HdlDirection: OUT

INS HdlIdDef@@clut_q to ports
HdlIdDef: clut_q
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 23
                    HdlValueInt: 0
    HdlDirection: IN

DEL HdlIdDef@@wb_di from ports
HdlIdDef: wb_di
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: wire
            HdlOp: DOWNTO
                list: ops
                    HdlValueInt: 31
                    HdlValueInt: 0
    HdlDirection: IN


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -154,18 +159,18 @@ module vga_colproc(clk, srst, pixel_buffer_di, wb_di, ColorDepth, PseudoColor,
 				c_state <= #1 nxt_state;
 
 
-	reg clut_acc;
+	reg iclut_req;
 	reg pixelbuf_rreq;
 	reg [7:0] iR, iG, iB, iRa, iGa, iBa;
 
 	// output decoder
-	always@(c_state or pixel_buffer_empty or colcnt or DataBuffer or RGB_fifo_full or clut_ack or wb_di or Ba or Ga or Ra)
+	always@(c_state or pixel_buffer_empty or colcnt or DataBuffer or RGB_fifo_full or clut_ack or clut_q or Ba or Ga or Ra)
 	begin : output_decoder
 
 		// initial values
 		pixelbuf_rreq = 1'b0;
 		RGBbuf_wreq = 1'b0;
-		clut_acc = 1'b0;
+		iclut_req = 1'b0;
 				
 		iR  = 'h0;
 		iG  = 'h0;

ParseResult:
UPD HdlIdDef@@clut_acc to iclut_req

UPD HdlStmProcess@@ to 
    UPD HdlValueId@@wb_di to clut_q
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@clut_acc to iclut_req


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -233,14 +238,14 @@ module vga_colproc(clk, srst, pixel_buffer_di, wb_di, ColorDepth, PseudoColor,
 							pixelbuf_rreq = 1'b1;
 					end
 
-				iR = wb_di[23:16];
-				iG = wb_di[15: 8];
-				iB = wb_di[ 7: 0];
+				iR = clut_q[23:16];
+				iG = clut_q[15: 8];
+				iB = clut_q[ 7: 0];
 
-				clut_acc = ~RGB_fifo_full;
+				iclut_req = ~RGB_fifo_full;
 
 				if ( !(|colcnt) && clut_ack)
-					clut_acc =1'b0;
+					iclut_req =1'b0;
 			end
 
 			//

ParseResult:
UPD HdlStmProcess@@ to 
    UPD HdlValueId@@wb_di to clut_q
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@clut_acc to iclut_req

UPD HdlStmCase@@c_state to c_state
    UPD HdlStmBlock@@SEQ to SEQ
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlValueId@@clut_acc to iclut_req
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@wb_di to clut_q
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@wb_di to clut_q
        UPD HdlOp@@ASSIGN to ASSIGN
            UPD HdlOp@@INDEX to INDEX
                UPD HdlValueId@@wb_di to clut_q

UPD HdlStmIf@@ to 
    UPD HdlOp@@ASSIGN to ASSIGN
        UPD HdlValueId@@clut_acc to iclut_req


CommitId: c694f05c4f5cdec655206c9c61adf670a5e11ac6
Major revisions throughout the core.
--- a/rtl/verilog/vga_colproc.v
+++ b/rtl/verilog/vga_colproc.v
@@ -349,7 +354,7 @@ module vga_colproc(clk, srst, pixel_buffer_di, wb_di, ColorDepth, PseudoColor,
 				begin
 					pixel_buffer_rreq <= #1 pixelbuf_rreq;
 					RGB_fifo_wreq <= #1 RGBbuf_wreq;
-					clut_req <= #1 clut_acc;
+					clut_req <= #1 iclut_req;
 				end
 	end
 

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlValueId@@clut_acc to iclut_req


CommitId: cad81739c16fa2507e6686ee711b5d4642f94142
1) Rewrote vga_fifo_dc. It now uses gray codes and a more elaborate anti-metastability scheme.
--- a/rtl/verilog/vga_fifo_dc.v
+++ b/rtl/verilog/vga_fifo_dc.v
@@ -57,7 +62,24 @@
 `include "timescale.v"
 //synopsys translate_on
 
-module vga_fifo_dc (rclk, wclk, aclr, wreq, d, rreq, q, rd_empty, rd_full, wr_empty, wr_full);
+
+/*
+
+  Dual clock FIFO.
+
+  Uses gray codes to move from one clock domain to the other.
+
+  Flags are synchronous to the related clock domain;
+  - empty: synchronous to read_clock
+  - full : synchronous to write_clock
+
+  CLR is available in both clock-domains.
+  Asserting any clr signal resets the entire FIFO.
+  When crossing clock domains the clears are synchronized.
+  Therefore one clock domain can enter or leave the reset state before the other.
+*/
+
+module vga_fifo_dc (rclk, wclk, rclr, wclr, wreq, d, rreq, q, empty, full);
 
 	// parameters
 	parameter AWIDTH = 7;  //128 entries

ParseResult:
UPD HdlIdDef@@rd_full to rrst

MOV HdlIdDef@@rd_full to ports
HdlIdDef: rd_full
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: OUT

UPD HdlIdDef@@rd_empty to wrst

MOV HdlIdDef@@rd_empty to ports
HdlIdDef: rd_empty
    HdlOp: PARAMETRIZATION
        list: ops
            HdlValueId: reg
    HdlDirection: OUT

UPD HdlIdDef@@aclr to rclr

INS HdlIdDef@@wclr to ports
HdlIdDef: wclr
    HdlDirection: IN

UPD HdlIdDef@@wr_empty to empty

UPD HdlIdDef@@wr_full to full

UPD HdlIdDef@@rd_full to rd_full
    UPD HdlDirection@@OUT to INTERNAL

UPD HdlIdDef@@rd_empty to rd_empty
    UPD HdlDirection@@OUT to INTERNAL

UPD HdlModuleDef@@vga_fifo_dc to vga_fifo_dc
    DEL list@@objs from vga_fifo_dc


CommitId: cad81739c16fa2507e6686ee711b5d4642f94142
1) Rewrote vga_fifo_dc. It now uses gray codes and a more elaborate anti-metastability scheme.
--- a/rtl/verilog/vga_pgen.v
+++ b/rtl/verilog/vga_pgen.v
@@ -465,7 +486,7 @@ module vga_pgen (
 	// The cursor_processor pipelines introduce a delay between the color
 	// processor's rgb_fifo_wreq and the rgb_fifo_full signals. To compensate
 	// for this we double the rgb_fifo.
-	wire [3:0] rgb_fifo_nword;
+	wire [4:0] rgb_fifo_nword;
 
 	vga_fifo #(4, 24) rgb_fifo (
 		.clk    ( clk_i          ),

ParseResult:
DEL HdlStmProcess@@ from objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: pclk_i
    HdlStmIf: body
        HdlValueId: pclk_ena
        HdlStmCase: ctrl_dvi_odf
            HdlStmCaseType: CASE
            HdlValueId: ctrl_dvi_odf
            list: cases
                tuple
                    HdlValueInt: 00
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: g
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 3
                                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: b
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 7
                                                HdlValueInt: 0
                        HdlValueId: pA
                        HdlValueInt: 1
                tuple
                    HdlValueInt: 01
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: g
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 4
                                                                HdlValueInt: 2
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: b
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 3
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: g
                                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: b
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 2
                                                HdlValueInt: 0
                        HdlValueId: pA
                        HdlValueInt: 1
                tuple
                    HdlValueInt: 10
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: g
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 4
                                                        HdlValueInt: 2
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: b
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 7
                                                        HdlValueInt: 3
                                HdlValueInt: 0
                        HdlValueId: pA
                        HdlValueInt: 1
                tuple
                    HdlValueInt: 11
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: g
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 5
                                                        HdlValueInt: 3
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: b
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 7
                                                        HdlValueInt: 3
                                HdlValueInt: 0
                        HdlValueId: pA
                        HdlValueInt: 1
        list: elifs

DEL HdlStmProcess@@ from objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: pclk_i
    HdlStmIf: body
        HdlValueId: pclk_ena
        HdlStmCase: ctrl_dvi_odf
            HdlStmCaseType: CASE
            HdlValueId: ctrl_dvi_odf
            list: cases
                tuple
                    HdlValueInt: 00
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: r
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 7
                                                HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: g
                                        HdlOp: DOWNTO
                                            list: ops
                                                HdlValueInt: 7
                                                HdlValueInt: 4
                        HdlValueId: pB
                        HdlValueInt: 1
                tuple
                    HdlValueInt: 01
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 3
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: g
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 5
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: r
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 2
                                                        HdlValueInt: 0
                                HdlOp: INDEX
                                    list: ops
                                        HdlValueId: g
                                        HdlValueInt: 1
                        HdlValueId: pB
                        HdlValueInt: 1
                tuple
                    HdlValueInt: 10
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: r
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 7
                                                        HdlValueInt: 3
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: g
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 7
                                                        HdlValueInt: 5
                                HdlValueInt: 0
                        HdlValueId: pB
                        HdlValueInt: 1
                tuple
                    HdlValueInt: 11
                    HdlStmAssign
                        HdlOp: CONCAT
                            list: ops
                                HdlOp: CONCAT
                                    list: ops
                                        HdlOp: CONCAT
                                            list: ops
                                                HdlValueInt: 0
                                                HdlOp: INDEX
                                                    list: ops
                                                        HdlValueId: r
                                                        HdlOp: DOWNTO
                                                            list: ops
                                                                HdlValueInt: 7
                                                                HdlValueInt: 3
                                        HdlOp: INDEX
                                            list: ops
                                                HdlValueId: g
                                                HdlOp: DOWNTO
                                                    list: ops
                                                        HdlValueInt: 7
                                                        HdlValueInt: 6
                                HdlValueInt: 0
                        HdlValueId: pB
                        HdlValueInt: 1
        list: elifs


CommitId: cad81739c16fa2507e6686ee711b5d4642f94142
1) Rewrote vga_fifo_dc. It now uses gray codes and a more elaborate anti-metastability scheme.
--- a/rtl/verilog/vga_pgen.v
+++ b/rtl/verilog/vga_pgen.v
@@ -482,7 +503,7 @@ module vga_pgen (
 		.afull  ( )
 	);
 
-	assign rgb_fifo_full = rgb_fifo_nword[3];
+	assign rgb_fifo_full = rgb_fifo_nword[3]; // actually half full
 
 	assign line_fifo_rreq = gate & pclk_ena;
 
ParseResult:
DEL HdlStmProcess@@ from objs
HdlStmProcess
    list: sensitivity
        HdlOp: RISING
            list: ops
                HdlValueId: pclk_i
    HdlStmIf: body
        HdlValueId: pclk_ena
        HdlStmAssign: if_true
            HdlValueId: pB
            HdlValueId: dvi_d_o
            HdlValueInt: 1
        list: elifs
        HdlStmAssign: if_false
            HdlValueId: pA
            HdlValueId: dvi_d_o
            HdlValueInt: 1


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/wb_master.vhd
+++ b/wb_master.vhd
@@ -6,15 +6,18 @@
 -- rev.: 1.1 June  3rd, 2001. Changed address related sections.
 -- rev.: 1.2 June 23nd, 2001. Removed unused "sel_vba", "vmem_offs" and "bl" signals.
 -- rev.: 1.3 July  6th, 2001. Major bug fixes; core did not respond correctly to delayed ACK_I generation.
---
-
--- ToDo: remove multiplier; replace it by simple counters.
+-- rev.: 1.4 July 15th, 2001. Added CLUT bank switching.
+--                            Removed multiplier, replaced it by counters
+--                            Fixed timing bug.
 --
 
 library ieee;
 use ieee.std_logic_1164.all;
 use ieee.std_logic_arith.all;
 
+library count;
+use count.count.all;
+
 entity wb_master is
 	port(
 		-- WISHBONE signals

ParseResult:
INS HdlLibrary@@count to objs


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/wb_master.vhd
+++ b/wb_master.vhd
@@ -38,17 +41,19 @@ entity wb_master is
 		ctrl_cd : in std_logic_vector(1 downto 0);   -- color depth
 		ctrl_pc : in std_logic;                      -- 8bpp pseudo color/bw
 		ctrl_vbl : in std_logic_vector(1 downto 0);  -- burst length
-		ctrl_bsw : in std_logic;                     -- enable video page switch
+		ctrl_vbsw : in std_logic;                    -- enable video bank switching
+		ctrl_cbsw : in std_logic;                    -- enable clut bank switching
 
 		-- video memory addresses
 		VBAa,                                        -- Video Memory Base Address-A
 		VBAb : in unsigned(31 downto 2);             -- Video Memory Base Address-B
-		CBA : in unsigned(31 downto 2);              -- CLUT Base Address Register
+		CBA : in unsigned(31 downto 11);             -- CLUT Base Address Register
 
-		Thgate : unsigned(15 downto 0);              -- horizontal visible area (in pixels)
-		Tvgate : unsigned(15 downto 0);              -- vertical visible area (in horizontal lines)
-
-		stat_AMP : out std_logic;                    -- active memory page
+		Thgate : in unsigned(15 downto 0);           -- horizontal visible area (in pixels)
+		Tvgate : in unsigned(15 downto 0);           -- vertical visible area (in horizontal lines)
+	
+		stat_AVMP : out std_logic;                   -- active video memory page
+		stat_ACMP : out std_logic;                   -- active color lookup table
 		bs_req : out std_logic;                      -- bank-switch request: memory page switched (when enabled). bs_req is always generated
 
 		-- to/from line fifo

ParseResult:
UPD HdlIdDef@@ctrl_bsw to ctrl_vbsw

INS HdlIdDef@@ctrl_cbsw to ports
HdlIdDef: ctrl_cbsw
    HdlValueId: std_logic
    HdlDirection: IN

UPD HdlIdDef@@stat_AMP to stat_AVMP

INS HdlIdDef@@stat_ACMP to ports
HdlIdDef: stat_ACMP
    HdlValueId: std_logic
    HdlDirection: OUT

UPD HdlIdDef@@CBA to CBA
    UPD HdlOp@@INDEX to INDEX
        UPD HdlOp@@DOWNTO to DOWNTO
            UPD HdlValueInt@@2 to 11


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/wb_master.vhd
+++ b/wb_master.vhd
@@ -115,7 +120,8 @@ architecture structural of wb_master is
 	signal clut_req, clut_ack : std_logic;                                   -- clut access request // clut access acknowledge
 	signal clut_offs : unsigned(7 downto 0);                                 -- clut memory offset
 	signal nvmem_req, vmem_ack : std_logic;                                  -- NOT video memory access request // video memory access acknowledge
-	signal pixelbuf_rreq, pixelbuf_empty : std_logic;
+	signal ImDone : std_logic;                                               -- image done
+	signal pixelbuf_rreq, pixelbuf_empty, pixelbuf_flush : std_logic;
 	signal pixelbuf_q : std_logic_vector(31 downto 0);
 	signal RGBbuf_rreq, RGBbuf_wreq, RGBbuf_empty, RGBbuf_full, fill_RGBfifo, RGB_fifo_full : std_logic;
 	signal RGBbuf_d : std_logic_vector(23 downto 0);

ParseResult:
INS HdlIdDef@@ImDone to objs
HdlIdDef: ImDone
    HdlValueId: std_logic
    HdlDirection: INTERNAL

INS HdlIdDef@@pixelbuf_flush to objs
HdlIdDef: pixelbuf_flush
    HdlValueId: std_logic
    HdlDirection: INTERNAL


CommitId: e4c20e903fe9ca7c51a2e959d48d6b36de84fbee
Added CLUT bank switching.
--- a/wb_master.vhd
+++ b/wb_master.vhd
@@ -276,10 +330,11 @@ begin
 
 
 	nVen <= not ctrl_Ven;
+	pixelbuf_flush <= nVen or ImDone;
 
 	-- pixel buffer (temporary store data read from video memory)
 	pixel_buf: FIFO generic map (DEPTH => 16, WIDTH => 32)
-		port map(clk => CLK_I, sclr => nVen, D => DAT_I, wreq => vmem_ack, Q => pixelbuf_q, rreq => pixelbuf_rreq, 
+		port map(clk => CLK_I, sclr => pixelbuf_flush, D => DAT_I, wreq => vmem_ack, Q => pixelbuf_q, rreq => pixelbuf_rreq, 
 						empty => pixelbuf_empty, hfull => nvmem_req);
 
 	-- hookup color processor

ParseResult:
INS HdlStmAssign@@ to objs
HdlStmAssign
    HdlOp: OR
        list: ops
            HdlValueId: nVen
            HdlValueId: ImDone
    HdlValueId: pixelbuf_flush


CommitId: 67d546a479cbba7b105a13b6a8891a97a1d4a4c9
Changed timing section in VGA core, changed testbench accordingly.
--- a/bench/verilog/sync_check.v
+++ b/bench/verilog/sync_check.v
@@ -103,10 +106,10 @@ parameter	clk_time = 40;
 
 assign hcheck = enable;
 assign vcheck = enable;
-assign hhtime_exp = (thsync + 1) * clk_time;
-assign htime_exp  = (thlen + 2) * clk_time;
-assign vhtime_exp = (htime_exp * (tvsync + 1));
-assign vtime_exp  = htime_exp * (tvlen+2);
+assign hhtime_exp = (thsync +1) * clk_time;
+assign htime_exp  = (thlen +1) * clk_time;
+assign vhtime_exp = (htime_exp * (tvsync +1));
+assign vtime_exp  = htime_exp * (tvlen +1);
 
 always @(posedge pclk)
 	if(!rst | !enable)

ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@MUL to MUL
        UPD HdlOp@@ADD to ADD
            UPD HdlValueInt@@2 to 1

UPD HdlStmAssign@@ to 
    UPD HdlOp@@MUL to MUL
        UPD HdlOp@@ADD to ADD
            UPD HdlValueInt@@2 to 1


CommitId: 67d546a479cbba7b105a13b6a8891a97a1d4a4c9
Changed timing section in VGA core, changed testbench accordingly.
--- a/bench/verilog/sync_check.v
+++ b/bench/verilog/sync_check.v
@@ -167,7 +170,12 @@ always @(vsync)
       end
 
 // Verify BLANC Timing
-assign bv_start = tvsync   + tvgdel + 2;
+//assign bv_start = tvsync   + tvgdel + 2;
+//assign bv_end   = bv_start + tvgate + 2;
+
+//assign bh_start = thsync   + thgdel + 1;
+//assign bh_end   = bh_start + thgate + 2;
+assign bv_start = tvsync   + tvgdel + 1;
 assign bv_end   = bv_start + tvgate + 2;
 
 assign bh_start = thsync   + thgdel + 1;
ParseResult:
UPD HdlStmAssign@@ to 
    UPD HdlOp@@ADD to ADD
        UPD HdlValueInt@@2 to 1


